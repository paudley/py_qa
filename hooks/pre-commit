#!/bin/bash
# SPDX-License-Identifier: MIT
# Pre-commit hook
# Ensures code quality by running lint, security, and quality checks on staged files.

set -e

echo "üîç Running pre-commit checks..."

# Get the list of all staged files for comprehensive checks
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM || true)
# Get Python files specifically
STAGED_PY_FILES=$(echo "$STAGED_FILES" | grep '\.py$' || true)

if [ -z "$STAGED_FILES" ]; then
    echo "‚úÖ No files to check"
    exit 0
fi

echo "üìù Files to check:"
echo "$STAGED_FILES" | sed 's/^/  - /'

# Function to check if we're in a virtual environment
check_venv() {
    if [ -z "$VIRTUAL_ENV" ]; then
        echo "‚ö†Ô∏è  Warning: No virtual environment detected. Activating .venv..."
        if [ -f .venv/bin/activate ]; then
            source .venv/bin/activate
        else
            echo "‚ùå No .venv found. Please create virtual environment first."
            exit 1
        fi
    fi
}

# Ensure we're in venv
check_venv

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Run security scan for credentials and secrets
echo ""
echo "üîí Security scan for secrets and credentials..."
if [ -f "$PROJECT_ROOT/py-qa/security-scan.sh" ]; then
    # Call security scanner without arguments to let it scan staged files automatically
    # This avoids command line length limits and runs bandit only once
    if ! "$PROJECT_ROOT/py-qa/security-scan.sh"; then
        echo ""
        echo "‚ùå Security check failed! Please remove sensitive data before committing."
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Security scan script not found, skipping..."
fi

# Run quality checks (license headers, file sizes, etc.)
echo ""
echo "üìã Running quality checks..."
if [ -f "$PROJECT_ROOT/py-qa/check-quality.sh" ]; then
    # Run quality checks but only fail on errors, not warnings
    if ! "$PROJECT_ROOT/py-qa/check-quality.sh" all $STAGED_FILES; then
        # check-quality.sh returns 1 only for errors, 0 for warnings
        echo ""
        echo "‚ùå Quality check failed! Please fix errors before committing."
        exit 1
    fi
else
    echo "‚ö†Ô∏è  Quality check script not found, skipping..."
fi

# Only continue with Python-specific checks if there are Python files
if [ -z "$STAGED_PY_FILES" ]; then
    echo ""
    echo "‚úÖ No Python files to check for linting"
    echo "‚úÖ All pre-commit checks passed! Ready to commit."
    exit 0
fi

# Run project linting script with all project-specific options
echo ""
echo "üîß Running project linting checks..."
if ! "$PROJECT_ROOT/py-qa/lint"; then
    echo "‚ùå Linting issues found. Run './py-qa/lint' to see details and fix."
    exit 1
fi
echo "‚úÖ Linting check passed"

# Run mypy on source files only (not tests)
echo ""
echo "üîç Running type checking with mypy..."
SRC_FILES=$(echo "$STAGED_PY_FILES" | grep '^src/' || true)
if [ -n "$SRC_FILES" ]; then
    if ! uv run mypy $SRC_FILES; then
        echo "‚ùå Type checking failed. Please fix type errors."
        exit 1
    fi
    echo "‚úÖ Type checking passed"
else
    echo "‚ÑπÔ∏è  No source files to type check"
fi

# Check for debug print statements
echo ""
echo "üêõ Checking for debug statements..."
if grep -n "print(" $STAGED_PY_FILES | grep -v "#.*print(" | grep -v "rprint" | grep -v "console.print" | grep -v "CONSOLE.print"; then
    echo "‚ùå Found print() statements. Use logging or remove debug prints."
    exit 1
fi
echo "‚úÖ No debug print statements found"

# Check for TODO comments that shouldn't be committed
echo ""
echo "üìã Checking for uncommitted TODOs..."
if grep -n "TODO BEFORE COMMIT\|FIXME BEFORE COMMIT\|XXX BEFORE COMMIT" $STAGED_PY_FILES; then
    echo "‚ùå Found TODOs marked as 'BEFORE COMMIT'. Please resolve them."
    exit 1
fi
echo "‚úÖ No blocking TODOs found"

# Check commit message for banned words
echo ""
echo "üö´ Checking commit message for banned words..."
# Get the commit message (for amending commits or commit -m)
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    if [ -f "$PROJECT_ROOT/py-qa/check-banned-words.sh" ]; then
        if ! "$PROJECT_ROOT/py-qa/check-banned-words.sh" "$COMMIT_MSG_FILE"; then
            echo ""
            echo "‚ùå Banned words detected in commit message!"
            echo "Please revise your commit message and try again."
            exit 1
        fi
    else
        echo "‚ö†Ô∏è  Banned words checker not found, skipping..."
    fi
else
    echo "‚ÑπÔ∏è  No commit message file yet (will be checked in commit-msg hook)"
fi

echo ""
echo "‚úÖ All pre-commit checks passed! Ready to commit."
