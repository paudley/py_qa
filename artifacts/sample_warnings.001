ℹ️ Discovered 275 file(s) to lint
yamllint, .github/dependabot.yml:11, comments, too few spaces before comment
yamllint, .github/dependabot.yml:12, comments, too few spaces before comment
ruff,     ref_docs/tool_help/_scratch/sample.py:1:print, D100, Missing docstring in public module
ruff,     ref_docs/tool_help/_scratch/sample.py:1:print, INP001, File `ref_docs/tool_help/_scratch/sample.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     ref_docs/tool_help/_scratch/sample.py:1:print, T201, `print` found
yamllint, ref_docs/tool_help/_scratch/sample.yaml:1, document-start, missing document start "---"
ruff,     src/pyqa/__init__.py:3:""", RUF002, Docstring contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
pylint,   src/pyqa/__init__.py:42:__getattr__, R2004, Consider using a named constant or an enum instead of ''__version__''.
ruff,     src/pyqa/banned.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/banned.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/banned.py:56:load_terms, D102, Missing docstring in public method
ruff,     src/pyqa/banned.py:66:scan, D102, Missing docstring in public method
ruff,     src/pyqa/banned.py:73:scan, PERF401, Use a list comprehension to create a transformed list
ruff,     src/pyqa/checks/licenses.py:1:# SPDX-License-Identifier: MIT, INP001, File `src/pyqa/checks/licenses.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     src/pyqa/checks/licenses.py:32:LicenseMetadata, D101, Missing docstring in public class
ruff,     src/pyqa/checks/licenses.py:51:should_skip, D102, Missing docstring in public method
ruff,     src/pyqa/checks/licenses.py:61:match_notice, D102, Missing docstring in public method
pylint,   src/pyqa/checks/licenses.py:64:match_notice, R6103, Use 'if (match := _COPYRIGHT_PATTERN.search(line)):' instead
pylint,   src/pyqa/checks/licenses.py:85:load_project_license, R6103, Use 'if (license_file := _resolve_license_file(root)):' instead
ruff,     src/pyqa/checks/licenses.py:131:load_license_policy, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/checks/licenses.py:131:load_license_policy, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/checks/licenses.py:149:_extract_project_license, R2004, Consider using a named constant or an enum instead of ''text''.
pylint,   src/pyqa/checks/licenses.py:151:_extract_project_license, R2004, Consider using a named constant or an enum instead of ''file''.
pylint,   src/pyqa/checks/licenses.py:185:_extract_license_copyright, W2901, Redefining 'line' from loop (line 184)
ruff,     src/pyqa/checks/licenses.py:185:_extract_license_copyright, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/checks/licenses.py:191:verify_file_license, R1260, 'verify_file_license' is too complex. The McCabe rating is 8
pylint,   src/pyqa/checks/licenses.py:206:verify_file_license, R6103, Use 'if (tag := f'SPDX-License-Identifier: {policy.spdx_id}') not in content:' instead
ruff,     src/pyqa/checks/licenses.py:206:verify_file_license, SIM102, Use a single `if` statement instead of nested `if` statements
pylint,   src/pyqa/checks/licenses.py:215:verify_file_license, R6103, Use 'if not (observed := policy.match_notice(content)):' instead
pylint,   src/pyqa/checks/licenses.py:219:verify_file_license, C0301, Line too long (109/100)
ruff,     src/pyqa/checks/licenses.py:219:verify_file_license, E501, Line too long (109 > 100)
ruff,     src/pyqa/checks/licenses.py:235:normalise_notice, D103, Missing docstring in public function
pylint,   src/pyqa/checks/licenses.py:245:_build_canonical_notice, R6103, Use 'if (explicit_notice := _coerce_optional_str(config.pop('notice', None))):' instead
pylint,   src/pyqa/checks/licenses.py:255:_build_canonical_notice, R6103, Use 'if (extracted_year := _extract_year(metadata.copyright_notice)):' instead
ruff,     src/pyqa/checks/licenses.py:265:_extract_year, RUF001, String contains ambiguous `–` (EN DASH). Did you mean `-` (HYPHEN-MINUS)?
pylint,   src/pyqa/checks/licenses.py:266:_extract_year, R6103, Use 'if (year_match := re.search('(\\d{4}(?:\\s*[-–]\\s*\\d{4}|\\s*\\+?|\\s*present)?)', notice)):' instead
ruff,     src/pyqa/checks/licenses.py:287:_coerce_optional_str, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/checks/licenses.py:287:_coerce_optional_str, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/checks/licenses.py:297:_coerce_str_list, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/checks/licenses.py:297:_coerce_str_list, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/checks/licenses.py:297:_coerce_str_list, TRY004, Prefer `TypeError` exception for invalid type
pylint,   src/pyqa/checks/licenses.py:298:_coerce_str_list, W2901, Redefining 'item' from loop (line 295)
ruff,     src/pyqa/checks/licenses.py:298:_coerce_str_list, PLW2901, `for` loop variable `item` overwritten by assignment target
pylint,   src/pyqa/checks/licenses.py:299:_coerce_str_list, R6103, Use 'if (item := item.strip()):' instead
ruff,     src/pyqa/checks/licenses.py:302:_coerce_str_list, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/checks/licenses.py:302:_coerce_str_list, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/checks/licenses.py:305:_strip_comment_prefix, R1260, '_strip_comment_prefix' is too complex. The McCabe rating is 8
pylint,   src/pyqa/checks/licenses.py:312:_strip_comment_prefix, R2004, Consider using a named constant or an enum instead of '':''.
ruff,     src/pyqa/clean.py:9:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/clean.py:9:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/clean.py:11:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/clean.py:13:from, TC001, Move application import `.config.CleanConfig` into a type-checking block
ruff,     src/pyqa/clean.py:19:CleanPlanItem, D101, Missing docstring in public class
ruff,     src/pyqa/clean.py:24:CleanPlan, D101, Missing docstring in public class
ruff,     src/pyqa/clean.py:28:paths, D102, Missing docstring in public method
ruff,     src/pyqa/clean.py:33:CleanResult, D101, Missing docstring in public class
ruff,     src/pyqa/clean.py:37:register_removed, D102, Missing docstring in public method
ruff,     src/pyqa/clean.py:40:register_skipped, D102, Missing docstring in public method
ruff,     src/pyqa/clean.py:47:__init__, D107, Missing docstring in `__init__`
pylint,   src/pyqa/clean.py:56:plan, R1260, 'plan' is too complex. The McCabe rating is 7
ruff,     src/pyqa/clean.py:56:plan, D102, Missing docstring in public method
pylint,   src/pyqa/clean.py:122:_merge_unique, W2901, Redefining 'value' from loop (line 121)
ruff,     src/pyqa/clean.py:122:_merge_unique, PLW2901, `for` loop variable `value` overwritten by assignment target
pylint,   src/pyqa/clean.py:144:_match_patterns, W2901, Redefining 'candidate' from loop (line 143)
ruff,     src/pyqa/clean.py:144:_match_patterns, PLW2901, `for` loop variable `candidate` overwritten by assignment target
pylint,   src/pyqa/clean.py:145:_match_patterns, R6103, Use 'if (candidate := candidate.resolve()) == base:' instead
mypy,     src/pyqa/cli/__init__.py:14:_build_config, no-untyped-def, Function is missing a type annotation
ruff,     src/pyqa/cli/__init__.py:14:_build_config, ANN003, Missing type annotation for `**kwargs`
ruff,     src/pyqa/cli/__init__.py:14:_build_config, ANN202, Missing return type annotation for private function `_build_config`
ruff,     src/pyqa/cli/__init__.py:19:__all__, PYI056, Calling `.append()` on `__all__` may not be supported by all type checkers (use `+=` instead)
ruff,     src/pyqa/cli/banned.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
mypy,     src/pyqa/cli/banned.py:17:@, misc, Untyped decorator makes function "check_banned_words" untyped
pylint,   src/pyqa/cli/banned.py:18:check_banned_words, R1260, 'check_banned_words' is too complex. The McCabe rating is 7
ruff,     src/pyqa/cli/banned.py:19:check_banned_words, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/banned.py:25:check_banned_words, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/banned.py:25:check_banned_words, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/banned.py:26:check_banned_words, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/banned.py:31:check_banned_words, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/banned.py:39:check_banned_words, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/banned.py:39:check_banned_words, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/banned.py:47:check_banned_words, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/banned.py:47:check_banned_words, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/banned.py:57:check_banned_words, R6103, Use 'if not (matches := checker.scan(lines)):' instead
ruff,     src/pyqa/cli/clean.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
mypy,     src/pyqa/cli/clean.py:13:from, attr-defined, Module "pyqa.config_loader" does not explicitly export attribute "ConfigError"
ruff,     src/pyqa/cli/clean.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/clean.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/clean.py:21:main, PLR0913, Too many arguments in function definition (6 > 5)
ruff,     src/pyqa/cli/clean.py:23:main, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/clean.py:23:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
mypy,     src/pyqa/cli/clean.py:24:main, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/cli/clean.py:24:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/clean.py:30:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/clean.py:35:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/clean.py:35:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/clean.py:36:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/clean.py:36:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/config_builder.py:10:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/cli/config_builder.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/cli/config_builder.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_builder.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_builder.py:18:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_builder.py:19:from, TC001, Move application import `.options.LintOptions` into a type-checking block
ruff,     src/pyqa/cli/config_builder.py:19:from, TC001, Move application import `.options.ToolFilters` into a type-checking block
pylint,   src/pyqa/cli/config_builder.py:99:build_config, R1260, 'build_config' is too complex. The McCabe rating is 9
pylint,   src/pyqa/cli/config_builder.py:124:build_config, R2004, Consider using a named constant or an enum instead of ''sensitivity''.
pyright,  src/pyqa/cli/config_builder.py:124:build_config, reportAttributeAccessIssue, Cannot assign to attribute "sensitivity" for class "SeverityConfig"
mypy,     src/pyqa/cli/config_builder.py:125:build_config, assignment, Incompatible types in assignment (expression has type "str", variable has type "Literal['low', 'medium', 'high', 'maximum']")
pylint,   src/pyqa/cli/config_builder.py:128:build_config, R2004, Consider using a named constant or an enum instead of ''max_complexity''.
pylint,   src/pyqa/cli/config_builder.py:130:build_config, R2004, Consider using a named constant or an enum instead of ''max_arguments''.
pylint,   src/pyqa/cli/config_builder.py:132:build_config, R2004, Consider using a named constant or an enum instead of ''type_checking''.
pylint,   src/pyqa/cli/config_builder.py:134:build_config, R6103, Use 'if (level := options.type_checking.lower()) not in {'lenient', 'standard', 'strict'}:' instead
ruff,     src/pyqa/cli/config_builder.py:135:build_config, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/config_builder.py:135:build_config, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/config_builder.py:137:build_config, R2004, Consider using a named constant or an enum instead of ''bandit_severity''.
pyright,  src/pyqa/cli/config_builder.py:137:build_config, reportAttributeAccessIssue, Cannot assign to attribute "bandit_level" for class "SeverityConfig"
mypy,     src/pyqa/cli/config_builder.py:138:build_config, assignment, Incompatible types in assignment (expression has type "str", variable has type "Literal['low', 'medium', 'high']")
pylint,   src/pyqa/cli/config_builder.py:139:build_config, R2004, Consider using a named constant or an enum instead of ''bandit_confidence''.
pyright,  src/pyqa/cli/config_builder.py:139:build_config, reportAttributeAccessIssue, Cannot assign to attribute "bandit_confidence" for class "SeverityConfig"
mypy,     src/pyqa/cli/config_builder.py:140:build_config, assignment, Incompatible types in assignment (expression has type "str", variable has type "Literal['low', 'medium', 'high']")
pylint,   src/pyqa/cli/config_builder.py:141:build_config, R2004, Consider using a named constant or an enum instead of ''pylint_fail_under''.
pylint,   src/pyqa/cli/config_builder.py:153:_apply_python_version_detection, R2004, Consider using a named constant or an enum instead of ''python_version''.
pylint,   src/pyqa/cli/config_builder.py:154:_apply_python_version_detection, R6103, Use 'if (cli_specified := 'python_version' in provided):' instead
pylint,   src/pyqa/cli/config_builder.py:176:_normalize_python_version, R6103, Use 'if not (text := str(value).strip()):' instead
pylint,   src/pyqa/cli/config_builder.py:182:_normalize_python_version, R6103, Use 'if not (match := _PYTHON_VERSION_PATTERN.search(lowered)):' instead
pylint,   src/pyqa/cli/config_builder.py:190:_python_version_from_python_version_file, R1260, '_python_version_from_python_version_file' is too complex. The McCabe rating is 7
pylint,   src/pyqa/cli/config_builder.py:194:_python_version_from_python_version_file, W0717, try clause contains 7 statements, expected at most 1
pylint,   src/pyqa/cli/config_builder.py:196:_python_version_from_python_version_file, W2901, Redefining 'line' from loop (line 195)
ruff,     src/pyqa/cli/config_builder.py:196:_python_version_from_python_version_file, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/cli/config_builder.py:200:_python_version_from_python_version_file, R6103, Use 'if (normalized := _normalize_python_version(line)):' instead
pylint,   src/pyqa/cli/config_builder.py:207:_python_version_from_pyproject, R1260, '_python_version_from_pyproject' is too complex. The McCabe rating is 18
ruff,     src/pyqa/cli/config_builder.py:207:_python_version_from_pyproject, C901, `_python_version_from_pyproject` is too complex (16 > 10)
ruff,     src/pyqa/cli/config_builder.py:207:_python_version_from_pyproject, PLR0912, Too many branches (15 > 12)
pylint,   src/pyqa/cli/config_builder.py:249:_python_version_from_pyproject, R6103, Use 'if (normalized := _normalize_python_version(candidate_value)):' instead
pylint,   src/pyqa/cli/config_builder.py:308:_resolved_roots, R2004, Consider using a named constant or an enum instead of ''dirs''.
pylint,   src/pyqa/cli/config_builder.py:328:_resolved_explicit_files, R2004, Consider using a named constant or an enum instead of ''paths''.
pylint,   src/pyqa/cli/config_builder.py:357:_filter_roots_within_boundaries, R6103, Use 'if (matching := [path for path in roots if _is_within_any(path, boundaries)]):' instead
pylint,   src/pyqa/cli/config_builder.py:380:_resolved_excludes, R6103, Use 'if (resolved := _resolve_path(project_root, default_path).resolve()) not in excludes:' instead
pylint,   src/pyqa/cli/config_builder.py:382:_resolved_excludes, R2004, Consider using a named constant or an enum instead of ''exclude''.
pylint,   src/pyqa/cli/config_builder.py:385:_resolved_excludes, R6103, Use 'if (resolved := _resolve_path(project_root, path).resolve()) not in excludes:' instead
ruff,     src/pyqa/cli/config_builder.py:390:_select_flag, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/config_builder.py:411:_build_output, R2004, Consider using a named constant or an enum instead of ''filters''.
pylint,   src/pyqa/cli/config_builder.py:419:_build_output, R2004, Consider using a named constant or an enum instead of ''verbose''.
pylint,   src/pyqa/cli/config_builder.py:420:_build_output, R2004, Consider using a named constant or an enum instead of ''quiet''.
pylint,   src/pyqa/cli/config_builder.py:421:_build_output, R2004, Consider using a named constant or an enum instead of ''no_color''.
pylint,   src/pyqa/cli/config_builder.py:422:_build_output, R2004, Consider using a named constant or an enum instead of ''no_emoji''.
pylint,   src/pyqa/cli/config_builder.py:424:_build_output, R2004, Consider using a named constant or an enum instead of ''output_mode''.
pylint,   src/pyqa/cli/config_builder.py:426:_build_output, R2004, Consider using a named constant or an enum instead of ''show_passing''.
pylint,   src/pyqa/cli/config_builder.py:427:_build_output, R2004, Consider using a named constant or an enum instead of ''no_stats''.
pylint,   src/pyqa/cli/config_builder.py:434:_build_output, R2004, Consider using a named constant or an enum instead of ''pr_summary_out''.
pylint,   src/pyqa/cli/config_builder.py:438:_build_output, R2004, Consider using a named constant or an enum instead of ''pr_summary_limit''.
pylint,   src/pyqa/cli/config_builder.py:442:_build_output, R2004, Consider using a named constant or an enum instead of ''pr_summary_min_severity''.
pylint,   src/pyqa/cli/config_builder.py:447:_build_output, R2004, Consider using a named constant or an enum instead of ''pr_summary_template''.
pylint,   src/pyqa/cli/config_builder.py:475:_build_execution, R2004, Consider using a named constant or an enum instead of ''only''.
pylint,   src/pyqa/cli/config_builder.py:476:_build_execution, R2004, Consider using a named constant or an enum instead of ''language''.
pylint,   src/pyqa/cli/config_builder.py:477:_build_execution, R2004, Consider using a named constant or an enum instead of ''fix_only''.
pylint,   src/pyqa/cli/config_builder.py:478:_build_execution, R2004, Consider using a named constant or an enum instead of ''check_only''.
pylint,   src/pyqa/cli/config_builder.py:479:_build_execution, R2004, Consider using a named constant or an enum instead of ''bail''.
pylint,   src/pyqa/cli/config_builder.py:481:_build_execution, R2004, Consider using a named constant or an enum instead of ''jobs''.
pylint,   src/pyqa/cli/config_builder.py:481:_build_execution, W0160, Consider rewriting as a ternary expression
ruff,     src/pyqa/cli/config_builder.py:481:_build_execution, SIM108, Use ternary operator `jobs = options.jobs if "jobs" in provided else current.jobs` instead of `if`-`else`-block
pylint,   src/pyqa/cli/config_builder.py:488:_build_execution, R2004, Consider using a named constant or an enum instead of ''no_cache''.
pylint,   src/pyqa/cli/config_builder.py:491:_build_execution, R2004, Consider using a named constant or an enum instead of ''cache_dir''.
pylint,   src/pyqa/cli/config_builder.py:495:_build_execution, R2004, Consider using a named constant or an enum instead of ''use_local_linters''.
pylint,   src/pyqa/cli/config_builder.py:497:_build_execution, R2004, Consider using a named constant or an enum instead of ''line_length''.
pylint,   src/pyqa/cli/config_builder.py:498:_build_execution, R2004, Consider using a named constant or an enum instead of ''sql_dialect''.
pylint,   src/pyqa/cli/config_builder.py:500:_build_execution, R2004, Consider using a named constant or an enum instead of ''python_version''.
pylint,   src/pyqa/cli/config_builder.py:525:_unique_paths, R6103, Use 'if (resolved := path.resolve()) not in seen:' instead
pylint,   src/pyqa/cli/config_builder.py:561:_is_within_any, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/cli/config_builder.py:563:_is_within_any, TRY300, Consider moving this statement to an `else` block
pylint,   src/pyqa/cli/config_builder.py:572:_parse_filters, R2004, Consider using a named constant or an enum instead of '':''.
ruff,     src/pyqa/cli/config_builder.py:573:_parse_filters, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/cli/config_builder.py:573:_parse_filters, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/config_builder.py:576:_parse_filters, R6103, Use 'if not (chunks := [chunk.strip() for chunk in expressions.split(';;') if chunk.strip()]):' instead
pylint,   src/pyqa/cli/config_builder.py:584:_normalize_output_mode, R6103, Use 'if (normalized := value.lower()) not in _ALLOWED_OUTPUT_MODES:' instead
ruff,     src/pyqa/cli/config_builder.py:585:_normalize_output_mode, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/cli/config_builder.py:585:_normalize_output_mode, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/config_builder.py:591:_normalize_min_severity, R6103, Use 'if (normalized := value.lower()) not in _ALLOWED_SUMMARY_SEVERITIES:' instead
ruff,     src/pyqa/cli/config_builder.py:592:_normalize_min_severity, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/cli/config_builder.py:592:_normalize_min_severity, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/config_builder.py:608:_model_clone, UP047, Generic function `_model_clone` should use type parameters
mypy,     src/pyqa/cli/config_builder.py:609:_model_clone, redundant-cast, Redundant cast to "ModelT"
ruff,     src/pyqa/cli/config_cmd.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_cmd.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_cmd.py:22:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/config_cmd.py:23:from, TID252, Prefer absolute imports over relative imports from parent modules
mypy,     src/pyqa/cli/config_cmd.py:29:@, misc, Untyped decorator makes function "config_show" untyped
pylint,   src/pyqa/cli/config_cmd.py:30:config_show, R1260, 'config_show' is too complex. The McCabe rating is 8
ruff,     src/pyqa/cli/config_cmd.py:31:config_show, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:31:config_show, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:32:config_show, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/config_cmd.py:32:config_show, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/config_cmd.py:40:config_show, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/config_cmd.py:41:config_show, FBT003, Boolean positional value in function call
pylint,   src/pyqa/cli/config_cmd.py:54:config_show, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     src/pyqa/cli/config_cmd.py:55:config_show, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/config_cmd.py:55:config_show, TRY003, Avoid specifying long messages outside the exception class
mypy,     src/pyqa/cli/config_cmd.py:68:@, misc, Untyped decorator makes function "config_validate" untyped
ruff,     src/pyqa/cli/config_cmd.py:70:config_validate, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:70:config_validate, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:71:config_validate, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/config_cmd.py:71:config_validate, FBT003, Boolean positional value in function call
mypy,     src/pyqa/cli/config_cmd.py:83:@, misc, Untyped decorator makes function "config_schema" untyped
ruff,     src/pyqa/cli/config_cmd.py:92:config_schema, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
pylint,   src/pyqa/cli/config_cmd.py:101:config_schema, R2004, Consider using a named constant or an enum instead of ''json''.
pylint,   src/pyqa/cli/config_cmd.py:103:config_schema, R2004, Consider using a named constant or an enum instead of ''json-tools''.
ruff,     src/pyqa/cli/config_cmd.py:108:config_schema, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/config_cmd.py:108:config_schema, TRY003, Avoid specifying long messages outside the exception class
mypy,     src/pyqa/cli/config_cmd.py:120:@, misc, Untyped decorator makes function "config_diff" untyped
pylint,   src/pyqa/cli/config_cmd.py:121:config_diff, R1260, 'config_diff' is too complex. The McCabe rating is 7
ruff,     src/pyqa/cli/config_cmd.py:122:config_diff, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:122:config_diff, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:125:config_diff, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/config_cmd.py:136:config_diff, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/config_cmd.py:137:config_diff, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/cli/config_cmd.py:140:config_diff, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/config_cmd.py:141:config_diff, EM102, Exception must not use an f-string literal, assign to variable first
pylint,   src/pyqa/cli/config_cmd.py:143:config_diff, R2004, Consider using a named constant or an enum instead of ''final''.
pylint,   src/pyqa/cli/config_cmd.py:147:config_diff, R2004, Consider using a named constant or an enum instead of ''final''.
ruff,     src/pyqa/cli/config_cmd.py:152:config_diff, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/config_cmd.py:152:config_diff, TRY003, Avoid specifying long messages outside the exception class
mypy,     src/pyqa/cli/config_cmd.py:164:@, misc, Untyped decorator makes function "config_export_tools" untyped
ruff,     src/pyqa/cli/config_cmd.py:166:config_export_tools, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
pylint,   src/pyqa/cli/config_cmd.py:201:_summarise_updates, R2004, Consider using a named constant or an enum instead of ''root''.
ruff,     src/pyqa/cli/config_cmd.py:208:_summarise_value, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
pylint,   src/pyqa/cli/config_cmd.py:225:_schema_to_markdown, R1260, '_schema_to_markdown' is too complex. The McCabe rating is 10
pylint,   src/pyqa/cli/config_cmd.py:229:_schema_to_markdown, R2004, Consider using a named constant or an enum instead of ''type''.
pylint,   src/pyqa/cli/config_cmd.py:233:_schema_to_markdown, R2004, Consider using a named constant or an enum instead of ''tool_settings''.
pylint,   src/pyqa/cli/config_cmd.py:247:_schema_to_markdown, R2004, Consider using a named constant or an enum instead of ''tool_settings''.
ruff,     src/pyqa/cli/config_cmd.py:295:_flatten_snapshot, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `data`
ruff,     src/pyqa/cli/config_cmd.py:299:_flatten_snapshot, RUF005, Consider `(*prefix, str(key))` instead of concatenation
ruff,     src/pyqa/cli/doctor.py:12:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/cli/doctor.py:22:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/doctor.py:23:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/doctor.py:24:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/doctor.py:25:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/doctor.py:26:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/cli/doctor.py:66:run_doctor, R6103, Use 'if (load_result := _load_configuration(root, console)) is None:' instead
pylint,   src/pyqa/cli/doctor.py:120:_render_grammar_section, R6103, Use 'if not (statuses := _collect_grammar_statuses()):' instead
ruff,     src/pyqa/cli/doctor.py:212:_render_summary, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/doctor.py:238:_probe_program, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/doctor.py:240:_probe_program, R6103, Use 'if (path := shutil.which(executable)):' instead
ruff,     src/pyqa/cli/doctor.py:253:_probe_module, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/doctor.py:283:_collect_grammar_statuses, W0717, try clause contains 3 statements, expected at most 1
pylint,   src/pyqa/cli/doctor.py:324:_capture_version, R6103, Use 'if (output := completed.stdout.strip() or completed.stderr.strip()):' instead
ruff,     src/pyqa/cli/doctor.py:326:_capture_version, RET504, Unnecessary assignment to `first_line` before `return` statement
ruff,     src/pyqa/cli/hooks.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/hooks.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/hooks.py:25:main, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/hooks.py:25:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/hooks.py:26:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/hooks.py:31:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/hooks.py:31:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/install.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/install.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/install.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/install.py:18:install_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/install.py:19:install_command, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/install.py:24:install_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/install.py:25:install_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/install.py:29:install_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/install.py:30:install_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/install.py:34:install_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/install.py:35:install_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:21:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:22:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:23:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:24:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:25:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:26:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:27:from, TC001, Move application import `..models.RunResult` into a type-checking block
ruff,     src/pyqa/cli/lint.py:27:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:28:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:29:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:30:from, TC001, Move application import `..tool_env.models.PreparedCommand` into a type-checking block
ruff,     src/pyqa/cli/lint.py:30:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:31:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/lint.py:32:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/cli/lint.py:39:lint_command, R1260, 'lint_command' is too complex. The McCabe rating is 34
ruff,     src/pyqa/cli/lint.py:39:lint_command, C901, `lint_command` is too complex (33 > 10)
ruff,     src/pyqa/cli/lint.py:39:lint_command, PLR0912, Too many branches (27 > 12)
ruff,     src/pyqa/cli/lint.py:39:lint_command, PLR0913, Too many arguments in function definition (46 > 5)
ruff,     src/pyqa/cli/lint.py:39:lint_command, PLR0915, Too many statements (113 > 50)
ruff,     src/pyqa/cli/lint.py:41:lint_command, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:46:lint_command, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:46:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:47:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:47:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:49:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:50:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:54:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:54:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:55:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:60:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:61:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:66:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:67:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:68:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:68:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:69:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:69:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:70:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:70:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:71:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:71:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:72:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:72:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:73:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:73:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:79:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:79:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:80:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:80:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:81:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:82:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:86:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:112:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:112:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:113:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:113:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:114:lint_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/lint.py:119:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:120:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:124:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:125:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:180:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:180:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:187:lint_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/lint.py:188:lint_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/lint.py:195:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:195:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:197:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:197:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:199:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:199:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:202:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:202:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:204:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:204:lint_command, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/lint.py:214:lint_command, R6103, Use 'if (derived_root := _derive_default_root(normalized_paths)) is not None:' instead
ruff,     src/pyqa/cli/lint.py:222:lint_command, PERF401, Use `list.extend` to create a transformed list
ruff,     src/pyqa/cli/lint.py:242:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:242:lint_command, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/lint.py:249:_normalise_bandit, R6103, Use 'if (normalized := value.lower()) not in {'low', 'medium', 'high'}:' instead
ruff,     src/pyqa/cli/lint.py:250:_normalise_bandit, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:250:_normalise_bandit, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/cli/lint.py:256:lint_command, C0325, Unnecessary parens after 'not' keyword
ruff,     src/pyqa/cli/lint.py:256:lint_command, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     src/pyqa/cli/lint.py:257:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:257:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:262:lint_command, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/cli/lint.py:262:lint_command, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/cli/lint.py:348:progress_callback, PLR0913, Too many arguments in function definition (6 > 5)
pylint,   src/pyqa/cli/lint.py:357:progress_callback, R2004, Consider using a named constant or an enum instead of ''start''.
pylint,   src/pyqa/cli/lint.py:360:progress_callback, R2004, Consider using a named constant or an enum instead of ''completed''.
pylint,   src/pyqa/cli/lint.py:455:_collect_provided_flags, R1260, '_collect_provided_flags' is too complex. The McCabe rating is 9
ruff,     src/pyqa/cli/lint.py:455:_collect_provided_flags, PLR0913, Too many arguments in function definition (7 > 5)
pylint,   src/pyqa/cli/lint.py:507:_collect_provided_flags, R6103, Use 'if (source := _parameter_source_name(ctx, name)) not in {'DEFAULT', 'DEFAULT_MAP', None}:' instead
pylint,   src/pyqa/cli/lint.py:530:_display_path, W0717, try clause contains 2 statements, expected at most 1
pylint,   src/pyqa/cli/lint.py:541:_derive_default_root, R6103, Use 'if not (candidates := [path if path.is_dir() else path.parent for path in paths]):' instead
mypy,     src/pyqa/cli/quality.py:11:from, attr-defined, Module "pyqa.config_loader" does not explicitly export attribute "ConfigError"
ruff,     src/pyqa/cli/quality.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/quality.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/quality.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/quality.py:30:main, PLR0913, Too many arguments in function definition (7 > 5)
ruff,     src/pyqa/cli/quality.py:32:main, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:37:main, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:37:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:38:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/quality.py:39:main, FBT003, Boolean positional value in function call
pylint,   src/pyqa/cli/quality.py:41:main, C0301, Line too long (101/100)
ruff,     src/pyqa/cli/quality.py:41:main, E501, Line too long (101 > 100)
ruff,     src/pyqa/cli/quality.py:43:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:49:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/quality.py:49:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/quality.py:50:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/quality.py:50:main, FBT003, Boolean positional value in function call
pylint,   src/pyqa/cli/quality.py:67:main, R2004, Consider using a named constant or an enum instead of ''schema''.
mypy,     src/pyqa/cli/quality.py:85:@, misc, Untyped decorator makes function "commit_msg" untyped
ruff,     src/pyqa/cli/quality.py:87:commit_msg, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:88:commit_msg, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:88:commit_msg, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:89:commit_msg, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/quality.py:89:commit_msg, FBT003, Boolean positional value in function call
mypy,     src/pyqa/cli/quality.py:96:@, misc, Untyped decorator makes function "branch_guard" untyped
ruff,     src/pyqa/cli/quality.py:98:branch_guard, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:98:branch_guard, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/quality.py:99:branch_guard, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/quality.py:99:branch_guard, FBT003, Boolean positional value in function call
pylint,   src/pyqa/cli/quality.py:116:_render_result, R1260, '_render_result' is too complex. The McCabe rating is 8
ruff,     src/pyqa/cli/quality.py:116:_render_result, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/quality.py:126:_render_result, R6103, Use 'if (path_obj := _to_path(issue.path)) is not None:' instead
pylint,   src/pyqa/cli/quality.py:127:_render_result, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/cli/security.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/cli/security.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/cli/security.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/security.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/security.py:17:security_scan_command, B008, Do not perform function call `typer.Argument` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/security.py:22:security_scan_command, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/security.py:22:security_scan_command, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/security.py:23:security_scan_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/security.py:24:security_scan_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/security.py:28:security_scan_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/security.py:29:security_scan_command, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/security.py:33:security_scan_command, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/security.py:33:security_scan_command, FBT003, Boolean positional value in function call
pylint,   src/pyqa/cli/security.py:38:security_scan_command, R6103, Use 'if not (target_files := _resolve_security_targets(files, root_path, staged)):' instead
ruff,     src/pyqa/cli/security.py:52:_resolve_security_targets, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/security.py:68:_report_security_findings, C0301, Line too long (104/100)
ruff,     src/pyqa/cli/security.py:68:_report_security_findings, E501, Line too long (105 > 100)
pylint,   src/pyqa/cli/security.py:75:_emit_secret_and_pii_findings, R1260, '_emit_secret_and_pii_findings' is too complex. The McCabe rating is 7
ruff,     src/pyqa/cli/tool_info.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/cli/tool_info.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/tool_info.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/tool_info.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/tool_info.py:18:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/cli/tool_info.py:22:run_tool_info, R1260, 'run_tool_info' is too complex. The McCabe rating is 10
pylint,   src/pyqa/cli/tool_info.py:33:run_tool_info, R6103, Use 'if (tool := DEFAULT_REGISTRY.try_get(tool_name)) is None:' instead
pylint,   src/pyqa/cli/tool_info.py:90:run_tool_info, R2004, Consider using a named constant or an enum instead of ''tool_settings''.
pylint,   src/pyqa/cli/tool_info.py:118:_build_metadata_table, W0141, Used builtin function 'map'. Using a list comprehension can be clearer.
ruff,     src/pyqa/cli/tool_info.py:147:_build_actions_table, C408, Unnecessary `tuple()` call (rewrite as a literal)
pylint,   src/pyqa/cli/tool_info.py:151:_build_actions_table, W0141, Used builtin function 'map'. Using a list comprehension can be clearer.
ruff,     src/pyqa/cli/typer_ext.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
pyright,  src/pyqa/cli/typer_ext.py:10:from, reportPrivateImportUsage, "_" is not exported from module "typer.core"
ruff,     src/pyqa/cli/typer_ext.py:10:from, TC002, Move third-party import `click.core.Parameter` into a type-checking block
mypy,     src/pyqa/cli/typer_ext.py:11:from, attr-defined, Module "typer.core" does not explicitly export attribute "_"
mypy,     src/pyqa/cli/typer_ext.py:17:format_options, no-untyped-def, Function is missing a type annotation for one or more arguments
mypy,     src/pyqa/cli/typer_ext.py:17:format_options, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/cli/typer_ext.py:17:format_options, ANN001, Missing type annotation for function argument `ctx`
ruff,     src/pyqa/cli/typer_ext.py:17:format_options, ANN001, Missing type annotation for function argument `formatter`
ruff,     src/pyqa/cli/typer_ext.py:17:format_options, D102, Missing docstring in public method
pylint,   src/pyqa/cli/typer_ext.py:23:format_options, R6103, Use 'if (record := param.get_help_record(ctx)) is None:' instead
mypy,     src/pyqa/cli/typer_ext.py:24:format_options, unreachable, Statement is unreachable
pylint,   src/pyqa/cli/typer_ext.py:26:format_options, R2004, Consider using a named constant or an enum instead of ''argument''.
pylint,   src/pyqa/cli/typer_ext.py:26:format_options, R6103, Use 'if (kind := getattr(param, 'param_type_name', '')) == 'argument':' instead
ruff,     src/pyqa/cli/typer_ext.py:53:__init__, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
ruff,     src/pyqa/cli/typer_ext.py:53:__init__, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `*args`
ruff,     src/pyqa/cli/typer_ext.py:53:__init__, D107, Missing docstring in `__init__`
mypy,     src/pyqa/cli/typer_ext.py:57:command, no-untyped-def, Function is missing a return type annotation
ruff,     src/pyqa/cli/typer_ext.py:57:command, ANN201, Missing return type annotation for public function `command`
ruff,     src/pyqa/cli/typer_ext.py:57:command, D102, Missing docstring in public method
ruff,     src/pyqa/cli/typer_ext.py:62:command, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
mypy,     src/pyqa/cli/typer_ext.py:63:command, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/cli/typer_ext.py:69:create_typer, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
ruff,     src/pyqa/cli/update.py:8:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
mypy,     src/pyqa/cli/update.py:14:from, attr-defined, Module "pyqa.config_loader" does not explicitly export attribute "ConfigError"
ruff,     src/pyqa/cli/update.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/update.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/update.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/update.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/update.py:32:_default_runner, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_default_runner`
ruff,     src/pyqa/cli/update.py:37:main, PLR0913, Too many arguments in function definition (6 > 5)
ruff,     src/pyqa/cli/update.py:39:main, B008, Do not perform function call `Path.cwd` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/update.py:39:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
mypy,     src/pyqa/cli/update.py:40:main, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/cli/update.py:40:main, B008, Do not perform function call `typer.Option` in argument defaults; instead, perform the call within the function, or read the default from a module-level singleton variable
ruff,     src/pyqa/cli/update.py:46:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/update.py:47:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/update.py:51:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/update.py:52:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/update.py:56:main, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/update.py:56:main, FBT003, Boolean positional value in function call
ruff,     src/pyqa/cli/update.py:86:_load_update_configuration, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/cli/update.py:95:_normalise_cli_managers, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/update.py:100:_normalise_cli_managers, R6103, Use 'if (invalid := sorted(normalized - VALID_MANAGERS)):' instead
pylint,   src/pyqa/cli/update.py:102:_normalise_cli_managers, C0301, Line too long (109/100)
ruff,     src/pyqa/cli/update.py:102:_normalise_cli_managers, E501, Line too long (109 > 100)
ruff,     src/pyqa/cli/update.py:112:_discover_workspaces, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/update.py:116:_discover_workspaces, R6103, Use 'if not (workspaces := discovery.discover(root)):' instead
ruff,     src/pyqa/cli/update.py:122:_normalise_config_managers, FBT001, Boolean-typed positional argument in function definition
pylint,   src/pyqa/cli/update.py:127:_normalise_config_managers, R6103, Use 'if (invalid := sorted(normalized - VALID_MANAGERS)):' instead
ruff,     src/pyqa/cli/utils.py:8:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/cli/utils.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/utils.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/cli/utils.py:13:from, TC001, Move application import `..tools.base.Tool` into a type-checking block
ruff,     src/pyqa/cli/utils.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/cli/utils.py:31:check_tool_status, R1260, 'check_tool_status' is too complex. The McCabe rating is 7
pylint,   src/pyqa/cli/utils.py:41:check_tool_status, R2004, Consider using a named constant or an enum instead of ''binary''.
pylint,   src/pyqa/cli/utils.py:63:check_tool_status, R2004, Consider using a named constant or an enum instead of ''binary''.
pylint,   src/pyqa/cli/utils.py:66:check_tool_status, R2004, Consider using a named constant or an enum instead of ''binary''.
ruff,     src/pyqa/config.py:9:from, TC003, Move standard library import `collections.abc.Collection` into a type-checking block
ruff,     src/pyqa/config.py:25:default_parallel_jobs, RET504, Unnecessary assignment to `proposed` before `return` statement
pylint,   src/pyqa/config.py:37:_expected_mypy_profile, R2004, Consider using a named constant or an enum instead of ''strict''.
pylint,   src/pyqa/config.py:48:_expected_mypy_profile, R2004, Consider using a named constant or an enum instead of ''strict''.
pylint,   src/pyqa/config.py:54:_expected_mypy_profile, R2004, Consider using a named constant or an enum instead of ''lenient''.
pylint,   src/pyqa/config.py:310:value_for, R2004, Consider using a named constant or an enum instead of ''strict''.
pylint,   src/pyqa/config.py:314:value_for, R2004, Consider using a named constant or an enum instead of ''mypy''.
mypy,     src/pyqa/config.py:388:to_dict, redundant-cast, Redundant cast to "QualityConfigSection"
pylint,   src/pyqa/config.py:403:model_post_init, W0221, Number of parameters was 0 in 'BaseModel.model_post_init' and is now 2 in overriding 'Config.model_post_init' method
ruff,     src/pyqa/config.py:403:model_post_init, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `__context`
ruff,     src/pyqa/config.py:403:model_post_init, D102, Missing docstring in public method
ruff,     src/pyqa/config.py:403:model_post_init, PYI063, Use PEP 570 syntax for positional-only parameters
pylint,   src/pyqa/config.py:406:apply_sensitivity_profile, R1260, 'apply_sensitivity_profile' is too complex. The McCabe rating is 14
ruff,     src/pyqa/config.py:406:apply_sensitivity_profile, C901, `apply_sensitivity_profile` is too complex (14 > 10)
ruff,     src/pyqa/config.py:406:apply_sensitivity_profile, PLR0912, Too many branches (13 > 12)
pylint,   src/pyqa/config.py:409:apply_sensitivity_profile, R6103, Use 'if (preset := SENSITIVITY_PRESETS.get(self.severity.sensitivity)) is None:' instead
pylint,   src/pyqa/config.py:414:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''line_length''.
pylint,   src/pyqa/config.py:416:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''max_complexity''.
pylint,   src/pyqa/config.py:418:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''max_arguments''.
pylint,   src/pyqa/config.py:420:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''type_checking''.
pylint,   src/pyqa/config.py:425:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''bandit_severity''.
pyright,  src/pyqa/config.py:425:apply_sensitivity_profile, reportAttributeAccessIssue, Cannot assign to attribute "bandit_level" for class "SeverityConfig"
mypy,     src/pyqa/config.py:426:apply_sensitivity_profile, assignment, Incompatible types in assignment (expression has type "str", variable has type "Literal['low', 'medium', 'high']")
pylint,   src/pyqa/config.py:427:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''bandit_confidence''.
pyright,  src/pyqa/config.py:427:apply_sensitivity_profile, reportAttributeAccessIssue, Cannot assign to attribute "bandit_confidence" for class "SeverityConfig"
mypy,     src/pyqa/config.py:428:apply_sensitivity_profile, assignment, Incompatible types in assignment (expression has type "str", variable has type "Literal['low', 'medium', 'high']")
pylint,   src/pyqa/config.py:429:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''pylint_fail_under''.
pylint,   src/pyqa/config.py:440:apply_sensitivity_profile, R2004, Consider using a named constant or an enum instead of ''init-import''.
pylint,   src/pyqa/config.py:460:apply_shared_defaults, R1260, 'apply_shared_defaults' is too complex. The McCabe rating is 28
ruff,     src/pyqa/config.py:460:apply_shared_defaults, C901, `apply_shared_defaults` is too complex (28 > 10)
ruff,     src/pyqa/config.py:460:apply_shared_defaults, PLR0915, Too many statements (73 > 50)
pylint,   src/pyqa/config.py:476:matches_baseline, R6103, Use 'if (expected := baseline_value(tool, key)) is NO_BASELINE:' instead
pylint,   src/pyqa/config.py:496:ensure, R5601, Consecutive elif with differing indentation level, consider creating a function to separate the inner elif
pylint,   src/pyqa/config.py:544:set_mypy, R5601, Consecutive elif with differing indentation level, consider creating a function to separate the inner elif
ruff,     src/pyqa/config.py:547:apply_shared_defaults, FBT003, Boolean positional value in function call
ruff,     src/pyqa/config.py:548:apply_shared_defaults, FBT003, Boolean positional value in function call
ruff,     src/pyqa/config.py:549:apply_shared_defaults, FBT003, Boolean positional value in function call
ruff,     src/pyqa/config.py:550:apply_shared_defaults, FBT003, Boolean positional value in function call
pylint,   src/pyqa/config.py:561:apply_shared_defaults, R2004, Consider using a named constant or an enum instead of ''strict''.
ruff,     src/pyqa/config.py:562:apply_shared_defaults, FBT003, Boolean positional value in function call
ruff,     src/pyqa/config.py:564:apply_shared_defaults, FBT003, Boolean positional value in function call
ruff,     src/pyqa/config.py:568:apply_shared_defaults, FBT003, Boolean positional value in function call
pylint,   src/pyqa/config.py:572:apply_shared_defaults, R2004, Consider using a named constant or an enum instead of ''lenient''.
ruff,     src/pyqa/config.py:573:apply_shared_defaults, FBT003, Boolean positional value in function call
pylint,   src/pyqa/config.py:577:apply_shared_defaults, R2004, Consider using a named constant or an enum instead of ''strict''.
mypy,     src/pyqa/config_loader.py:19:import, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/config_loader.py:21:raise, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:21:raise, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:102:_load, RUF005, Consider `(*stack, path)` instead of concatenation
pylint,   src/pyqa/config_loader.py:108:_load, R6103, Use 'if (cached := _TOML_CACHE.get(cache_key)) is not None:' instead
ruff,     src/pyqa/config_loader.py:115:_load, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:115:_load, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:120:_load, RUF005, Consider `(*stack, path)` instead of concatenation
pylint,   src/pyqa/config_loader.py:125:_coerce_includes, R1260, '_coerce_includes' is too complex. The McCabe rating is 7
ruff,     src/pyqa/config_loader.py:125:_coerce_includes, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_loader.py:131:_coerce_includes, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:131:_coerce_includes, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:135:_coerce_includes, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:135:_coerce_includes, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_loader.py:152:load, R6103, Use 'if not (tool := data.get('tool')):' instead
ruff,     src/pyqa/config_loader.py:188:FieldUpdate, D101, Missing docstring in public class
ruff,     src/pyqa/config_loader.py:197:ConfigLoadResult, D101, Missing docstring in public class
ruff,     src/pyqa/config_loader.py:209:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/config_loader.py:217:__init__, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:217:__init__, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:245:load, D102, Missing docstring in public method
ruff,     src/pyqa/config_loader.py:248:load_with_trace, D102, Missing docstring in public method
pylint,   src/pyqa/config_loader.py:255:load_with_trace, R6103, Use 'if not (fragment := source.load()):' instead
pylint,   src/pyqa/config_loader.py:258:load_with_trace, R6103, Use 'if not (normalised := _normalise_fragment(fragment)):' instead
ruff,     src/pyqa/config_loader.py:423:_ensure_mapping, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_loader.py:427:_ensure_mapping, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:427:_ensure_mapping, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:437:_diff_model, PERF403, Use a dictionary comprehension instead of a for-loop
pylint,   src/pyqa/config_loader.py:447:merge, R1260, 'merge' is too complex. The McCabe rating is 10
ruff,     src/pyqa/config_loader.py:450:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:454:merge, R2004, Consider using a named constant or an enum instead of ''roots''.
pylint,   src/pyqa/config_loader.py:461:merge, R2004, Consider using a named constant or an enum instead of ''excludes''.
pylint,   src/pyqa/config_loader.py:465:merge, R6103, Use 'if (candidate := resolved.resolve()) not in excludes:' instead
pylint,   src/pyqa/config_loader.py:469:merge, R2004, Consider using a named constant or an enum instead of ''explicit_files''.
pylint,   src/pyqa/config_loader.py:477:merge, R2004, Consider using a named constant or an enum instead of ''limit_to''.
ruff,     src/pyqa/config_loader.py:502:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:505:merge, R2004, Consider using a named constant or an enum instead of ''tool_filters''.
ruff,     src/pyqa/config_loader.py:516:merge, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:516:merge, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:521:merge, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:521:merge, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:557:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:568:merge, R6103, Use 'if (bail := data.get('bail', current.bail)):' instead
pylint,   src/pyqa/config_loader.py:573:merge, R2004, Consider using a named constant or an enum instead of ''only''.
pylint,   src/pyqa/config_loader.py:578:merge, R2004, Consider using a named constant or an enum instead of ''languages''.
pylint,   src/pyqa/config_loader.py:583:merge, R2004, Consider using a named constant or an enum instead of ''enable''.
ruff,     src/pyqa/config_loader.py:609:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:633:merge, R2004, Consider using a named constant or an enum instead of ''allow_alternate_spdx''.
pylint,   src/pyqa/config_loader.py:640:merge, R2004, Consider using a named constant or an enum instead of ''exceptions''.
pylint,   src/pyqa/config_loader.py:663:merge, R1260, 'merge' is too complex. The McCabe rating is 8
ruff,     src/pyqa/config_loader.py:666:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:671:merge, R2004, Consider using a named constant or an enum instead of ''checks''.
pylint,   src/pyqa/config_loader.py:675:merge, R2004, Consider using a named constant or an enum instead of ''skip_globs''.
pylint,   src/pyqa/config_loader.py:679:merge, R2004, Consider using a named constant or an enum instead of ''schema_targets''.
ruff,     src/pyqa/config_loader.py:685:merge, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:685:merge, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_loader.py:687:merge, R6103, Use 'if (candidate := self._resolver.resolve(entry)) not in seen:' instead
pylint,   src/pyqa/config_loader.py:704:merge, R2004, Consider using a named constant or an enum instead of ''protected_branches''.
ruff,     src/pyqa/config_loader.py:725:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:728:merge, R2004, Consider using a named constant or an enum instead of ''patterns''.
pylint,   src/pyqa/config_loader.py:732:merge, R2004, Consider using a named constant or an enum instead of ''trees''.
ruff,     src/pyqa/config_loader.py:742:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
pylint,   src/pyqa/config_loader.py:746:merge, R2004, Consider using a named constant or an enum instead of ''skip_patterns''.
pylint,   src/pyqa/config_loader.py:750:merge, R2004, Consider using a named constant or an enum instead of ''enabled_managers''.
ruff,     src/pyqa/config_loader.py:767:merge, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_loader.py:780:_merge_severity_rules, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_loader.py:784:_merge_severity_rules, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:784:_merge_severity_rules, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:788:_merge_severity_rules, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:788:_merge_severity_rules, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_loader.py:793:_merge_tool_settings, R1260, '_merge_tool_settings' is too complex. The McCabe rating is 10
ruff,     src/pyqa/config_loader.py:795:_merge_tool_settings, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_loader.py:802:_merge_tool_settings, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:802:_merge_tool_settings, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:807:_merge_tool_settings, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:807:_merge_tool_settings, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_loader.py:809:_merge_tool_settings, R6103, Use 'if (schema := TOOL_SETTING_SCHEMA.get(tool)) is None:' instead
pylint,   src/pyqa/config_loader.py:813:_merge_tool_settings, R6103, Use 'if (merged := _deep_merge(existing, value)) != existing:' instead
ruff,     src/pyqa/config_loader.py:817:_merge_tool_settings, SIM118, Use `key in dict` instead of `key in dict.keys()`
ruff,     src/pyqa/config_loader.py:819:_merge_tool_settings, PERF401, Use `list.extend` to create a transformed list
ruff,     src/pyqa/config_loader.py:825:_coerce_optional_str_value, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/config_loader.py:831:_coerce_optional_str_value, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:831:_coerce_optional_str_value, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_loader.py:834:_coerce_optional_bool, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/config_loader.py:834:_coerce_optional_bool, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/config_loader.py:839:_coerce_optional_bool, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:839:_coerce_optional_bool, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_loader.py:849:_auto_discover_tool_settings, R1260, '_auto_discover_tool_settings' is too complex. The McCabe rating is 8
pylint,   src/pyqa/config_loader.py:854:_auto_discover_tool_settings, R2004, Consider using a named constant or an enum instead of ''config''.
ruff,     src/pyqa/config_loader.py:917:_model_replace, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**updates`
ruff,     src/pyqa/config_loader.py:917:_model_replace, UP047, Generic function `_model_replace` should use type parameters
ruff,     src/pyqa/config_loader.py:919:_model_replace, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_loader.py:919:_model_replace, TRY003, Avoid specifying long messages outside the exception class
mypy,     src/pyqa/config_loader.py:920:_model_replace, redundant-cast, Redundant cast to "ModelT"
ruff,     src/pyqa/config_utils.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/config_utils.py:11:from, TC002, Move third-party import `pydantic.BaseModel` into a type-checking block
ruff,     src/pyqa/config_utils.py:33:_coerce_optional_int, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/config_utils.py:37:_coerce_optional_int, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:37:_coerce_optional_int, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:42:_coerce_optional_int, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:42:_coerce_optional_int, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:45:_coerce_string_sequence, R1260, '_coerce_string_sequence' is too complex. The McCabe rating is 7
ruff,     src/pyqa/config_utils.py:45:_coerce_string_sequence, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/config_utils.py:53:_coerce_string_sequence, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:53:_coerce_string_sequence, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:57:_coerce_string_sequence, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:57:_coerce_string_sequence, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:59:_coerce_string_sequence, R6103, Use 'if (trimmed := item.strip()):' instead
ruff,     src/pyqa/config_utils.py:64:_normalize_tool_filters, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `raw`
ruff,     src/pyqa/config_utils.py:66:_normalize_tool_filters, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:66:_normalize_tool_filters, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:73:_normalize_tool_filters, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:73:_normalize_tool_filters, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:81:_normalize_output_mode, R6103, Use 'if (normalized := value.lower()) not in {'concise', 'pretty', 'raw'}:' instead
ruff,     src/pyqa/config_utils.py:82:_normalize_output_mode, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:82:_normalize_output_mode, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:88:_normalize_min_severity, R6103, Use 'if (normalized := value.lower()) not in {'error', 'warning', 'notice', 'note'}:' instead
ruff,     src/pyqa/config_utils.py:89:_normalize_min_severity, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:89:_normalize_min_severity, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:98:_unique_paths, R6103, Use 'if (resolved := path.resolve()) not in seen:' instead
ruff,     src/pyqa/config_utils.py:128:_coerce_iterable, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/config_utils.py:130:_coerce_iterable, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:130:_coerce_iterable, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:134:_normalise_pyproject_payload, R1260, '_normalise_pyproject_payload' is too complex. The McCabe rating is 10
pylint,   src/pyqa/config_utils.py:138:_normalise_pyproject_payload, R2004, Consider using a named constant or an enum instead of ''tool_settings''.
pylint,   src/pyqa/config_utils.py:139:_normalise_pyproject_payload, W2901, Redefining 'key' from loop (line 137)
ruff,     src/pyqa/config_utils.py:139:_normalise_pyproject_payload, PLW2901, `for` loop variable `key` overwritten by assignment target
pylint,   src/pyqa/config_utils.py:143:_normalise_pyproject_payload, R2004, Consider using a named constant or an enum instead of ''tools''.
ruff,     src/pyqa/config_utils.py:145:_normalise_pyproject_payload, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:145:_normalise_pyproject_payload, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:148:_normalise_pyproject_payload, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:148:_normalise_pyproject_payload, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/config_utils.py:160:_normalise_fragment, R1260, '_normalise_fragment' is too complex. The McCabe rating is 10
pylint,   src/pyqa/config_utils.py:164:_normalise_fragment, R2004, Consider using a named constant or an enum instead of ''tool_settings''.
pylint,   src/pyqa/config_utils.py:165:_normalise_fragment, W2901, Redefining 'key' from loop (line 163)
ruff,     src/pyqa/config_utils.py:165:_normalise_fragment, PLW2901, `for` loop variable `key` overwritten by assignment target
pylint,   src/pyqa/config_utils.py:169:_normalise_fragment, R2004, Consider using a named constant or an enum instead of ''tools''.
ruff,     src/pyqa/config_utils.py:171:_normalise_fragment, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:171:_normalise_fragment, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:174:_normalise_fragment, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/config_utils.py:174:_normalise_fragment, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/config_utils.py:193:_expand_env_value, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_expand_env_value`
ruff,     src/pyqa/config_utils.py:193:_expand_env_value, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
pylint,   src/pyqa/config_utils.py:206:_replace, R6103, Use 'if (key := match.group(1) or match.group(2)) is None:' instead
ruff,     src/pyqa/config_utils.py:240:_describe_model, PLC0206, Extracting value from dictionary without calling `.items()`
ruff,     src/pyqa/config_utils.py:251:_render_field_type, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `annotation`
ruff,     src/pyqa/console.py:23:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/console.py:26:get, D102, Missing docstring in public method
pylint,   src/pyqa/console.py:28:get, R6103, Use 'if (key := (color, emoji)) not in self._cache:' instead
mypy,     src/pyqa/constants.py:9:moo, var-annotated, Need type annotation for "moo" (hint: "moo: dict[<type>, <type>] = ...")
pylint,   src/pyqa/constants.py:9:moo, R1735, Consider using '{}' instead of a call to 'dict'.
ruff,     src/pyqa/constants.py:9:moo, C408, Unnecessary `dict()` call (rewrite as a literal)
mypy,     src/pyqa/constants.py:10:moo, assignment, Incompatible types in assignment (expression has type "str", variable has type "dict[Any, Any]")
pylint,   src/pyqa/constants.py:10:moo, C0103, Constant name "moo" doesn't conform to UPPER_CASE naming style
pylint,   src/pyqa/constants.py:10:moo, R0204, Redefinition of moo type from dict to str
ruff,     src/pyqa/context.py:8:from, TC003, Move standard library import `collections.abc.Callable` into a type-checking block
ruff,     src/pyqa/context.py:8:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/context.py:15:from, TC001, Move application import `.models.Diagnostic` into a type-checking block
pylint,   src/pyqa/context.py:18:_build_parser_loader, R1260, '_build_parser_loader' is too complex. The McCabe rating is 17
ruff,     src/pyqa/context.py:18:_build_parser_loader, C901, `_build_parser_loader` is too complex (12 > 10)
pylint,   src/pyqa/context.py:25:_build_parser_loader, R6103, Use 'if (parser_cls := getattr(tree_sitter_module, 'Parser', None)) is None:' instead
pylint,   src/pyqa/context.py:31:_build_parser_loader, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/context.py:37:bundled_get_parser, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `bundled_get_parser`
pylint,   src/pyqa/context.py:44:bundled_get_parser, R6103, Use 'if (language_factory := getattr(module, 'language', None)) is None:' instead
mypy,     src/pyqa/context.py:55:bundled_get_parser, unused-ignore, Unused "type: ignore" comment
mypy,     src/pyqa/context.py:60:_build_parser_loader, no-any-return, Returning Any from function declared to return "Callable[[str], Any] | None"
ruff,     src/pyqa/context.py:113:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/context.py:121:annotate, D102, Missing docstring in public method
pylint,   src/pyqa/context.py:127:annotate, R6103, Use 'if (language := self._detect_language(diag.file)) is None:' instead
pylint,   src/pyqa/context.py:133:annotate, R6103, Use 'if (context := self._find_context(language, location, diag.line)):' instead
pylint,   src/pyqa/context.py:145:_detect_language, R2004, Consider using a named constant or an enum instead of ''makefile''.
pylint,   src/pyqa/context.py:156:_get_parser, R1260, '_get_parser' is too complex. The McCabe rating is 7
ruff,     src/pyqa/context.py:156:_get_parser, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_get_parser`
pylint,   src/pyqa/context.py:160:_get_parser, R6103, Use 'if (cached := self._parsers.get(language)) is not None:' instead
pylint,   src/pyqa/context.py:163:_get_parser, R6103, Use 'if (loader := self._resolve_parser_loader(language)) is None:' instead
pylint,   src/pyqa/context.py:178:_resolve_parser_loader, R6103, Use 'if (loader_fn := _GET_PARSER) is None:' instead
pylint,   src/pyqa/context.py:182:_resolve_parser_loader, R6103, Use 'if (grammar_name := self._GRAMMAR_NAMES.get(language)) is None:' instead
ruff,     src/pyqa/context.py:186:_loader, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_loader`
ruff,     src/pyqa/context.py:196:TreeSitterContextResolver, B019, Use of `functools.lru_cache` or `functools.cache` on methods can lead to memory leaks
pylint,   src/pyqa/context.py:199:_parse, R6103, Use 'if (parser := self._get_parser(language)) is None:' instead
pylint,   src/pyqa/context.py:203:_parse, W0714, Overlapping exceptions (OSError is an ancestor class of FileNotFoundError)
pylint,   src/pyqa/context.py:217:_find_context, R6103, Use 'if (parsed := self._parse(language, path, mtime_ns)) is not None:' instead
pylint,   src/pyqa/context.py:219:_find_context, R6103, Use 'if (tree_context := self._context_from_parse(language, parsed, line)):' instead
pylint,   src/pyqa/context.py:225:_context_from_parse, R6103, Use 'if (tree := getattr(parsed.tree, 'root_node', None)) is None:' instead
pylint,   src/pyqa/context.py:227:_context_from_parse, R2004, Consider using a named constant or an enum instead of ''python''.
pylint,   src/pyqa/context.py:229:_context_from_parse, R2004, Consider using a named constant or an enum instead of ''markdown''.
pylint,   src/pyqa/context.py:231:_context_from_parse, R2004, Consider using a named constant or an enum instead of ''json''.
pylint,   src/pyqa/context.py:233:_context_from_parse, R6103, Use 'if (node := self._node_at(tree, line)) is not None:' instead
pylint,   src/pyqa/context.py:238:_fallback_context, R2004, Consider using a named constant or an enum instead of ''python''.
pylint,   src/pyqa/context.py:241:_fallback_context, R2004, Consider using a named constant or an enum instead of ''markdown''.
pylint,   src/pyqa/context.py:244:_fallback_context, R2004, Consider using a named constant or an enum instead of ''json''.
pylint,   src/pyqa/context.py:248:_python_context, R1260, '_python_context' is too complex. The McCabe rating is 13
ruff,     src/pyqa/context.py:248:_python_context, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
ruff,     src/pyqa/context.py:248:_python_context, C901, `_python_context` is too complex (13 > 10)
pylint,   src/pyqa/context.py:254:_python_context, W0149, Used `while` loop
pylint,   src/pyqa/context.py:289:_python_context, R6103, Use 'if (fallback_name := self._node_name(best_generic_node)):' instead
ruff,     src/pyqa/context.py:294:_markdown_context, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
pylint,   src/pyqa/context.py:296:_markdown_context, R6103, Use 'if (heading := self._select_markdown_heading(node, line)) is None:' instead
ruff,     src/pyqa/context.py:300:_select_markdown_heading, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_select_markdown_heading`
ruff,     src/pyqa/context.py:300:_select_markdown_heading, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
pylint,   src/pyqa/context.py:304:_select_markdown_heading, W0149, Used `while` loop
ruff,     src/pyqa/context.py:316:_extract_markdown_heading, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
pylint,   src/pyqa/context.py:318:_extract_markdown_heading, R6103, Use 'if (text_node := getattr(node, 'child_by_field_name', lambda _: None)('text')) is None:' instead
ruff,     src/pyqa/context.py:327:_node_name, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
ruff,     src/pyqa/context.py:352:_markdown_heading_context, SIM102, Use a single `if` statement instead of nested `if` statements
ruff,     src/pyqa/context.py:368:_node_at, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_node_at`
ruff,     src/pyqa/context.py:368:_node_at, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
pylint,   src/pyqa/context.py:370:_node_at, W0149, Used `while` loop
pylint,   src/pyqa/context.py:378:_node_at, R6103, Use 'if (children := getattr(current, 'children', None)):' instead
ruff,     src/pyqa/context.py:385:_json_context, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `node`
pylint,   src/pyqa/context.py:387:_json_context, R6103, Use 'if (node_type := getattr(node, 'type', None)) in {'pair', 'object', 'array'}:' instead
mypy,     src/pyqa/context.py:390:_json_context, no-any-return, Returning Any from function declared to return "str | None"
pylint,   src/pyqa/context.py:403:_python_ast_context, R1260, '_python_ast_context' is too complex. The McCabe rating is 8
ruff,     src/pyqa/context.py:415:_python_ast_context, SIM102, Use a single `if` statement instead of nested `if` statements
ruff,     src/pyqa/diagnostics.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/diagnostics.py:7:from, TC003, Move standard library import `collections.abc.MutableMapping` into a type-checking block
ruff,     src/pyqa/diagnostics.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/diagnostics.py:11:from, TC001, Move application import `.config.DedupeConfig` into a type-checking block
pylint,   src/pyqa/diagnostics.py:113:dedupe_outcomes, R1260, 'dedupe_outcomes' is too complex. The McCabe rating is 10
pylint,   src/pyqa/diagnostics.py:127:dedupe_outcomes, R6103, Use 'if (preferred := _prefer(entry.diagnostic, diag, cfg)) is entry.diagnostic:' instead
pylint,   src/pyqa/diagnostics.py:146:_is_duplicate, R1260, '_is_duplicate' is too complex. The McCabe rating is 7
pylint,   src/pyqa/diagnostics.py:176:_prefer, R2004, Consider using a named constant or an enum instead of ''first''.
pylint,   src/pyqa/diagnostics.py:178:_prefer, R2004, Consider using a named constant or an enum instead of ''severity''.
pylint,   src/pyqa/diagnostics.py:180:_prefer, R2004, Consider using a named constant or an enum instead of ''prefer''.
pylint,   src/pyqa/diagnostics.py:182:_prefer, R6103, Use 'if (preferred := _prefer_list(existing, candidate, cfg.dedupe_prefer)) is not None:' instead
mypy,     src/pyqa/diagnostics.py:185:_prefer, unreachable, Statement is unreachable
pylint,   src/pyqa/diagnostics.py:196:_prefer_list, R1260, '_prefer_list' is too complex. The McCabe rating is 7
ruff,     src/pyqa/discovery/__init__.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/discovery/__init__.py:9:from, TC001, Move application import `..config.FileDiscoveryConfig` into a type-checking block
ruff,     src/pyqa/discovery/__init__.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/discovery/__init__.py:33:run, R6103, Use 'if (changed := list(self._git.discover(config, root))):' instead
ruff,     src/pyqa/discovery/__init__.py:39:build_default_discovery, D401, First line of docstring should be in imperative mood: "Factory for the default discovery pipeline."
ruff,     src/pyqa/discovery/base.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/discovery/base.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/discovery/base.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/discovery/base.py:11:from, TC001, Move application import `..config.FileDiscoveryConfig` into a type-checking block
ruff,     src/pyqa/discovery/base.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/base.py:17:discover, D102, Missing docstring in public method
ruff,     src/pyqa/discovery/base.py:23:__init__, ANN204, Missing return type annotation for special method `__init__`
ruff,     src/pyqa/discovery/base.py:23:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/discovery/base.py:26:run, D102, Missing docstring in public method
pylint,   src/pyqa/discovery/base.py:32:run, R6103, Use 'if (resolved := path.resolve()) in seen:' instead
ruff,     src/pyqa/discovery/base.py:42:run, D102, Missing docstring in public method
ruff,     src/pyqa/discovery/filesystem.py:9:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/discovery/filesystem.py:9:from, TC003, Move standard library import `collections.abc.Iterator` into a type-checking block
ruff,     src/pyqa/discovery/filesystem.py:12:from, TC001, Move application import `..config.FileDiscoveryConfig` into a type-checking block
ruff,     src/pyqa/discovery/filesystem.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/filesystem.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/filesystem.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/filesystem.py:21:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/discovery/filesystem.py:24:discover, D102, Missing docstring in public method
pylint,   src/pyqa/discovery/filesystem.py:28:discover, R6103, Use 'if (explicit := list(self._yield_explicit_files(config, root, limits))):' instead
pylint,   src/pyqa/discovery/filesystem.py:125:_paths_from_stdin, R6103, Use 'if not (entry := line.strip()):' instead
pylint,   src/pyqa/discovery/filesystem.py:132:_is_child_of, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/discovery/filesystem.py:134:_is_child_of, TRY300, Consider moving this statement to an `else` block
pylint,   src/pyqa/discovery/filesystem.py:143:_normalise_limits, R6103, Use 'if (resolved := candidate.resolve()) not in limits:' instead
pylint,   src/pyqa/discovery/filesystem.py:152:_is_within_limits, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/discovery/filesystem.py:154:_is_within_limits, TRY300, Consider moving this statement to an `else` block
ruff,     src/pyqa/discovery/git.py:10:from, TC001, Move application import `..config.FileDiscoveryConfig` into a type-checking block
ruff,     src/pyqa/discovery/git.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/git.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/discovery/git.py:20:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/discovery/git.py:23:discover, D102, Missing docstring in public method
pylint,   src/pyqa/discovery/git.py:39:_diff_names, R1260, '_diff_names' is too complex. The McCabe rating is 7
pylint,   src/pyqa/discovery/git.py:51:_diff_names, W2901, Redefining 'line' from loop (line 50)
ruff,     src/pyqa/discovery/git.py:51:_diff_names, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/discovery/git.py:52:_diff_names, R6103, Use 'if not (line := line.strip()):' instead
pylint,   src/pyqa/discovery/git.py:57:_diff_names, W2901, Redefining 'line' from loop (line 56)
ruff,     src/pyqa/discovery/git.py:57:_diff_names, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/discovery/git.py:58:_diff_names, R6103, Use 'if not (line := line.strip()):' instead
pylint,   src/pyqa/discovery/git.py:65:_untracked, W2901, Redefining 'line' from loop (line 64)
ruff,     src/pyqa/discovery/git.py:65:_untracked, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/discovery/git.py:66:_untracked, R6103, Use 'if not (line := line.strip()):' instead
pylint,   src/pyqa/discovery/git.py:74:_resolve_diff_ref, R6103, Use 'if (output := self._runner(merge_base_cmd, root)):' instead
mypy,     src/pyqa/discovery/git.py:86:_default_runner, no-any-return, Returning Any from function declared to return "list[str]"
pylint,   src/pyqa/discovery/git.py:94:_normalise_limits, R6103, Use 'if (resolved := candidate.resolve()) not in limits:' instead
pylint,   src/pyqa/discovery/git.py:103:_within_limits, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/discovery/git.py:105:_within_limits, TRY300, Consider moving this statement to an `else` block
pylint,   src/pyqa/discovery/git.py:119:list_tracked_files, R6103, Use 'if not (candidate := line.strip()):' instead
ruff,     src/pyqa/discovery/utils.py:9:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/discovery/utils.py:9:from, TC003, Move standard library import `collections.abc.Iterator` into a type-checking block
ruff,     src/pyqa/discovery/utils.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/environments.py:8:from, TC003, Move standard library import `collections.abc.MutableMapping` into a type-checking block
pylint,   src/pyqa/environments.py:34:find_venv_bin, R2004, Consider using a named constant or an enum instead of ''nt''.
pylint,   src/pyqa/environments.py:50:prepend_venv_to_path, R6103, Use 'if not (venv_bin := find_venv_bin(root)):' instead
ruff,     src/pyqa/execution/__init__.py:1:# SPDX-License-Identifier: MIT, D104, Missing docstring in public package
ruff,     src/pyqa/execution/cache.py:9:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/execution/cache.py:9:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/execution/cache.py:9:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/execution/cache.py:11:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/execution/cache.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/cache.py:17:from, TC001, Move application import `..models.ToolOutcome` into a type-checking block
ruff,     src/pyqa/execution/cache.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/cache.py:18:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/cache.py:22:CachedEntry, D101, Missing docstring in public class
ruff,     src/pyqa/execution/cache.py:57:__init__, D107, Missing docstring in `__init__`
pylint,   src/pyqa/execution/cache.py:60:load, R1260, 'load' is too complex. The McCabe rating is 10
ruff,     src/pyqa/execution/cache.py:60:load, D102, Missing docstring in public method
ruff,     src/pyqa/execution/cache.py:60:load, PLR0911, Too many return statements (8 > 6)
ruff,     src/pyqa/execution/cache.py:104:store, D102, Missing docstring in public method
ruff,     src/pyqa/execution/cache.py:104:store, PLR0913, Too many arguments in function definition (7 > 5)
pylint,   src/pyqa/execution/cache.py:171:_coerce_state_payload, R2004, Consider using a named constant or an enum instead of ''path''.
ruff,     src/pyqa/execution/cache.py:172:_coerce_state_payload, PERF401, Use a list comprehension to create a transformed list
ruff,     src/pyqa/execution/orchestrator.py:19:from, TC001, Move application import `..config.Config` into a type-checking block
ruff,     src/pyqa/execution/orchestrator.py:19:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:20:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:21:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:26:from, TC001, Move application import `..discovery.base.SupportsDiscovery` into a type-checking block
ruff,     src/pyqa/execution/orchestrator.py:26:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:27:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:28:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:29:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:30:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:31:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:32:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:33:from, TC001, Move application import `..severity.SeverityRuleView` into a type-checking block
ruff,     src/pyqa/execution/orchestrator.py:33:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:34:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:35:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:36:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/execution/orchestrator.py:37:from, TC001, Move application import `..tools.registry.ToolRegistry` into a type-checking block
ruff,     src/pyqa/execution/orchestrator.py:37:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/execution/orchestrator.py:44:_filter_diagnostics, R1260, '_filter_diagnostics' is too complex. The McCabe rating is 15
ruff,     src/pyqa/execution/orchestrator.py:44:_filter_diagnostics, C901, `_filter_diagnostics` is too complex (15 > 10)
ruff,     src/pyqa/execution/orchestrator.py:44:_filter_diagnostics, PLR0912, Too many branches (14 > 12)
pylint,   src/pyqa/execution/orchestrator.py:63:_filter_diagnostics, R5601, Consecutive elif with differing indentation level, consider creating a function to separate the inner elif
pylint,   src/pyqa/execution/orchestrator.py:73:_filter_diagnostics, R2004, Consider using a named constant or an enum instead of ''R0801''.
pylint,   src/pyqa/execution/orchestrator.py:73:_filter_diagnostics, R2004, Consider using a named constant or an enum instead of ''pylint''.
pylint,   src/pyqa/execution/orchestrator.py:93:_filter_diagnostics, R2004, Consider using a named constant or an enum instead of ''pylint''.
pylint,   src/pyqa/execution/orchestrator.py:96:_filter_diagnostics, R2004, Consider using a named constant or an enum instead of ''tests/''.
pylint,   src/pyqa/execution/orchestrator.py:108:_read_source_line, W0717, try clause contains 4 statements, expected at most 1
ruff,     src/pyqa/execution/orchestrator.py:129:prepare, D102, Missing docstring in public method
ruff,     src/pyqa/execution/orchestrator.py:129:prepare, PLR0913, Too many arguments in function definition (6 > 5)
ruff,     src/pyqa/execution/orchestrator.py:144:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/execution/orchestrator.py:159:run, D102, Missing docstring in public method
pylint,   src/pyqa/execution/orchestrator.py:194:fetch_all_tools, R1260, 'fetch_all_tools' is too complex. The McCabe rating is 7
ruff,     src/pyqa/execution/orchestrator.py:222:fetch_all_tools, C408, Unnecessary `tuple()` call (rewrite as a literal)
pylint,   src/pyqa/execution/orchestrator.py:226:fetch_all_tools, W0717, try clause contains 4 statements, expected at most 1
pylint,   src/pyqa/execution/orchestrator.py:271:_discover_files, R6103, Use 'if (limits := [limit.resolve() for limit in limits]):' instead
pylint,   src/pyqa/execution/orchestrator.py:292:_process_tool, R1260, '_process_tool' is too complex. The McCabe rating is 10
ruff,     src/pyqa/execution/orchestrator.py:292:_process_tool, PLR0913, Too many arguments in function definition (7 > 5)
pylint,   src/pyqa/execution/orchestrator.py:304:_process_tool, R6103, Use 'if (tool := self._registry.try_get(tool_name)) is None:' instead
ruff,     src/pyqa/execution/orchestrator.py:421:_should_run_action, SIM103, Return the condition `not (cfg.execution.check_only and action.is_fix)` directly
mypy,     src/pyqa/execution/orchestrator.py:523:_run_action, no-untyped-def, Function is missing a type annotation for one or more arguments
pylint,   src/pyqa/execution/orchestrator.py:523:_run_action, R1260, '_run_action' is too complex. The McCabe rating is 7
ruff,     src/pyqa/execution/orchestrator.py:523:_run_action, PLR0913, Too many arguments in function definition (7 > 5)
ruff,     src/pyqa/execution/orchestrator.py:526:_run_action, ANN001, Missing type annotation for function argument `action`
mypy,     src/pyqa/execution/orchestrator.py:543:_run_action, type-arg, Missing type parameters for generic type "Sequence"
pylint,   src/pyqa/execution/orchestrator.py:553:_run_action, R2004, Consider using a named constant or an enum instead of ''pylint''.
ruff,     src/pyqa/execution/orchestrator.py:572:_record_outcome, PLR0913, Too many arguments in function definition (10 > 5)
pylint,   src/pyqa/execution/orchestrator.py:611:_select_tools, R6103, Use 'if not (languages := list(dict.fromkeys(exec_cfg.languages)) if exec_cfg.languages else []):' instead
pylint,   src/pyqa/execution/orchestrator.py:629:_filter_files_for_tool, R6103, Use 'if (name := path.name.lower()) in patterns:' instead
pylint,   src/pyqa/execution/orchestrator.py:659:_populate_missing_metrics, R6103, Use 'if (key := normalise_path_key(path)) in state.file_metrics:' instead
pylint,   src/pyqa/execution/orchestrator.py:672:_collect_metrics_for_files, R6103, Use 'if (metric := state.file_metrics.get(key)) is None:' instead
pylint,   src/pyqa/execution/orchestrator.py:689:_is_within_limits, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/execution/orchestrator.py:691:_is_within_limits, TRY300, Consider moving this statement to an `else` block
ruff,     src/pyqa/execution/orchestrator.py:716:_coerce_cmd, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/execution/orchestrator.py:716:_coerce_cmd, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/execution/orchestrator.py:725:_coerce_env, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/execution/orchestrator.py:725:_coerce_env, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/execution/worker.py:8:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/execution/worker.py:8:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/execution/worker.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/execution/worker.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
mypy,     src/pyqa/execution/worker.py:20:run_command, no-untyped-def, Function is missing a return type annotation
ruff,     src/pyqa/execution/worker.py:20:run_command, ANN201, Missing return type annotation for public function `run_command`
ruff,     src/pyqa/hooks.py:10:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/hooks.py:18:InstallResult, D101, Missing docstring in public class
pylint,   src/pyqa/hooks.py:24:install_hooks, R1260, 'install_hooks' is too complex. The McCabe rating is 10
ruff,     src/pyqa/hooks.py:34:install_hooks, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/hooks.py:34:install_hooks, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/hooks.py:41:install_hooks, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/hooks.py:41:install_hooks, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/hooks.py:58:install_hooks, DTZ003, `datetime.datetime.utcnow()` used
ruff,     src/pyqa/installs.py:12:from, TC003, Move standard library import `subprocess.CompletedProcess` into a type-checking block
pylint,   src/pyqa/installs.py:54:OPTIONAL_TYPED, R6101, Consider using namedtuple or dataclass for dictionary values
pylint,   src/pyqa/installs.py:166:_installed_packages, R1260, '_installed_packages' is too complex. The McCabe rating is 7
pylint,   src/pyqa/installs.py:247:install_with_preferred_manager, R1260, 'install_with_preferred_manager' is too complex. The McCabe rating is 7
ruff,     src/pyqa/installs.py:253:install_with_preferred_manager, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `install_with_preferred_manager`
ruff,     src/pyqa/installs.py:262:install_with_preferred_manager, ARG005, Unused lambda argument: `message`
pylint,   src/pyqa/installs.py:285:install_with_preferred_manager, R6103, Use 'if (pip_exe := which('pip3') or which('pip')):' instead
ruff,     src/pyqa/languages.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/languages.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
pylint,   src/pyqa/languages.py:13:detect_languages, R1260, 'detect_languages' is too complex. The McCabe rating is 8
ruff,     src/pyqa/logging.py:25:colorize, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/logging.py:32:emoji, FBT001, Boolean-typed positional argument in function definition
ruff,     src/pyqa/logging.py:64:info, RUF001, String contains ambiguous `ℹ` (INFORMATION SOURCE). Did you mean `i` (LATIN SMALL LETTER I)?
ruff,     src/pyqa/metrics.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/metrics.py:19:to_payload, D102, Missing docstring in public method
pylint,   src/pyqa/metrics.py:26:from_payload, R1260, 'from_payload' is too complex. The McCabe rating is 10
ruff,     src/pyqa/metrics.py:26:from_payload, D102, Missing docstring in public method
ruff,     src/pyqa/metrics.py:50:ensure_labels, D102, Missing docstring in public method
ruff,     src/pyqa/models.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/models.py:13:from, TC001, Move application import `.metrics.FileMetrics` into a type-checking block
ruff,     src/pyqa/models.py:14:from, TC001, Move application import `.severity.Severity` into a type-checking block
ruff,     src/pyqa/parsers/base.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/base.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/parsers/base.py:19:_load_json_stream, R1260, '_load_json_stream' is too complex. The McCabe rating is 8
ruff,     src/pyqa/parsers/base.py:19:_load_json_stream, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_load_json_stream`
pylint,   src/pyqa/parsers/base.py:21:_load_json_stream, R6103, Use 'if not (stdout := stdout.strip()):' instead
pylint,   src/pyqa/parsers/base.py:28:_load_json_stream, W2901, Redefining 'line' from loop (line 27)
ruff,     src/pyqa/parsers/base.py:28:_load_json_stream, PLW2901, `for` loop variable `line` overwritten by assignment target
pylint,   src/pyqa/parsers/base.py:29:_load_json_stream, R6103, Use 'if not (line := line.strip()):' instead
ruff,     src/pyqa/parsers/base.py:50:_coerce_dict_sequence, PERF401, Use a list comprehension to create a transformed list
ruff,     src/pyqa/parsers/base.py:68:parse, D102, Missing docstring in public method
ruff,     src/pyqa/parsers/base.py:86:parse, D102, Missing docstring in public method
ruff,     src/pyqa/parsers/config.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/config.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/config.py:12:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/config.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/config.py:23:parse_sqlfluff, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/config.py:68:parse_yamllint, R6103, Use 'if not (line := raw_line.strip()):' instead
pylint,   src/pyqa/parsers/config.py:71:parse_yamllint, R6103, Use 'if not (match := YAMLLINT_PATTERN.match(line)):' instead
ruff,     src/pyqa/parsers/config.py:105:parse_dotenv_linter, PIE810, Call `startswith` once with a `tuple`
pylint,   src/pyqa/parsers/config.py:112:parse_dotenv_linter, R6103, Use 'if not (match := DOTENV_PATTERN.match(line)):' instead
pylint,   src/pyqa/parsers/config.py:132:parse_remark, R1260, 'parse_remark' is too complex. The McCabe rating is 10
ruff,     src/pyqa/parsers/config.py:132:parse_remark, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/config.py:153:parse_remark, R6103, Use 'if not (reason := str(message.get('reason', '')).strip()):' instead
pylint,   src/pyqa/parsers/config.py:157:parse_remark, W0160, Consider rewriting as a ternary expression
pylint,   src/pyqa/parsers/config.py:164:parse_remark, R6201, Consider using set for membership test
ruff,     src/pyqa/parsers/config.py:196:parse_speccy, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/config.py:203:parse_speccy, R6103, Use 'if not (message := _speccy_message(issue)):' instead
ruff,     src/pyqa/parsers/config.py:222:_iter_speccy_files, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/config.py:253:_speccy_message, R6103, Use 'if (primary := str(issue.get('message', '')).strip()):' instead
ruff,     src/pyqa/parsers/javascript.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/parsers/javascript.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/javascript.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/javascript.py:12:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/javascript.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/parsers/javascript.py:20:parse_eslint, R1260, 'parse_eslint' is too complex. The McCabe rating is 7
ruff,     src/pyqa/parsers/javascript.py:20:parse_eslint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/javascript.py:32:parse_eslint, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     src/pyqa/parsers/javascript.py:32:parse_eslint, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
pylint,   src/pyqa/parsers/javascript.py:53:parse_stylelint, R1260, 'parse_stylelint' is too complex. The McCabe rating is 7
ruff,     src/pyqa/parsers/javascript.py:53:parse_stylelint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/javascript.py:68:parse_stylelint, R6103, Use 'if not (message := str(warning.get('text', '')).strip()):' instead
pylint,   src/pyqa/parsers/javascript.py:95:parse_tsc, R6103, Use 'if not (match := _TSC_PATTERN.match(line.strip())):' instead
pylint,   src/pyqa/parsers/javascript.py:97:parse_tsc, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     src/pyqa/parsers/lua.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/parsers/lua.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/lua.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/lua.py:11:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/lua.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/parsers/lua.py:24:parse_lualint, R6103, Use 'if not (match := LUALINT_PATTERN.match(line)):' instead
pylint,   src/pyqa/parsers/lua.py:53:parse_luacheck, R6103, Use 'if not (match := LUACHECK_PATTERN.match(line)):' instead
ruff,     src/pyqa/parsers/misc.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/parsers/misc.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/parsers/misc.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/misc.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/misc.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/misc.py:13:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/misc.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/parsers/misc.py:24:parse_shfmt, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     src/pyqa/parsers/misc.py:24:parse_shfmt, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
pylint,   src/pyqa/parsers/misc.py:59:parse_phplint, R6103, Use 'if not (line := raw_line.strip()):' instead
pylint,   src/pyqa/parsers/misc.py:62:parse_phplint, R6103, Use 'if not (match := PHPLINT_PATTERN.match(line)):' instead
pylint,   src/pyqa/parsers/misc.py:92:parse_perlcritic, R6103, Use 'if not (line := raw_line.strip()):' instead
pylint,   src/pyqa/parsers/misc.py:95:parse_perlcritic, R6103, Use 'if not (match := PERLCRITIC_PATTERN.match(line)):' instead
pylint,   src/pyqa/parsers/misc.py:112:parse_checkmake, R1260, 'parse_checkmake' is too complex. The McCabe rating is 8
ruff,     src/pyqa/parsers/misc.py:112:parse_checkmake, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/misc.py:132:parse_checkmake, R6103, Use 'if not (message := issue.get('message') or issue.get('description')):' instead
pylint,   src/pyqa/parsers/misc.py:158:r", C0301, Line too long (112/100)
ruff,     src/pyqa/parsers/misc.py:168:parse_cpplint, PIE810, Call `startswith` once with a `tuple`
pylint,   src/pyqa/parsers/misc.py:174:parse_cpplint, R6103, Use 'if not (match := _CPPLINT_PATTERN.match(stripped)):' instead
pylint,   src/pyqa/parsers/misc.py:217:parse_tombi, R6103, Use 'if (diagnostic := _build_tombi_diagnostic(header, body)) is not None:' instead
pylint,   src/pyqa/parsers/misc.py:228:_split_tombi_blocks, R6103, Use 'if (header := _TOMBI_HEADER_RE.match(line)):' instead
pylint,   src/pyqa/parsers/misc.py:242:_build_tombi_diagnostic, R6103, Use 'if not (header := _TOMBI_HEADER_RE.match(header_line)):' instead
pylint,   src/pyqa/parsers/misc.py:252:_build_tombi_diagnostic, R6103, Use 'if (location := _TOMBI_LOCATION_RE.match(entry)):' instead
ruff,     src/pyqa/parsers/misc.py:270:parse_golangci_lint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/misc.py:311:parse_cargo_clippy, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/misc.py:320:parse_cargo_clippy, R2004, Consider using a named constant or an enum instead of ''compiler-message''.
ruff,     src/pyqa/parsers/ops.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/parsers/ops.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/ops.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/ops.py:11:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/ops.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/ops.py:15:parse_actionlint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/ops.py:45:parse_kube_linter, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/ops.py:58:parse_kube_linter, R6103, Use 'if not (message := str(message_raw).strip() if message_raw is not None else ''):' instead
pylint,   src/pyqa/parsers/ops.py:80:parse_dockerfilelint, R1260, 'parse_dockerfilelint' is too complex. The McCabe rating is 9
ruff,     src/pyqa/parsers/ops.py:80:parse_dockerfilelint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/ops.py:120:parse_hadolint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/ops.py:128:parse_hadolint, R6103, Use 'if not (message := str(entry.get('message', '')).strip()):' instead
ruff,     src/pyqa/parsers/ops.py:151:parse_bandit, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/python.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/parsers/python.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/parsers/python.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/python.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/python.py:11:from, TC001, Move application import `..tools.base.ToolContext` into a type-checking block
ruff,     src/pyqa/parsers/python.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/parsers/python.py:14:parse_ruff, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/python.py:45:parse_pylint, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/python.py:80:parse_pyright, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/python.py:114:parse_mypy, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
pylint,   src/pyqa/parsers/python.py:128:parse_mypy, W0160, Consider rewriting as a ternary expression
ruff,     src/pyqa/parsers/python.py:128:parse_mypy, SIM108, Use ternary operator `function = function.split(".")[-1] if isinstance(function, str) and function else None` instead of `if`-`else`-block
pylint,   src/pyqa/parsers/python.py:161:parse_selene, R1260, 'parse_selene' is too complex. The McCabe rating is 16
ruff,     src/pyqa/parsers/python.py:161:parse_selene, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `payload`
ruff,     src/pyqa/parsers/python.py:161:parse_selene, C901, `parse_selene` is too complex (16 > 10)
ruff,     src/pyqa/parsers/python.py:161:parse_selene, PLR0912, Too many branches (16 > 12)
pylint,   src/pyqa/parsers/python.py:174:parse_selene, R2004, Consider using a named constant or an enum instead of ''summary''.
pylint,   src/pyqa/parsers/python.py:176:parse_selene, R2004, Consider using a named constant or an enum instead of ''diagnostic''.
pylint,   src/pyqa/parsers/python.py:197:parse_selene, R6103, Use 'if (text := str(note).strip()):' instead
pylint,   src/pyqa/parsers/python.py:202:parse_selene, R6103, Use 'if (message := str(label.get('message', '')).strip()):' instead
ruff,     src/pyqa/process_utils.py:11:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/process_utils.py:11:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/process_utils.py:23:__init__, D107, Missing docstring in `__init__`
pylint,   src/pyqa/process_utils.py:50:_normalize_args, R6103, Use 'if (resolved := shutil.which(head)) is None:' instead
ruff,     src/pyqa/process_utils.py:56:run_command, PLR0913, Too many arguments in function definition (8 > 5)
ruff,     src/pyqa/process_utils.py:78:run_command, S603, `subprocess` call: check for execution of untrusted input
ruff,     src/pyqa/quality.py:9:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/quality.py:9:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/quality.py:9:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/quality.py:33:QualityIssueLevel, D101, Missing docstring in public class
ruff,     src/pyqa/quality.py:38:QualityIssue, D101, Missing docstring in public class
ruff,     src/pyqa/quality.py:53:add_error, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:58:add_warning, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:64:errors, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:68:warnings, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:71:exit_code, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:95:FileSizeCheck, D101, Missing docstring in public class
ruff,     src/pyqa/quality.py:98:run, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:118:LicenseCheck, D101, Missing docstring in public class
pylint,   src/pyqa/quality.py:121:run, R1260, 'run' is too complex. The McCabe rating is 9
ruff,     src/pyqa/quality.py:121:run, D102, Missing docstring in public method
pylint,   src/pyqa/quality.py:123:run, R6103, Use 'if not (policy := ctx.license_policy):' instead
pylint,   src/pyqa/quality.py:141:run, R6103, Use 'if (observed := policy.match_notice(content)):' instead
pylint,   src/pyqa/quality.py:146:run, C0301, Line too long (108/100)
ruff,     src/pyqa/quality.py:146:run, E501, Line too long (108 > 100)
ruff,     src/pyqa/quality.py:151:PythonHygieneCheck, D101, Missing docstring in public class
ruff,     src/pyqa/quality.py:154:run, D102, Missing docstring in public method
ruff,     src/pyqa/quality.py:172:SchemaCheck, D101, Missing docstring in public class
pylint,   src/pyqa/quality.py:175:run, R1260, 'run' is too complex. The McCabe rating is 8
ruff,     src/pyqa/quality.py:175:run, D102, Missing docstring in public method
pylint,   src/pyqa/quality.py:188:run, R6103, Use 'if (actual := target_path.read_text(encoding='utf-8')) == expected:' instead
pylint,   src/pyqa/quality.py:195:run, C0301, Line too long (111/100)
ruff,     src/pyqa/quality.py:195:run, E501, Line too long (111 > 100)
pylint,   src/pyqa/quality.py:205:run, C0301, Line too long (111/100)
ruff,     src/pyqa/quality.py:205:run, E501, Line too long (111 > 100)
ruff,     src/pyqa/quality.py:216:collect, D102, Missing docstring in public method
pylint,   src/pyqa/quality.py:230:collect, R6103, Use 'if (tracked := list_tracked_files(self.root)):' instead
ruff,     src/pyqa/quality.py:248:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/quality.py:248:__init__, PLR0913, Too many arguments in function definition (8 > 5)
ruff,     src/pyqa/quality.py:274:run, D102, Missing docstring in public method
pylint,   src/pyqa/quality.py:296:_filter_files, R6103, Use 'if (resolved := path.resolve()) in seen:' instead
pylint,   src/pyqa/quality.py:319:r", C0301, Line too long (103/100)
ruff,     src/pyqa/quality.py:319:r", E501, Line too long (103 > 100)
pylint,   src/pyqa/quality.py:323:check_commit_message, R1260, 'check_commit_message' is too complex. The McCabe rating is 10
pylint,   src/pyqa/quality.py:335:check_commit_message, R6103, Use 'if not (lines := content.splitlines()):' instead
pylint,   src/pyqa/quality.py:340:check_commit_message, R2004, Consider using a named constant or an enum instead of '72'.
ruff,     src/pyqa/quality.py:340:check_commit_message, PLR2004, Magic value used in comparison, consider replacing `72` with a constant variable
pylint,   src/pyqa/quality.py:347:check_commit_message, R2004, Consider using a named constant or an enum instead of '': ''.
pylint,   src/pyqa/quality.py:356:check_commit_message, R2004, Consider using a named constant or an enum instead of '72'.
ruff,     src/pyqa/quality.py:356:check_commit_message, PLR2004, Magic value used in comparison, consider replacing `72` with a constant variable
pylint,   src/pyqa/quality.py:361:check_commit_message, R6103, Use 'if (banned_matches := checker.scan(lines)):' instead
ruff,     src/pyqa/reporting/__init__.py:1:# SPDX-License-Identifier: MIT, D104, Missing docstring in public package
ruff,     src/pyqa/reporting/emitters.py:8:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/reporting/emitters.py:8:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/reporting/emitters.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/reporting/emitters.py:11:from, TC001, Move application import `..models.Diagnostic` into a type-checking block
ruff,     src/pyqa/reporting/emitters.py:11:from, TC001, Move application import `..models.RunResult` into a type-checking block
ruff,     src/pyqa/reporting/emitters.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/emitters.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/emitters.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/reporting/emitters.py:45:_build_sarif_run, R1260, '_build_sarif_run' is too complex. The McCabe rating is 7
pylint,   src/pyqa/reporting/emitters.py:56:_build_sarif_run, R6103, Use 'if (rule_id := diag.code or tool_name) not in rules:' instead
pylint,   src/pyqa/reporting/emitters.py:94:write_pr_summary, R1260, 'write_pr_summary' is too complex. The McCabe rating is 8
ruff,     src/pyqa/reporting/emitters.py:106:write_pr_summary, PERF401, Use `list.extend` to create a transformed list
ruff,     src/pyqa/reporting/emitters.py:149:write_pr_summary, SIM113, Use `enumerate()` for index variable `shown` in `for` loop
ruff,     src/pyqa/reporting/formatters.py:7:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/reporting/formatters.py:15:from, TC001, Move application import `..config.OutputConfig` into a type-checking block
ruff,     src/pyqa/reporting/formatters.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:18:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:24:from, TC001, Move application import `..models.Diagnostic` into a type-checking block
ruff,     src/pyqa/reporting/formatters.py:24:from, TC001, Move application import `..models.RunResult` into a type-checking block
ruff,     src/pyqa/reporting/formatters.py:24:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:25:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/reporting/formatters.py:28:render, D103, Missing docstring in public function
pylint,   src/pyqa/reporting/formatters.py:41:_render_concise, R1260, '_render_concise' is too complex. The McCabe rating is 11
ruff,     src/pyqa/reporting/formatters.py:43:_render_concise, SIM105, Use `contextlib.suppress(OSError)` instead of `try`-`except`-`pass`
mypy,     src/pyqa/reporting/formatters.py:63:sort_key, type-arg, Missing type parameters for generic type "tuple"
ruff,     src/pyqa/reporting/formatters.py:92:_render_concise, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:112:_render_concise, T201, `print` found
pylint,   src/pyqa/reporting/formatters.py:117:_render_quiet, R6103, Use 'if not (failed := [outcome for outcome in result.outcomes if not outcome.ok]):' instead
ruff,     src/pyqa/reporting/formatters.py:118:_render_quiet, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:121:_render_quiet, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:123:_render_quiet, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:130:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:137:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:139:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:140:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:142:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:143:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:145:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:149:_render_pretty, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:155:_render_raw, T201, `print` found
ruff,     src/pyqa/reporting/formatters.py:157:_render_raw, T201, `print` found
pylint,   src/pyqa/reporting/formatters.py:160:_normalize_concise_path, R1260, '_normalize_concise_path' is too complex. The McCabe rating is 11
pylint,   src/pyqa/reporting/formatters.py:164:_normalize_concise_path, W0717, try clause contains 5 statements, expected at most 1
pylint,   src/pyqa/reporting/formatters.py:183:_dump_diagnostics, R1260, '_dump_diagnostics' is too complex. The McCabe rating is 7
pylint,   src/pyqa/reporting/formatters.py:185:_dump_diagnostics, R6103, Use 'if not (collected := list(diags)):' instead
ruff,     src/pyqa/reporting/formatters.py:210:_dump_diagnostics, T201, `print` found
pylint,   src/pyqa/reporting/formatters.py:230:_clean_message, R2004, Consider using a named constant or an enum instead of ''-''.
pylint,   src/pyqa/reporting/formatters.py:323:_gather_metrics, R6103, Use 'if (key := normalise_path_key(candidate)) in seen:' instead
pylint,   src/pyqa/reporting/formatters.py:327:_gather_metrics, R6103, Use 'if (metric := result.file_metrics.get(key)) is None:' instead
ruff,     src/pyqa/security.py:11:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/security.py:99:register_secret, D102, Missing docstring in public method
ruff,     src/pyqa/security.py:103:register_pii, D102, Missing docstring in public method
ruff,     src/pyqa/security.py:107:register_temp, D102, Missing docstring in public method
ruff,     src/pyqa/security.py:111:register_bandit, D102, Missing docstring in public method
ruff,     src/pyqa/security.py:126:run, D102, Missing docstring in public method
pylint,   src/pyqa/security.py:166:_is_binary, R2004, Consider using a named constant or an enum instead of 'b'\x00''.
pylint,   src/pyqa/security.py:179:_scan_file, R6103, Use 'if not (text := self._read_text(path)):' instead
ruff,     src/pyqa/security.py:205:_is_scan_candidate, SIM103, Return the condition `not self._is_binary(path)` directly
pylint,   src/pyqa/security.py:234:_scan_entropy, R6103, Use 'if not (filtered := _filter_entropy(matches)):' instead
pylint,   src/pyqa/security.py:262:_scan_pii, R6103, Use 'if not (matches := _filter_comments(matches)):' instead
pylint,   src/pyqa/security.py:270:_run_bandit, R1260, '_run_bandit' is too complex. The McCabe rating is 9
pylint,   src/pyqa/security.py:281:_run_bandit, C0301, Line too long (113/100)
ruff,     src/pyqa/security.py:281:_run_bandit, E501, Line too long (113 > 100)
pylint,   src/pyqa/security.py:289:_run_bandit, W0717, try clause contains 23 statements, expected at most 1
pylint,   src/pyqa/security.py:332:_run_bandit, R2004, Consider using a named constant or an enum instead of ''HIGH''.
ruff,     src/pyqa/security.py:334:_run_bandit, T201, `print` found
ruff,     src/pyqa/security.py:336:_run_bandit, T201, `print` found
ruff,     src/pyqa/security.py:338:_run_bandit, T201, `print` found
ruff,     src/pyqa/security.py:339:_run_bandit, T201, `print` found
pylint,   src/pyqa/security.py:369:_should_skip_markdown, R2004, Consider using a named constant or an enum instead of ''.md''.
pylint,   src/pyqa/security.py:395:get_staged_files, W0717, try clause contains 4 statements, expected at most 1
ruff,     src/pyqa/serialization.py:18:JsonPrimitive, UP040, Type alias `JsonPrimitive` uses `TypeAlias` annotation instead of the `type` keyword
ruff,     src/pyqa/serialization.py:19:JsonValue, UP040, Type alias `JsonValue` uses `TypeAlias` annotation instead of the `type` keyword
pylint,   src/pyqa/serialization.py:56:deserialize_outcome, R0204, Redefinition of severity_enum type from pyqa.severity.Severity to pyqa.severity.Severity.WARNING
ruff,     src/pyqa/serialization.py:94:coerce_optional_int, D103, Missing docstring in public function
ruff,     src/pyqa/serialization.py:107:coerce_optional_str, D103, Missing docstring in public function
ruff,     src/pyqa/serialization.py:119:_coerce_diagnostic_payload, PERF401, Use a list comprehension to create a transformed list
pylint,   src/pyqa/serialization.py:123:jsonify, R1260, 'jsonify' is too complex. The McCabe rating is 10
ruff,     src/pyqa/serialization.py:123:jsonify, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `value`
ruff,     src/pyqa/serialization.py:123:jsonify, PLR0911, Too many return statements (9 > 6)
mypy,     src/pyqa/serialization.py:130:jsonify, unused-ignore, Unused "type: ignore[call-arg, no-untyped-call]" comment
pylint,   src/pyqa/severity.py:59:add_custom_rule, W0717, try clause contains 3 statements, expected at most 1
pylint,   src/pyqa/severity.py:77:severity_from_code, R2004, Consider using a named constant or an enum instead of ''W''.
ruff,     src/pyqa/testing/suppressions.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
pylint,   src/pyqa/testing/suppressions.py:25:flatten_test_suppressions, W0160, Consider rewriting as a ternary expression
pylint,   src/pyqa/testing/suppressions.py:33:flatten_test_suppressions, R6103, Use 'if not (tool_map := _TEST_SUPPRESSIONS.get(language)):' instead
ruff,     src/pyqa/tool_env/models.py:6:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/tool_env/models.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/models.py:23:from_parts, D102, Missing docstring in public method
ruff,     src/pyqa/tool_env/preparer.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/preparer.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tool_env/preparer.py:9:from, TC001, Move application import `..tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/preparer.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/preparer.py:11:from, TC001, Move application import `.models.PreparedCommand` into a type-checking block
ruff,     src/pyqa/tool_env/preparer.py:12:from, TC001, Move application import `.runtimes.base.RuntimeHandler` into a type-checking block
ruff,     src/pyqa/tool_env/preparer.py:26:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/tool_env/preparer.py:39:prepare, D102, Missing docstring in public method
ruff,     src/pyqa/tool_env/preparer.py:39:prepare, PLR0913, Too many arguments in function definition (6 > 5)
ruff,     src/pyqa/tool_env/runtimes/base.py:8:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:8:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:11:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/base.py:12:from, TC001, Move application import `..models.PreparedCommand` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/base.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/base.py:14:from, TC001, Move application import `..versioning.VersionResolver` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/base.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/base.py:20:__init__, D107, Missing docstring in `__init__`
pylint,   src/pyqa/tool_env/runtimes/base.py:23:prepare, R1260, 'prepare' is too complex. The McCabe rating is 7
ruff,     src/pyqa/tool_env/runtimes/base.py:23:prepare, D102, Missing docstring in public method
ruff,     src/pyqa/tool_env/runtimes/base.py:23:prepare, PLR0913, Too many arguments in function definition (7 > 5)
ruff,     src/pyqa/tool_env/runtimes/binary.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/binary.py:9:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/binary.py:9:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/binary.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/binary.py:30:_try_project, ARG002, Unused method argument: `tool`
ruff,     src/pyqa/tool_env/runtimes/go.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/go.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/go.py:14:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/go.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/go.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/go.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/go.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/go.py:28:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/go.py:29:_try_system, ARG002, Unused method argument: `cache_dir`
pylint,   src/pyqa/tool_env/runtimes/go.py:33:_try_system, R6103, Use 'if not (executable := shutil.which(base_cmd[0])):' instead
ruff,     src/pyqa/tool_env/runtimes/go.py:44:_try_project, ARG002, Unused method argument: `tool`
ruff,     src/pyqa/tool_env/runtimes/go.py:69:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/go.py:70:_prepare_local, ARG002, Unused method argument: `target_version`
ruff,     src/pyqa/tool_env/runtimes/go.py:73:_prepare_local, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/go.py:73:_prepare_local, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tool_env/runtimes/go.py:87:_ensure_local_tool, R1260, '_ensure_local_tool' is too complex. The McCabe rating is 7
pylint,   src/pyqa/tool_env/runtimes/go.py:97:_ensure_local_tool, W0717, try clause contains 3 statements, expected at most 1
ruff,     src/pyqa/tool_env/runtimes/lua.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/lua.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/lua.py:14:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/lua.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/lua.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/lua.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/lua.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/lua.py:28:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/lua.py:29:_try_system, ARG002, Unused method argument: `cache_dir`
pylint,   src/pyqa/tool_env/runtimes/lua.py:33:_try_system, R6103, Use 'if not (executable := shutil.which(base_cmd[0])):' instead
ruff,     src/pyqa/tool_env/runtimes/lua.py:44:_try_project, ARG002, Unused method argument: `tool`
ruff,     src/pyqa/tool_env/runtimes/lua.py:69:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/lua.py:70:_prepare_local, ARG002, Unused method argument: `target_version`
pylint,   src/pyqa/tool_env/runtimes/lua.py:82:_ensure_local_tool, R1260, '_ensure_local_tool' is too complex. The McCabe rating is 8
ruff,     src/pyqa/tool_env/runtimes/lua.py:85:_ensure_local_tool, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/lua.py:85:_ensure_local_tool, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tool_env/runtimes/lua.py:93:_ensure_local_tool, W0717, try clause contains 3 statements, expected at most 1
ruff,     src/pyqa/tool_env/runtimes/npm.py:10:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/npm.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/npm.py:11:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/npm.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:15:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/npm.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:18:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/npm.py:31:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/npm.py:32:_try_system, ARG002, Unused method argument: `cache_dir`
pylint,   src/pyqa/tool_env/runtimes/npm.py:36:_try_system, R6103, Use 'if not (executable := shutil.which(base_cmd[0])):' instead
ruff,     src/pyqa/tool_env/runtimes/npm.py:50:_try_project, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/npm.py:80:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/npm.py:81:_prepare_local, ARG002, Unused method argument: `target_version`
pylint,   src/pyqa/tool_env/runtimes/npm.py:97:_ensure_local_package, R6103, Use 'if not (packages := shlex.split(requirement)):' instead
ruff,     src/pyqa/tool_env/runtimes/npm.py:98:_ensure_local_package, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/npm.py:98:_ensure_local_package, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tool_env/runtimes/npm.py:104:_ensure_local_package, W0717, try clause contains 3 statements, expected at most 1
pylint,   src/pyqa/tool_env/runtimes/npm.py:130:_resolve_installed_version, R1260, '_resolve_installed_version' is too complex. The McCabe rating is 7
pylint,   src/pyqa/tool_env/runtimes/npm.py:138:_resolve_installed_version, R6103, Use 'if not (packages := shlex.split(requirement)):' instead
pylint,   src/pyqa/tool_env/runtimes/npm.py:196:_npm_requirement, R6103, Use 'if (target := desired_version(tool)):' instead
ruff,     src/pyqa/tool_env/runtimes/perl.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/perl.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/perl.py:14:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/perl.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/perl.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/perl.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/perl.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/perl.py:28:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/perl.py:29:_try_system, ARG002, Unused method argument: `cache_dir`
pylint,   src/pyqa/tool_env/runtimes/perl.py:33:_try_system, R6103, Use 'if not (executable := shutil.which(base_cmd[0])):' instead
ruff,     src/pyqa/tool_env/runtimes/perl.py:73:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/perl.py:74:_prepare_local, ARG002, Unused method argument: `target_version`
pylint,   src/pyqa/tool_env/runtimes/perl.py:94:_ensure_local_tool, W0717, try clause contains 3 statements, expected at most 1
ruff,     src/pyqa/tool_env/runtimes/python.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/python.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/python.py:10:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/python.py:10:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/python.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/python.py:12:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/python.py:23:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/python.py:24:_try_system, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/python.py:41:_try_project, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/python.py:42:_try_project, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/python.py:58:_prepare_local, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/python.py:59:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/python.py:60:_prepare_local, ARG002, Unused method argument: `target_version`
ruff,     src/pyqa/tool_env/runtimes/rust.py:10:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/rust.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/rust.py:14:from, TC001, Move application import `...tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/runtimes/rust.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/rust.py:15:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/rust.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/rust.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/runtimes/rust.py:28:_try_system, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/rust.py:29:_try_system, ARG002, Unused method argument: `cache_dir`
pylint,   src/pyqa/tool_env/runtimes/rust.py:33:_try_system, R6103, Use 'if not (executable := shutil.which(base_cmd[0])):' instead
ruff,     src/pyqa/tool_env/runtimes/rust.py:71:_prepare_local, ARG002, Unused method argument: `root`
ruff,     src/pyqa/tool_env/runtimes/rust.py:72:_prepare_local, ARG002, Unused method argument: `cache_dir`
ruff,     src/pyqa/tool_env/runtimes/rust.py:73:_prepare_local, ARG002, Unused method argument: `target_version`
ruff,     src/pyqa/tool_env/runtimes/rust.py:76:_prepare_local, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/rust.py:76:_prepare_local, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tool_env/runtimes/rust.py:89:_ensure_local_tool, R1260, '_ensure_local_tool' is too complex. The McCabe rating is 10
pylint,   src/pyqa/tool_env/runtimes/rust.py:101:_ensure_local_tool, R6103, Use 'if not (cargo_path := shutil.which('cargo')):' instead
ruff,     src/pyqa/tool_env/runtimes/rust.py:102:_ensure_local_tool, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/rust.py:102:_ensure_local_tool, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tool_env/runtimes/rust.py:112:_ensure_local_tool, W0717, try clause contains 3 statements, expected at most 1
ruff,     src/pyqa/tool_env/runtimes/rust.py:142:_ensure_local_tool, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/rust.py:142:_ensure_local_tool, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tool_env/runtimes/rust.py:159:_install_rustup_component, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tool_env/runtimes/rust.py:159:_install_rustup_component, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tool_env/utils.py:8:from, TC001, Move application import `..tools.base.Tool` into a type-checking block
ruff,     src/pyqa/tool_env/utils.py:8:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tool_env/utils.py:25:_split_package_spec, PIE810, Call `startswith` once with a `tuple`
pylint,   src/pyqa/tool_env/utils.py:28:_split_package_spec, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     src/pyqa/tool_env/utils.py:28:_split_package_spec, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
pylint,   src/pyqa/tool_env/utils.py:32:_split_package_spec, R2004, Consider using a named constant or an enum instead of ''@''.
pylint,   src/pyqa/tool_env/utils.py:43:desired_version, R6103, Use 'if (extracted := _extract_version(specified)):' instead
ruff,     src/pyqa/tool_env/versioning.py:7:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/tool_env/versioning.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tool_env/versioning.py:11:from, TID252, Prefer absolute imports over relative imports from parent modules
pylint,   src/pyqa/tool_env/versioning.py:35:capture, R6103, Use 'if not (output := completed.stdout.strip() or completed.stderr.strip()):' instead
ruff,     src/pyqa/tool_env/versioning.py:40:normalize, D102, Missing docstring in public method
ruff,     src/pyqa/tool_env/versioning.py:51:is_compatible, D102, Missing docstring in public method
ruff,     src/pyqa/tool_versions.py:8:from, TC003, Move standard library import `collections.abc.Mapping` into a type-checking block
ruff,     src/pyqa/tool_versions.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tools/base.py:13:from, TC001, Move application import `..config.Config` into a type-checking block
ruff,     src/pyqa/tools/base.py:13:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/base.py:14:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/base.py:27:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/tools/base.py:34:__init__, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**data`
ruff,     src/pyqa/tools/base.py:51:_coerce_files, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:51:_coerce_files, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:71:build, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:100:_coerce_args, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:100:_coerce_args, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:102:__init__, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `**data`
ruff,     src/pyqa/tools/base.py:102:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/tools/base.py:107:build, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:137:_coerce_patterns, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:137:_coerce_patterns, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:146:_coerce_env, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:146:_coerce_env, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:148:build_command, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:154:filter_stdout, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:160:filter_stderr, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:197:_coerce_actions, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:197:_coerce_actions, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:200:_coerce_actions, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:200:_coerce_actions, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tools/base.py:202:model_post_init, W0221, Number of parameters was 0 in 'BaseModel.model_post_init' and is now 2 in overriding 'Tool.model_post_init' method
ruff,     src/pyqa/tools/base.py:202:model_post_init, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `__context`
ruff,     src/pyqa/tools/base.py:202:model_post_init, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:202:model_post_init, PYI063, Use PEP 570 syntax for positional-only parameters
pyright,  src/pyqa/tools/base.py:211:Tool, reportIncompatibleMethodOverride, Method "__iter__" overrides class "BaseModel" in an incompatible manner
mypy,     src/pyqa/tools/base.py:212:__iter__, override, Return type "Iterator[ToolAction]" of "__iter__" incompatible with return type "Generator[tuple[str, Any], None, None]" in supertype "pydantic.main.BaseModel"
ruff,     src/pyqa/tools/base.py:212:__iter__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/base.py:215:__len__, D105, Missing docstring in magic method
mypy,     src/pyqa/tools/base.py:218:__contains__, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/tools/base.py:218:__contains__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/base.py:225:__getitem__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/base.py:230:__getitem__, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:230:__getitem__, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:232:keys, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:235:values, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:238:items, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:241:get, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:244:action_names, D102, Missing docstring in public method
ruff,     src/pyqa/tools/base.py:256:_coerce_str_tuple, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:256:_coerce_str_tuple, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:267:_coerce_version_cmd, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/base.py:267:_coerce_version_cmd, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/tools/base.py:269:is_applicable, D102, Missing docstring in public method
ruff,     src/pyqa/tools/builtin_catalog_misc.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/tools/builtin_catalog_misc.py:8:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/builtin_catalog_misc.py:68:misc_tools, D103, Missing docstring in public function
pylint,   src/pyqa/tools/builtin_catalog_misc.py:209:misc_tools, C0301, Line too long (117/100)
ruff,     src/pyqa/tools/builtin_catalog_misc.py:209:misc_tools, E501, Line too long (117 > 100)
ruff,     src/pyqa/tools/builtin_catalog_python.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/tools/builtin_catalog_python.py:8:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/builtin_catalog_python.py:37:python_tools, D103, Missing docstring in public function
ruff,     src/pyqa/tools/builtin_commands_misc.py:6:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
pylint,   src/pyqa/tools/builtin_commands_misc.py:26:build, R1260, 'build' is too complex. The McCabe rating is 8
pylint,   src/pyqa/tools/builtin_commands_misc.py:32:build, R6103, Use 'if (profile := _setting(settings, 'profile', 'configuration')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:36:build, R6103, Use 'if (extra := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:40:build, R2004, Consider using a named constant or an enum instead of ''-b''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:42:build, R2004, Consider using a named constant or an enum instead of ''-q''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:45:build, R2004, Consider using a named constant or an enum instead of ''--check-only''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:47:build, R2004, Consider using a named constant or an enum instead of ''-q''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:57:build, R1260, 'build' is too complex. The McCabe rating is 9
pylint,   src/pyqa/tools/builtin_commands_misc.py:62:build, R2004, Consider using a named constant or an enum instead of ''--nocolor''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:64:build, R2004, Consider using a named constant or an enum instead of ''--verbose''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:68:build, R6103, Use 'if (severity := _setting(settings, 'severity')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:72:build, R6103, Use 'if (theme := _setting(settings, 'theme')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:76:build, R6103, Use 'if (profile := _setting(settings, 'profile', 'configuration')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:88:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:99:build, R1260, 'build' is too complex. The McCabe rating is 16
ruff,     src/pyqa/tools/builtin_commands_misc.py:99:build, C901, `build` is too complex (16 > 10)
ruff,     src/pyqa/tools/builtin_commands_misc.py:99:build, PLR0912, Too many branches (15 > 12)
pylint,   src/pyqa/tools/builtin_commands_misc.py:105:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:112:build, R6103, Use 'if (ignore_path := _setting(settings, 'ignore-path', 'ignore_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:132:build, R6103, Use 'if (max_warnings := _setting(settings, 'max-warnings', 'max_warnings')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:142:build, R6103, Use 'if (cache_location := _setting(settings, 'cache-location', 'cache_location')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:146:build, R6103, Use 'if (fix_type := _settings_list(_setting(settings, 'fix-type', 'fix_type'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:178:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:188:build, R1260, 'build' is too complex. The McCabe rating is 20
ruff,     src/pyqa/tools/builtin_commands_misc.py:188:build, C901, `build` is too complex (20 > 10)
ruff,     src/pyqa/tools/builtin_commands_misc.py:188:build, PLR0912, Too many branches (19 > 12)
ruff,     src/pyqa/tools/builtin_commands_misc.py:188:build, PLR0915, Too many statements (52 > 50)
pylint,   src/pyqa/tools/builtin_commands_misc.py:194:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:198:build, R6103, Use 'if (parser := _setting(settings, 'parser')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:202:build, R6103, Use 'if (ignore_path := _setting(settings, 'ignore-path', 'ignore_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:214:build, R6103, Use 'if (loglevel := _setting(settings, 'loglevel')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:218:build, R6103, Use 'if (config_precedence := _setting(settings, 'config-precedence', 'config_precedence')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:228:build, R6103, Use 'if (tab_width := _setting(settings, 'tab-width', 'tab_width')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:238:build, R6103, Use 'if (trailing_comma := _setting(settings, 'trailing-comma', 'trailing_comma')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:254:build, R6103, Use 'if (end_of_line := _setting(settings, 'end-of-line', 'end_of_line')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:258:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:276:build, R2004, Consider using a named constant or an enum instead of ''/.github/workflows/''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:294:build, R1260, 'build' is too complex. The McCabe rating is 11
ruff,     src/pyqa/tools/builtin_commands_misc.py:294:build, C901, `build` is too complex (11 > 10)
pylint,   src/pyqa/tools/builtin_commands_misc.py:301:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:329:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:340:build, R1260, 'build' is too complex. The McCabe rating is 11
ruff,     src/pyqa/tools/builtin_commands_misc.py:340:build, C901, `build` is too complex (11 > 10)
pylint,   src/pyqa/tools/builtin_commands_misc.py:346:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:350:build, R6103, Use 'if (config_basedir := _setting(settings, 'config-basedir', 'config_basedir')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:354:build, R6103, Use 'if (ignore_path := _setting(settings, 'ignore-path', 'ignore_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:358:build, R6103, Use 'if (custom_syntax := _setting(settings, 'custom-syntax', 'custom_syntax')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:371:build, R6103, Use 'if (max_warnings := _setting(settings, 'max-warnings', 'max_warnings')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:374:build, R2004, Consider using a named constant or an enum instead of ''--custom-formatter''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:374:build, R2004, Consider using a named constant or an enum instead of ''--formatter''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:378:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:394:build, R6103, Use 'if (config_file := _setting(settings, 'config-file', 'config_file')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:398:build, R6103, Use 'if (config_data := _setting(settings, 'config-data', 'config_data')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:404:build, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:404:build, R2004, Consider using a named constant or an enum instead of ''-f''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:408:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:424:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:428:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:444:build, R6103, Use 'if (config := _setting(ctx.settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:448:build, R6103, Use 'if (failure_threshold := _setting(ctx.settings, 'failure-threshold', 'failure_threshold')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:452:build, R6103, Use 'if (args := _settings_list(_setting(ctx.settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:462:build, R1260, 'build' is too complex. The McCabe rating is 8
pylint,   src/pyqa/tools/builtin_commands_misc.py:464:build, R2004, Consider using a named constant or an enum instead of ''--no-color''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:466:build, R2004, Consider using a named constant or an enum instead of ''--quiet''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:479:build, R6103, Use 'if (schema := _setting(settings, 'schema')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:486:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:510:build, R6103, Use 'if (args := _settings_list(_setting(ctx.settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:520:build, R1260, 'build' is too complex. The McCabe rating is 24
ruff,     src/pyqa/tools/builtin_commands_misc.py:520:build, C901, `build` is too complex (24 > 10)
ruff,     src/pyqa/tools/builtin_commands_misc.py:520:build, PLR0912, Too many branches (21 > 12)
ruff,     src/pyqa/tools/builtin_commands_misc.py:520:build, PLR0915, Too many statements (61 > 50)
pylint,   src/pyqa/tools/builtin_commands_misc.py:529:build, R2004, Consider using a named constant or an enum instead of ''--codes''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:531:build, R2004, Consider using a named constant or an enum instead of ''--ranges''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:533:build, R2004, Consider using a named constant or an enum instead of ''--no-color''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:540:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:582:build, R6103, Use 'if (std := _setting(settings, 'std')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:586:build, R6103, Use 'if (globals_list := _settings_list(_setting(settings, 'globals'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:590:build, R6103, Use 'if (read_globals := _settings_list(_setting(settings, 'read-globals', 'read_globals'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:594:build, R6103, Use 'if (ignore := _settings_list(_setting(settings, 'ignore'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:605:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:615:build, R1260, 'build' is too complex. The McCabe rating is 11
ruff,     src/pyqa/tools/builtin_commands_misc.py:615:build, C901, `build` is too complex (11 > 10)
pylint,   src/pyqa/tools/builtin_commands_misc.py:621:build, R6103, Use 'if not (display_style := _setting(settings, 'display-style', 'display_style')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:626:build, R6103, Use 'if not (color := _setting(settings, 'color')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:631:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:638:build, R6103, Use 'if (num_threads := _setting(settings, 'num-threads', 'num_threads')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:654:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:665:build, R1260, 'build' is too complex. The McCabe rating is 13
ruff,     src/pyqa/tools/builtin_commands_misc.py:665:build, C901, `build` is too complex (13 > 10)
pylint,   src/pyqa/tools/builtin_commands_misc.py:670:build, R2004, Consider using a named constant or an enum instead of ''--report''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:672:build, R2004, Consider using a named constant or an enum instead of ''--frail''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:674:build, R2004, Consider using a named constant or an enum instead of ''--quiet''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:676:build, R2004, Consider using a named constant or an enum instead of ''--no-color''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:680:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:688:build, R6103, Use 'if (ignore_path := _setting(settings, 'ignore-path', 'ignore_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:696:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:700:build, R6103, Use 'if (files := [str(path) for path in ctx.files]):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:704:build, R2004, Consider using a named constant or an enum instead of ''--output''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:704:build, R2004, Consider using a named constant or an enum instead of ''-o''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:719:build, R2004, Consider using a named constant or an enum instead of ''--reporter''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:723:build, R6103, Use 'if (ruleset := _setting(settings, 'ruleset')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:731:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:742:build, R1260, 'build' is too complex. The McCabe rating is 7
pylint,   src/pyqa/tools/builtin_commands_misc.py:747:build, R2004, Consider using a named constant or an enum instead of ''-i''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:751:build, R2004, Consider using a named constant or an enum instead of ''-ln''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:755:build, R6103, Use 'if (indent_case := _as_bool(_setting(settings, 'indent-case', 'indent_case'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:759:build, R2004, Consider using a named constant or an enum instead of ''-s''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:769:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:784:build, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:784:build, R2004, Consider using a named constant or an enum instead of ''-f''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:788:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:796:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:806:build, R1260, 'build' is too complex. The McCabe rating is 9
pylint,   src/pyqa/tools/builtin_commands_misc.py:812:build, R6103, Use 'if (project := _setting(settings, 'project')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:834:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:844:build, R1260, 'build' is too complex. The McCabe rating is 7
pylint,   src/pyqa/tools/builtin_commands_misc.py:849:build, R2004, Consider using a named constant or an enum instead of ''--no-ansi''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:851:build, R2004, Consider using a named constant or an enum instead of ''--no-progress''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:855:build, R6103, Use 'if (config := _setting(settings, 'configuration', 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:867:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:877:build, R1260, 'build' is too complex. The McCabe rating is 13
ruff,     src/pyqa/tools/builtin_commands_misc.py:877:build, C901, `build` is too complex (13 > 10)
pylint,   src/pyqa/tools/builtin_commands_misc.py:883:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:887:build, R6103, Use 'if (deadline := _setting(settings, 'deadline')):' instead
ruff,     src/pyqa/tools/builtin_commands_misc.py:891:build, SIM102, Use a single `if` statement instead of nested `if` statements
pylint,   src/pyqa/tools/builtin_commands_misc.py:892:build, R2004, Consider using a named constant or an enum instead of ''--enable-all''.
pylint,   src/pyqa/tools/builtin_commands_misc.py:902:build, R6103, Use 'if (tests := _as_bool(_setting(settings, 'tests'))) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:910:build, R6103, Use 'if (build_tags := _settings_list(_setting(settings, 'build-tags', 'build_tags'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:920:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:937:build, R6103, Use 'if (project := _setting(settings, 'project')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:941:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_misc.py:945:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
ruff,     src/pyqa/tools/builtin_commands_python.py:11:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     src/pyqa/tools/builtin_commands_python.py:13:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
pylint,   src/pyqa/tools/builtin_commands_python.py:57:_python_target_version, R6103, Use 'if (version := getattr(ctx.cfg.execution, 'python_version', None)):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:65:_python_version_components, R6103, Use 'if not (match := re.search('(\\d{1,2})(?:[._-]?(\\d{1,2}))?', version)):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:84:_pyupgrade_flag_from_version, R6103, Use 'if not (normalized := version.lower().lstrip('py').rstrip('+')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:92:_pyupgrade_flag_from_version, R6103, Use 'if not (minor := parts[0][1:] if len(parts[0]) > 1 else '0'):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:97:_discover_pylint_plugins, R1260, '_discover_pylint_plugins' is too complex. The McCabe rating is 10
pylint,   src/pyqa/tools/builtin_commands_python.py:102:_loadable, W0717, try clause contains 5 statements, expected at most 1
pylint,   src/pyqa/tools/builtin_commands_python.py:104:_loadable, R6103, Use 'if (spec := importlib.util.find_spec(module)) is None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:108:_loadable, W0718, Catching too general exception Exception
ruff,     src/pyqa/tools/builtin_commands_python.py:108:_loadable, BLE001, Do not catch blind exception: `Exception`
pylint,   src/pyqa/tools/builtin_commands_python.py:131:build, R1260, 'build' is too complex. The McCabe rating is 23
ruff,     src/pyqa/tools/builtin_commands_python.py:131:build, C901, `build` is too complex (21 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:131:build, PLR0912, Too many branches (21 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:131:build, PLR0915, Too many statements (63 > 50)
pylint,   src/pyqa/tools/builtin_commands_python.py:141:build, W0717, try clause contains 2 statements, expected at most 1
pylint,   src/pyqa/tools/builtin_commands_python.py:149:build, W0717, try clause contains 2 statements, expected at most 1
pylint,   src/pyqa/tools/builtin_commands_python.py:162:build, R6103, Use 'if (resolved := directory if directory.is_absolute() else root / directory) == root:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:186:build, R6103, Use 'if (config_path := _setting(settings, 'config', 'configfile')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:190:build, R6103, Use 'if (baseline := _setting(settings, 'baseline')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:194:build, R6103, Use 'if (report_fmt := _setting(settings, 'format')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:198:build, R6103, Use 'if (severity := _setting(settings, 'severity', 'severity_level')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:202:build, R6103, Use 'if (confidence := _setting(settings, 'confidence', 'confidence_level')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:206:build, R6103, Use 'if (skip_tests := _settings_list(_setting(settings, 'skip', 'skips'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:210:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:218:_is_under, W0717, try clause contains 2 statements, expected at most 1
ruff,     src/pyqa/tools/builtin_commands_python.py:220:_is_under, TRY300, Consider moving this statement to an `else` block
pylint,   src/pyqa/tools/builtin_commands_python.py:231:build, R1260, 'build' is too complex. The McCabe rating is 21
ruff,     src/pyqa/tools/builtin_commands_python.py:231:build, C901, `build` is too complex (21 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:231:build, PLR0912, Too many branches (21 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:231:build, PLR0915, Too many statements (57 > 50)
pylint,   src/pyqa/tools/builtin_commands_python.py:237:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:241:build, R6103, Use 'if (select := _settings_list(_setting(settings, 'select'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:245:build, R6103, Use 'if (ignore := _settings_list(_setting(settings, 'ignore'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:249:build, R6103, Use 'if (extend_select := _settings_list(_setting(settings, 'extend-select'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:253:build, R6103, Use 'if (extend_ignore := _settings_list(_setting(settings, 'extend-ignore'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:263:build, R6103, Use 'if (target_version := _setting(settings, 'target-version')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:274:build, R6103, Use 'if (per_file_ignores := _settings_list(_setting(settings, 'per-file-ignores'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:278:build, R6103, Use 'if (exclude := _settings_list(_setting(settings, 'exclude'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:282:build, R6103, Use 'if (extend_exclude := _settings_list(_setting(settings, 'extend-exclude'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:300:build, R2004, Consider using a named constant or an enum instead of ''lint''.
pylint,   src/pyqa/tools/builtin_commands_python.py:303:build, R5601, Consecutive elif with differing indentation level, consider creating a function to separate the inner elif
pylint,   src/pyqa/tools/builtin_commands_python.py:304:build, R2004, Consider using a named constant or an enum instead of ''--fix''.
pylint,   src/pyqa/tools/builtin_commands_python.py:307:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:317:build, R1260, 'build' is too complex. The McCabe rating is 13
ruff,     src/pyqa/tools/builtin_commands_python.py:317:build, C901, `build` is too complex (13 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:317:build, PLR0912, Too many branches (13 > 12)
pylint,   src/pyqa/tools/builtin_commands_python.py:323:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:333:build, R6103, Use 'if (target_version := _setting(settings, 'target-version')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:344:build, R6103, Use 'if (exclude := _settings_list(_setting(settings, 'exclude'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:348:build, R6103, Use 'if (extend_exclude := _settings_list(_setting(settings, 'extend-exclude'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:364:build, R6103, Use 'if (stdin_filename := _setting(settings, 'stdin-filename')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:368:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:378:build, R1260, 'build' is too complex. The McCabe rating is 21
ruff,     src/pyqa/tools/builtin_commands_python.py:378:build, C901, `build` is too complex (21 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:378:build, PLR0912, Too many branches (22 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:378:build, PLR0915, Too many statements (52 > 50)
pylint,   src/pyqa/tools/builtin_commands_python.py:384:build, R6103, Use 'if (settings_path := _setting(settings, 'settings-path', 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:388:build, R6103, Use 'if (profile := _setting(settings, 'profile')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:400:build, R6103, Use 'if (py_version := _setting(settings, 'py', 'python-version')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:406:build, R6103, Use 'if (multi_line := _setting(settings, 'multi-line', 'multi_line')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:414:build, R6103, Use 'if (virtual_env := _setting(settings, 'virtual-env', 'virtual_env')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:418:build, R6103, Use 'if (conda_env := _setting(settings, 'conda-env', 'conda_env')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:452:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:463:build, R1260, 'build' is too complex. The McCabe rating is 10
pylint,   src/pyqa/tools/builtin_commands_python.py:469:build, R6103, Use 'if (config := _setting(settings, 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:473:build, R6103, Use 'if (line_length := _setting(settings, 'line-length')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:497:build, R6103, Use 'if (workers := _setting(settings, 'workers')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:501:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:511:build, R1260, 'build' is too complex. The McCabe rating is 24
ruff,     src/pyqa/tools/builtin_commands_python.py:511:build, C901, `build` is too complex (24 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:511:build, PLR0912, Too many branches (23 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:511:build, PLR0915, Too many statements (54 > 50)
pylint,   src/pyqa/tools/builtin_commands_python.py:517:build, R6103, Use 'if (config_file := _setting(settings, 'config', 'config-file')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:569:build, R6103, Use 'if not (python_version := _setting(settings, 'python-version')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:575:build, R6103, Use 'if (python_exec := _setting(settings, 'python-executable')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:583:build, R6103, Use 'if (cache_dir := _setting(settings, 'cache-dir')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:587:build, R6103, Use 'if (additional_args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:597:build, R1260, 'build' is too complex. The McCabe rating is 14
ruff,     src/pyqa/tools/builtin_commands_python.py:597:build, C901, `build` is too complex (14 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:597:build, PLR0912, Too many branches (13 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:609:build, PERF401, Use `list.extend` to create a transformed list
ruff,     src/pyqa/tools/builtin_commands_python.py:612:build, PERF401, Use `list.extend` to create a transformed list
pylint,   src/pyqa/tools/builtin_commands_python.py:615:build, R6103, Use 'if (extensions := _settings_list(_setting(settings, 'extensions'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:619:build, R6103, Use 'if (headers := _settings_list(_setting(settings, 'headers'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:623:build, R6103, Use 'if (include_order := _setting(settings, 'includeorder')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:627:build, R6103, Use 'if (counting := _setting(settings, 'counting')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:631:build, R6103, Use 'if (repository := _setting(settings, 'repository')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:635:build, R6103, Use 'if (root_flag := _setting(settings, 'root')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:645:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:655:build, R1260, 'build' is too complex. The McCabe rating is 26
ruff,     src/pyqa/tools/builtin_commands_python.py:655:build, C901, `build` is too complex (26 > 10)
ruff,     src/pyqa/tools/builtin_commands_python.py:655:build, PLR0912, Too many branches (26 > 12)
ruff,     src/pyqa/tools/builtin_commands_python.py:655:build, PLR0915, Too many statements (69 > 50)
pylint,   src/pyqa/tools/builtin_commands_python.py:661:build, R6103, Use 'if (rcfile := _setting(settings, 'rcfile', 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:665:build, R6103, Use 'if (explicit_plugins := _settings_list(_setting(settings, 'load-plugins', 'plugins'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:670:build, R6103, Use 'if (default_plugins := _discover_pylint_plugins(root)):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:674:build, R6103, Use 'if (disable := _settings_list(_setting(settings, 'disable'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:678:build, R6103, Use 'if (enable := _settings_list(_setting(settings, 'enable'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:682:build, R6103, Use 'if (jobs := _setting(settings, 'jobs')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:686:build, R6103, Use 'if (fail_under := _setting(settings, 'fail-under', 'fail_under')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:690:build, R6103, Use 'if (exit_zero := _as_bool(_setting(settings, 'exit-zero', 'exit_zero'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:730:build, R6103, Use 'if (init_import := _setting(settings, 'init-import', 'init_import')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:740:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:750:build, R1260, 'build' is too complex. The McCabe rating is 12
ruff,     src/pyqa/tools/builtin_commands_python.py:750:build, C901, `build` is too complex (12 > 10)
pylint,   src/pyqa/tools/builtin_commands_python.py:756:build, R6103, Use 'if (project := _setting(settings, 'project', 'config')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:760:build, R6103, Use 'if (venv_path := _setting(settings, 'venv-path', 'venv_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:764:build, R6103, Use 'if (pythonpath := _setting(settings, 'pythonpath')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:768:build, R6103, Use 'if (typeshed_path := _setting(settings, 'typeshed-path', 'typeshed_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:772:build, R6103, Use 'if (python_platform := _setting(settings, 'python-platform', 'python_platform')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:776:build, R6103, Use 'if not (python_version := _setting(settings, 'python-version', 'python_version')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:785:build, R6103, Use 'if (verifytypes := _setting(settings, 'verifytypes')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:792:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:803:build, R1260, 'build' is too complex. The McCabe rating is 7
pylint,   src/pyqa/tools/builtin_commands_python.py:809:build, R6103, Use 'if (config_path := _setting(settings, 'config', 'config_path')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:813:build, R6103, Use 'if (dialect := _setting(settings, 'dialect') or ctx.cfg.execution.sql_dialect):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:817:build, R6103, Use 'if (templater := _setting(settings, 'templater')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:825:build, R6103, Use 'if (processes := _setting(settings, 'processes')) is not None:' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:829:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:839:build, R1260, 'build' is too complex. The McCabe rating is 10
pylint,   src/pyqa/tools/builtin_commands_python.py:845:build, R6103, Use 'if (stdin_filename := _setting(settings, 'stdin-filename', 'stdin_filename')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:847:build, R2004, Consider using a named constant or an enum instead of ''-''.
pylint,   src/pyqa/tools/builtin_commands_python.py:847:build, R6103, Use 'if (value := str(stdin_filename)) == '-':' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:871:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:886:build, R6103, Use 'if (pyplus_value := _setting(settings, 'pyplus', 'py_plus', 'py_version')):' instead
pylint,   src/pyqa/tools/builtin_commands_python.py:909:build, R6103, Use 'if (args := _settings_list(_setting(settings, 'args'))):' instead
ruff,     src/pyqa/tools/builtin_helpers.py:16:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/builtin_helpers.py:17:from, TID252, Prefer absolute imports over relative imports from parent modules
ruff,     src/pyqa/tools/builtin_helpers.py:18:from, TC001, Move application import `.base.ToolContext` into a type-checking block
pylint,   src/pyqa/tools/builtin_helpers.py:84:_setting, R6103, Use 'if (alt := name.replace('-', '_')) in settings:' instead
pylint,   src/pyqa/tools/builtin_helpers.py:125:_ensure_actionlint, R1260, '_ensure_actionlint' is too complex. The McCabe rating is 11
ruff,     src/pyqa/tools/builtin_helpers.py:125:_ensure_actionlint, C901, `_ensure_actionlint` is too complex (11 > 10)
ruff,     src/pyqa/tools/builtin_helpers.py:125:_ensure_actionlint, PLR0912, Too many branches (14 > 12)
pylint,   src/pyqa/tools/builtin_helpers.py:136:_ensure_actionlint, R2004, Consider using a named constant or an enum instead of ''linux''.
pylint,   src/pyqa/tools/builtin_helpers.py:144:_ensure_actionlint, R2004, Consider using a named constant or an enum instead of ''darwin''.
ruff,     src/pyqa/tools/builtin_helpers.py:177:_ensure_actionlint, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/tools/builtin_helpers.py:177:_ensure_actionlint, TRY003, Avoid specifying long messages outside the exception class
pylint,   src/pyqa/tools/builtin_helpers.py:182:_ensure_hadolint, R1260, '_ensure_hadolint' is too complex. The McCabe rating is 8
pylint,   src/pyqa/tools/builtin_helpers.py:193:_ensure_hadolint, R2004, Consider using a named constant or an enum instead of ''linux''.
pylint,   src/pyqa/tools/builtin_helpers.py:201:_ensure_hadolint, R2004, Consider using a named constant or an enum instead of ''darwin''.
pylint,   src/pyqa/tools/builtin_helpers.py:258:_parse_gofmt_check, R6103, Use 'if not (path := line.strip()):' instead
ruff,     src/pyqa/tools/builtin_registry.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/tools/builtin_registry.py:8:from, TC001, Move application import `.base.Tool` into a type-checking block
ruff,     src/pyqa/tools/builtins.py:6:from, TC003, Move standard library import `collections.abc.Iterable` into a type-checking block
ruff,     src/pyqa/tools/builtins.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     src/pyqa/tools/builtins.py:9:from, TC001, Move application import `.base.Tool` into a type-checking block
ruff,     src/pyqa/tools/registry.py:21:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/tools/registry.py:25:register, D102, Missing docstring in public method
ruff,     src/pyqa/tools/registry.py:27:register, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     src/pyqa/tools/registry.py:27:register, TRY003, Avoid specifying long messages outside the exception class
pyright,  src/pyqa/tools/registry.py:31:ToolRegistry, reportIncompatibleMethodOverride, Method "get" overrides class "Mapping" in an incompatible manner
mypy,     src/pyqa/tools/registry.py:32:get, override, Signature of "get" incompatible with supertype "typing.Mapping"
pylint,   src/pyqa/tools/registry.py:32:get, W0221, Number of parameters was 3 in 'Mapping.get' and is now 2 in overriding 'ToolRegistry.get' method
ruff,     src/pyqa/tools/registry.py:32:get, D102, Missing docstring in public method
ruff,     src/pyqa/tools/registry.py:35:try_get, D102, Missing docstring in public method
mypy,     src/pyqa/tools/registry.py:47:__contains__, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/tools/registry.py:47:__contains__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/registry.py:50:__len__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/registry.py:53:__iter__, D105, Missing docstring in magic method
ruff,     src/pyqa/tools/registry.py:56:__getitem__, D105, Missing docstring in magic method
pyright,  src/pyqa/tools/registry.py:58:ToolRegistry, reportIncompatibleMethodOverride, Method "keys" overrides class "Mapping" in an incompatible manner
mypy,     src/pyqa/tools/registry.py:59:keys, override, Return type "Iterable[str]" of "keys" incompatible with return type "KeysView[str]" in supertype "typing.Mapping"
ruff,     src/pyqa/tools/registry.py:76:register_tool, D401, First line of docstring should be in imperative mood: "Convenience helper mirroring the legacy global registration."
pylint,   src/pyqa/tools/settings.py:12:TOOL_SETTING_SCHEMA, R6101, Consider using namedtuple or dataclass for dictionary values
ruff,     src/pyqa/update.py:30:WorkspaceKind, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:39:from_str, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:46:Workspace, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:54:CommandSpec, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:70:_coerce_args, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/update.py:70:_coerce_args, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/update.py:83:_coerce_requires, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/update.py:83:_coerce_requires, TRY003, Avoid specifying long messages outside the exception class
ruff,     src/pyqa/update.py:86:PlanCommand, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:93:ExecutionDetail, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:101:UpdatePlanItem, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:109:UpdatePlan, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:115:UpdateResult, D101, Missing docstring in public class
ruff,     src/pyqa/update.py:123:register_success, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:127:register_failure, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:136:register_skip, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:140:exit_code, D102, Missing docstring in public method
pylint,   src/pyqa/update.py:156:detect, R2004, Consider using a named constant or an enum instead of ''pyproject.toml''.
pylint,   src/pyqa/update.py:191:detect, R2004, Consider using a named constant or an enum instead of ''pnpm-lock.yaml''.
pylint,   src/pyqa/update.py:207:detect, R2004, Consider using a named constant or an enum instead of ''yarn.lock''.
pylint,   src/pyqa/update.py:223:detect, R2004, Consider using a named constant or an enum instead of ''package.json''.
pylint,   src/pyqa/update.py:239:detect, R2004, Consider using a named constant or an enum instead of ''go.mod''.
pylint,   src/pyqa/update.py:256:detect, R2004, Consider using a named constant or an enum instead of ''Cargo.toml''.
ruff,     src/pyqa/update.py:281:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/update.py:290:discover, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:323:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/update.py:328:plan, D102, Missing docstring in public method
ruff,     src/pyqa/update.py:341:plan, SIM102, Use a single `if` statement instead of nested `if` statements
pylint,   src/pyqa/update.py:345:plan, R6103, Use 'if (strategy := self._strategies.get(workspace.kind)) is None:' instead
ruff,     src/pyqa/update.py:360:__init__, D107, Missing docstring in `__init__`
ruff,     src/pyqa/update.py:371:execute, D102, Missing docstring in public method
pylint,   src/pyqa/update.py:405:_process_plan_item, R2004, Consider using a named constant or an enum instead of ''skipped''.
pylint,   src/pyqa/update.py:424:_execute_command, R6103, Use 'if (missing := [tool for tool in spec.requires if shutil.which(tool) is None]):' instead
ruff,     src/pyqa/update.py:455:ensure_lint_install, D103, Missing docstring in public function
ruff,     src/pyqa/update.py:485:_default_runner, ANN401, Dynamically typed expressions (typing.Any) are disallowed in `_default_runner`
mypy,     src/pyqa/workspace.py:14:import, unused-ignore, Unused "type: ignore" comment
ruff,     src/pyqa/workspace.py:16:raise, EM101, Exception must not use a string literal, assign to variable first
ruff,     src/pyqa/workspace.py:16:raise, TRY003, Avoid specifying long messages outside the exception class
ruff,     tests/test_actionlint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_actionlint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_actionlint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_actionlint_tool.py:11:import, TC002, Move third-party import `pytest` into a type-checking block
ruff,     tests/test_actionlint_tool.py:17:test_actionlint_command_download, D103, Missing docstring in public function
ruff,     tests/test_actionlint_tool.py:24:test_actionlint_command_download, ARG005, Unused lambda argument: `cache_root`
ruff,     tests/test_actionlint_tool.py:24:test_actionlint_command_download, ARG005, Unused lambda argument: `version`
ruff,     tests/test_actionlint_tool.py:40:test_actionlint_command_download, S101, Use of `assert` detected
ruff,     tests/test_actionlint_tool.py:41:test_actionlint_command_download, S101, Use of `assert` detected
ruff,     tests/test_banned.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_banned.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_banned.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_banned.py:15:test_checker_detects_terms, D103, Missing docstring in public function
pylint,   tests/test_banned.py:18:test_checker_detects_terms, R2004, Consider using a named constant or an enum instead of ''password123''.
ruff,     tests/test_banned.py:18:test_checker_detects_terms, S101, Use of `assert` detected
ruff,     tests/test_banned.py:21:test_checker_respects_repo_list, D103, Missing docstring in public function
pylint,   tests/test_banned.py:25:test_checker_respects_repo_list, R2004, Consider using a named constant or an enum instead of ''custom-term''.
ruff,     tests/test_banned.py:25:test_checker_respects_repo_list, S101, Use of `assert` detected
ruff,     tests/test_banned.py:28:test_check_banned_words_cli, D103, Missing docstring in public function
ruff,     tests/test_banned.py:35:test_check_banned_words_cli, S101, Use of `assert` detected
pylint,   tests/test_banned.py:36:test_check_banned_words_cli, R2004, Consider using a named constant or an enum instead of ''quick hack''.
ruff,     tests/test_banned.py:36:test_check_banned_words_cli, S101, Use of `assert` detected
ruff,     tests/test_banned.py:39:test_check_banned_words_cli_ok, D103, Missing docstring in public function
ruff,     tests/test_banned.py:46:test_check_banned_words_cli_ok, S101, Use of `assert` detected
pylint,   tests/test_banned.py:47:test_check_banned_words_cli_ok, R2004, Consider using a named constant or an enum instead of ''No banned words''.
ruff,     tests/test_banned.py:47:test_check_banned_words_cli_ok, S101, Use of `assert` detected
ruff,     tests/test_cache.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_cache.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_cache.py:13:make_outcome, D103, Missing docstring in public function
ruff,     tests/test_cache.py:34:test_result_cache_roundtrip, D103, Missing docstring in public function
ruff,     tests/test_cache.py:50:test_result_cache_roundtrip, S106, Possible hardcoded password assigned to argument: "token"
ruff,     tests/test_cache.py:60:test_result_cache_roundtrip, S106, Possible hardcoded password assigned to argument: "token"
ruff,     tests/test_cache.py:63:test_result_cache_roundtrip, S101, Use of `assert` detected
ruff,     tests/test_cache.py:64:test_result_cache_roundtrip, S101, Use of `assert` detected
ruff,     tests/test_cache.py:65:test_result_cache_roundtrip, S101, Use of `assert` detected
ruff,     tests/test_cache.py:67:test_result_cache_roundtrip, S101, Use of `assert` detected
ruff,     tests/test_cache.py:68:test_result_cache_roundtrip, S101, Use of `assert` detected
ruff,     tests/test_cache.py:71:test_result_cache_miss_on_modified_file, D103, Missing docstring in public function
ruff,     tests/test_cache.py:87:test_result_cache_miss_on_modified_file, S106, Possible hardcoded password assigned to argument: "token"
ruff,     tests/test_cache.py:95:test_result_cache_miss_on_modified_file, S101, Use of `assert` detected
ruff,     tests/test_cache.py:101:test_result_cache_miss_on_modified_file, S106, Possible hardcoded password assigned to argument: "token"
ruff,     tests/test_checkmake_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_checkmake_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_checkmake_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_checkmake_tool.py:15:test_checkmake_command_build, D103, Missing docstring in public function
pylint,   tests/test_checkmake_tool.py:34:test_checkmake_command_build, R2004, Consider using a named constant or an enum instead of ''checkmake''.
ruff,     tests/test_checkmake_tool.py:34:test_checkmake_command_build, S101, Use of `assert` detected
pylint,   tests/test_checkmake_tool.py:35:test_checkmake_command_build, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   tests/test_checkmake_tool.py:35:test_checkmake_command_build, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_checkmake_tool.py:35:test_checkmake_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_checkmake_tool.py:35:test_checkmake_command_build, S101, Use of `assert` detected
pylint,   tests/test_checkmake_tool.py:36:test_checkmake_command_build, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_checkmake_tool.py:36:test_checkmake_command_build, S101, Use of `assert` detected
pylint,   tests/test_checkmake_tool.py:37:test_checkmake_command_build, R2004, Consider using a named constant or an enum instead of ''--ignore''.
ruff,     tests/test_checkmake_tool.py:37:test_checkmake_command_build, S101, Use of `assert` detected
ruff,     tests/test_checkmake_tool.py:38:test_checkmake_command_build, S101, Use of `assert` detected
ruff,     tests/test_clean.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_clean.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_clean.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_clean.py:26:test_sparkly_clean_removes_known_patterns, D103, Missing docstring in public function
ruff,     tests/test_clean.py:29:test_sparkly_clean_removes_known_patterns, S101, Use of `assert` detected
ruff,     tests/test_clean.py:30:test_sparkly_clean_removes_known_patterns, S101, Use of `assert` detected
ruff,     tests/test_clean.py:31:test_sparkly_clean_removes_known_patterns, S101, Use of `assert` detected
ruff,     tests/test_clean.py:34:test_cli_dry_run_lists_paths, D103, Missing docstring in public function
ruff,     tests/test_clean.py:47:test_cli_dry_run_lists_paths, S101, Use of `assert` detected
pylint,   tests/test_clean.py:48:test_cli_dry_run_lists_paths, R2004, Consider using a named constant or an enum instead of ''DRY RUN''.
ruff,     tests/test_clean.py:48:test_cli_dry_run_lists_paths, S101, Use of `assert` detected
ruff,     tests/test_cli_config.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_cli_config.py` is part of an implicit namespace package. Add an `__init__.py`.
mypy,     tests/test_cli_config.py:15:test_config_show_outputs_json, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:15:test_config_show_outputs_json, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:15:test_config_show_outputs_json, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:36:test_config_show_outputs_json, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:39:test_config_show_outputs_json, R2004, Consider using a named constant or an enum instead of '3'.
ruff,     tests/test_cli_config.py:39:test_config_show_outputs_json, PLR2004, Magic value used in comparison, consider replacing `3` with a constant variable
ruff,     tests/test_cli_config.py:39:test_config_show_outputs_json, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:40:test_config_show_outputs_json, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_cli_config.py:40:test_config_show_outputs_json, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_cli_config.py:40:test_config_show_outputs_json, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:41:test_config_show_outputs_json, R2004, Consider using a named constant or an enum instead of ''postgresql''.
ruff,     tests/test_cli_config.py:41:test_config_show_outputs_json, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:42:test_config_show_outputs_json, R2004, Consider using a named constant or an enum instead of '88'.
ruff,     tests/test_cli_config.py:42:test_config_show_outputs_json, PLR2004, Magic value used in comparison, consider replacing `88` with a constant variable
ruff,     tests/test_cli_config.py:42:test_config_show_outputs_json, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:45:test_config_validate_failure, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:45:test_config_validate_failure, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:45:test_config_validate_failure, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:62:test_config_validate_failure, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:63:test_config_validate_failure, R2004, Consider using a named constant or an enum instead of ''invalid''.
ruff,     tests/test_cli_config.py:63:test_config_validate_failure, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:66:test_config_schema_markdown, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:66:test_config_schema_markdown, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:66:test_config_schema_markdown, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:73:test_config_schema_markdown, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:74:test_config_schema_markdown, R2004, Consider using a named constant or an enum instead of ''## file_discovery''.
ruff,     tests/test_cli_config.py:74:test_config_schema_markdown, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:75:test_config_schema_markdown, R2004, Consider using a named constant or an enum instead of ''| roots |''.
ruff,     tests/test_cli_config.py:75:test_config_schema_markdown, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:76:test_config_schema_markdown, R2004, Consider using a named constant or an enum instead of ''## tool_settings''.
ruff,     tests/test_cli_config.py:76:test_config_schema_markdown, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:79:test_config_schema_json_tools, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:79:test_config_schema_json_tools, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:79:test_config_schema_json_tools, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:86:test_config_schema_json_tools, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:87:test_config_schema_json_tools, R2004, Consider using a named constant or an enum instead of ''"ruff"''.
ruff,     tests/test_cli_config.py:87:test_config_schema_json_tools, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:88:test_config_schema_json_tools, R2004, Consider using a named constant or an enum instead of ''"black"''.
ruff,     tests/test_cli_config.py:88:test_config_schema_json_tools, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:91:test_config_schema_json_tools_to_file, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:91:test_config_schema_json_tools_to_file, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:91:test_config_schema_json_tools_to_file, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:109:test_config_schema_json_tools_to_file, S101, Use of `assert` detected
ruff,     tests/test_cli_config.py:110:test_config_schema_json_tools_to_file, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:112:test_config_schema_json_tools_to_file, R2004, Consider using a named constant or an enum instead of ''"ruff"''.
ruff,     tests/test_cli_config.py:112:test_config_schema_json_tools_to_file, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:115:test_config_show_trace_includes_descriptions, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:115:test_config_show_trace_includes_descriptions, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:115:test_config_show_trace_includes_descriptions, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:133:test_config_show_trace_includes_descriptions, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:134:test_config_show_trace_includes_descriptions, R2004, Consider using a named constant or an enum instead of ''tool_settings.black''.
ruff,     tests/test_cli_config.py:134:test_config_show_trace_includes_descriptions, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:135:test_config_show_trace_includes_descriptions, R2004, Consider using a named constant or an enum instead of ''line-length''.
ruff,     tests/test_cli_config.py:135:test_config_show_trace_includes_descriptions, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:136:test_config_show_trace_includes_descriptions, R2004, Consider using a named constant or an enum instead of ''Maximum line length enforced by Black''.
ruff,     tests/test_cli_config.py:136:test_config_show_trace_includes_descriptions, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:139:test_config_show_warns_on_unknown_setting, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:139:test_config_show_warns_on_unknown_setting, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:139:test_config_show_warns_on_unknown_setting, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:157:test_config_show_warns_on_unknown_setting, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:158:test_config_show_warns_on_unknown_setting, R2004, Consider using a named constant or an enum instead of ''# Warnings''.
ruff,     tests/test_cli_config.py:158:test_config_show_warns_on_unknown_setting, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:159:test_config_show_warns_on_unknown_setting, R2004, Consider using a named constant or an enum instead of '"Unknown option 'unknown'"'.
ruff,     tests/test_cli_config.py:159:test_config_show_warns_on_unknown_setting, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:162:test_config_show_strict_errors_on_unknown, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:162:test_config_show_strict_errors_on_unknown, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:162:test_config_show_strict_errors_on_unknown, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:180:test_config_show_strict_errors_on_unknown, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:181:test_config_show_strict_errors_on_unknown, R2004, Consider using a named constant or an enum instead of '"Unknown option 'unknown'"'.
ruff,     tests/test_cli_config.py:181:test_config_show_strict_errors_on_unknown, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:184:test_config_diff_defaults_to_final, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:184:test_config_diff_defaults_to_final, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:184:test_config_diff_defaults_to_final, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:200:test_config_diff_defaults_to_final, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:201:test_config_diff_defaults_to_final, R2004, Consider using a named constant or an enum instead of ''"execution.jobs"''.
ruff,     tests/test_cli_config.py:201:test_config_diff_defaults_to_final, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:204:test_config_diff_to_file, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:204:test_config_diff_to_file, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:204:test_config_diff_to_file, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:231:test_config_diff_to_file, S101, Use of `assert` detected
ruff,     tests/test_cli_config.py:232:test_config_diff_to_file, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:234:test_config_diff_to_file, R2004, Consider using a named constant or an enum instead of ''"tool_settings.black.line-length"''.
ruff,     tests/test_cli_config.py:234:test_config_diff_to_file, S101, Use of `assert` detected
mypy,     tests/test_cli_config.py:237:test_config_export_tools, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_config.py:237:test_config_export_tools, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_config.py:237:test_config_export_tools, D103, Missing docstring in public function
ruff,     tests/test_cli_config.py:244:test_config_export_tools, S101, Use of `assert` detected
ruff,     tests/test_cli_config.py:245:test_config_export_tools, S101, Use of `assert` detected
pylint,   tests/test_cli_config.py:247:test_config_export_tools, R2004, Consider using a named constant or an enum instead of ''ruff''.
ruff,     tests/test_cli_config.py:247:test_config_export_tools, S101, Use of `assert` detected
ruff,     tests/test_cli_install.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_cli_install.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_cli_install.py:6:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_cli_install.py:14:test_install_cli_passes_flags, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_install.py:14:test_install_cli_passes_flags, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_install.py:14:test_install_cli_passes_flags, D103, Missing docstring in public function
mypy,     tests/test_cli_install.py:18:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_install.py:23:fake_install, ANN001, Missing type annotation for function argument `on_optional_stub`
ruff,     tests/test_cli_install.py:23:fake_install, ARG001, Unused function argument: `on_optional_stub`
ruff,     tests/test_cli_install.py:24:fake_install, ANN001, Missing type annotation for function argument `on_stub_generation`
ruff,     tests/test_cli_install.py:24:fake_install, ARG001, Unused function argument: `on_stub_generation`
ruff,     tests/test_cli_install.py:43:test_install_cli_passes_flags, S101, Use of `assert` detected
ruff,     tests/test_cli_install.py:44:test_install_cli_passes_flags, S101, Use of `assert` detected
pylint,   tests/test_cli_install.py:45:test_install_cli_passes_flags, R2004, Consider using a named constant or an enum instead of ''Dependency installation complete.''.
ruff,     tests/test_cli_install.py:45:test_install_cli_passes_flags, S101, Use of `assert` detected
pylint,   tests/test_cli_install.py:46:test_install_cli_passes_flags, R2004, Consider using a named constant or an enum instead of ''✅''.
ruff,     tests/test_cli_install.py:46:test_install_cli_passes_flags, S101, Use of `assert` detected
mypy,     tests/test_cli_install.py:49:test_install_cli_emits_progress, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_install.py:49:test_install_cli_emits_progress, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_cli_install.py:49:test_install_cli_emits_progress, D103, Missing docstring in public function
mypy,     tests/test_cli_install.py:52:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_cli_install.py:55:fake_install, ARG001, Unused function argument: `include_optional`
ruff,     tests/test_cli_install.py:56:fake_install, ARG001, Unused function argument: `generate_stubs`
ruff,     tests/test_cli_install.py:57:fake_install, ANN001, Missing type annotation for function argument `on_optional_stub`
ruff,     tests/test_cli_install.py:58:fake_install, ANN001, Missing type annotation for function argument `on_stub_generation`
ruff,     tests/test_cli_install.py:70:test_install_cli_emits_progress, S101, Use of `assert` detected
pylint,   tests/test_cli_install.py:71:test_install_cli_emits_progress, R2004, Consider using a named constant or an enum instead of ''types-requests''.
ruff,     tests/test_cli_install.py:71:test_install_cli_emits_progress, S101, Use of `assert` detected
pylint,   tests/test_cli_install.py:72:test_install_cli_emits_progress, R2004, Consider using a named constant or an enum instead of ''pyarrow''.
ruff,     tests/test_cli_install.py:72:test_install_cli_emits_progress, S101, Use of `assert` detected
ruff,     tests/test_config.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_config.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_config.py:60:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:61:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''HEAD''.
ruff,     tests/test_config.py:61:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:62:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:63:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:64:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:65:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:66:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_config.py:66:test_build_config_defaults, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_config.py:66:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:67:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:68:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:69:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:70:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:71:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of '100'.
ruff,     tests/test_config.py:71:test_build_config_defaults, PLR2004, Magic value used in comparison, consider replacing `100` with a constant variable
ruff,     tests/test_config.py:71:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:72:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_config.py:72:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:73:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:74:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:75:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:76:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''concise''.
ruff,     tests/test_config.py:76:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:77:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:78:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:80:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''.lint-cache''.
ruff,     tests/test_config.py:80:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:81:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''.cache''.
ruff,     tests/test_config.py:81:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:82:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:83:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:84:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_config.py:84:test_build_config_defaults, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_config.py:84:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:85:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_config.py:85:test_build_config_defaults, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_config.py:85:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:86:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''medium''.
ruff,     tests/test_config.py:86:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:87:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of ''medium''.
ruff,     tests/test_config.py:87:test_build_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config.py:88:test_build_config_defaults, R2004, Consider using a named constant or an enum instead of '9.5'.
ruff,     tests/test_config.py:88:test_build_config_defaults, PLR2004, Magic value used in comparison, consider replacing `9.5` with a constant variable
ruff,     tests/test_config.py:88:test_build_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config.py:91:test_build_config_cli_overrides_complexity_and_strictness, D103, Missing docstring in public function
pylint,   tests/test_config.py:124:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '7'.
ruff,     tests/test_config.py:124:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `7` with a constant variable
ruff,     tests/test_config.py:124:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:125:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_config.py:125:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_config.py:125:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:126:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '7'.
ruff,     tests/test_config.py:126:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `7` with a constant variable
ruff,     tests/test_config.py:126:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:127:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_config.py:127:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_config.py:127:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:128:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '7'.
ruff,     tests/test_config.py:128:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `7` with a constant variable
ruff,     tests/test_config.py:128:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:129:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of ''lenient''.
ruff,     tests/test_config.py:129:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
ruff,     tests/test_config.py:130:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
ruff,     tests/test_config.py:131:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:132:test_build_config_cli_overrides_complexity_and_strictness, R6102, Consider using an in-place tuple instead of list
ruff,     tests/test_config.py:141:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
ruff,     tests/test_config.py:142:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:143:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of ''high''.
ruff,     tests/test_config.py:143:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:144:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:144:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:145:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of ''high''.
ruff,     tests/test_config.py:145:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:146:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:146:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
pylint,   tests/test_config.py:147:test_build_config_cli_overrides_complexity_and_strictness, R2004, Consider using a named constant or an enum instead of '8.0'.
ruff,     tests/test_config.py:147:test_build_config_cli_overrides_complexity_and_strictness, PLR2004, Magic value used in comparison, consider replacing `8.0` with a constant variable
ruff,     tests/test_config.py:147:test_build_config_cli_overrides_complexity_and_strictness, S101, Use of `assert` detected
ruff,     tests/test_config.py:150:test_sensitivity_low_adjusts_shared_knobs, D103, Missing docstring in public function
pylint,   tests/test_config.py:172:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '140'.
ruff,     tests/test_config.py:172:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `140` with a constant variable
ruff,     tests/test_config.py:172:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:173:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '15'.
ruff,     tests/test_config.py:173:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `15` with a constant variable
ruff,     tests/test_config.py:173:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:174:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '7'.
ruff,     tests/test_config.py:174:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `7` with a constant variable
ruff,     tests/test_config.py:174:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:175:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of ''lenient''.
ruff,     tests/test_config.py:175:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:176:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:176:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:177:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:177:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:178:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '8.0'.
ruff,     tests/test_config.py:178:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `8.0` with a constant variable
ruff,     tests/test_config.py:178:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:179:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '200'.
ruff,     tests/test_config.py:179:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `200` with a constant variable
ruff,     tests/test_config.py:179:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
ruff,     tests/test_config.py:180:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
ruff,     tests/test_config.py:181:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:182:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '15'.
ruff,     tests/test_config.py:182:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `15` with a constant variable
ruff,     tests/test_config.py:182:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:183:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '15'.
ruff,     tests/test_config.py:183:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `15` with a constant variable
ruff,     tests/test_config.py:183:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:184:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of '200'.
ruff,     tests/test_config.py:184:test_sensitivity_low_adjusts_shared_knobs, PLR2004, Magic value used in comparison, consider replacing `200` with a constant variable
ruff,     tests/test_config.py:184:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:185:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:185:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
pylint,   tests/test_config.py:186:test_sensitivity_low_adjusts_shared_knobs, R2004, Consider using a named constant or an enum instead of ''low''.
ruff,     tests/test_config.py:186:test_sensitivity_low_adjusts_shared_knobs, S101, Use of `assert` detected
ruff,     tests/test_config.py:189:test_sensitivity_maximum_sets_ruff_select_all, D103, Missing docstring in public function
ruff,     tests/test_config.py:211:test_sensitivity_maximum_sets_ruff_select_all, S101, Use of `assert` detected
ruff,     tests/test_config.py:212:test_sensitivity_maximum_sets_ruff_select_all, S101, Use of `assert` detected
ruff,     tests/test_config.py:215:test_sensitivity_maximum_does_not_override_existing_ruff_select, D103, Missing docstring in public function
ruff,     tests/test_config.py:223:test_sensitivity_maximum_does_not_override_existing_ruff_select, S101, Use of `assert` detected
ruff,     tests/test_config.py:224:test_sensitivity_maximum_does_not_override_existing_ruff_select, S101, Use of `assert` detected
ruff,     tests/test_config.py:227:test_sensitivity_respects_explicit_line_length_override, D103, Missing docstring in public function
pylint,   tests/test_config.py:250:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of '150'.
ruff,     tests/test_config.py:250:test_sensitivity_respects_explicit_line_length_override, PLR2004, Magic value used in comparison, consider replacing `150` with a constant variable
ruff,     tests/test_config.py:250:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
pylint,   tests/test_config.py:251:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of '6'.
ruff,     tests/test_config.py:251:test_sensitivity_respects_explicit_line_length_override, PLR2004, Magic value used in comparison, consider replacing `6` with a constant variable
ruff,     tests/test_config.py:251:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
pylint,   tests/test_config.py:252:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of '3'.
ruff,     tests/test_config.py:252:test_sensitivity_respects_explicit_line_length_override, PLR2004, Magic value used in comparison, consider replacing `3` with a constant variable
ruff,     tests/test_config.py:252:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
pylint,   tests/test_config.py:253:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of ''strict''.
ruff,     tests/test_config.py:253:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
pylint,   tests/test_config.py:254:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of ''high''.
ruff,     tests/test_config.py:254:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
ruff,     tests/test_config.py:255:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
pylint,   tests/test_config.py:256:test_sensitivity_respects_explicit_line_length_override, R2004, Consider using a named constant or an enum instead of '150'.
ruff,     tests/test_config.py:256:test_sensitivity_respects_explicit_line_length_override, PLR2004, Magic value used in comparison, consider replacing `150` with a constant variable
ruff,     tests/test_config.py:256:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
ruff,     tests/test_config.py:257:test_sensitivity_respects_explicit_line_length_override, S101, Use of `assert` detected
ruff,     tests/test_config.py:260:test_python_version_from_python_version_file, D103, Missing docstring in public function
pylint,   tests/test_config.py:281:test_python_version_from_python_version_file, R2004, Consider using a named constant or an enum instead of ''3.11''.
ruff,     tests/test_config.py:281:test_python_version_from_python_version_file, S101, Use of `assert` detected
ruff,     tests/test_config.py:284:test_python_version_from_pyproject_overrides_all, D103, Missing docstring in public function
pylint,   tests/test_config.py:312:test_python_version_from_pyproject_overrides_all, R2004, Consider using a named constant or an enum instead of ''3.12''.
ruff,     tests/test_config.py:312:test_python_version_from_pyproject_overrides_all, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_config_loader.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_config_loader.py:15:test_load_config_defaults, D103, Missing docstring in public function
ruff,     tests/test_config_loader.py:25:test_load_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:26:test_load_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:27:test_load_config_defaults, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_config_loader.py:27:test_load_config_defaults, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_config_loader.py:27:test_load_config_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:28:test_load_config_defaults, R2004, Consider using a named constant or an enum instead of ''postgresql''.
ruff,     tests/test_config_loader.py:28:test_load_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:29:test_load_config_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:32:test_config_loader_merges_user_and_project, D103, Missing docstring in public function
ruff,     tests/test_config_loader.py:77:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:78:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:79:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:81:test_config_loader_merges_user_and_project, R2004, Consider using a named constant or an enum instead of '9'.
ruff,     tests/test_config_loader.py:81:test_config_loader_merges_user_and_project, PLR2004, Magic value used in comparison, consider replacing `9` with a constant variable
ruff,     tests/test_config_loader.py:81:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:83:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:84:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:85:test_config_loader_merges_user_and_project, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:88:test_config_loader_invalid_severity, D103, Missing docstring in public function
ruff,     tests/test_config_loader.py:110:test_config_loader_supports_includes, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:141:test_config_loader_supports_includes, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_config_loader.py:141:test_config_loader_supports_includes, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_config_loader.py:141:test_config_loader_supports_includes, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:142:test_config_loader_supports_includes, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:143:test_config_loader_supports_includes, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:146:test_config_loader_supports_includes, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:149:test_config_loader_expands_environment, D103, Missing docstring in public function
ruff,     tests/test_config_loader.py:166:test_config_loader_expands_environment, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:169:test_pyproject_tool_section_is_loaded, D103, Missing docstring in public function
ruff,     tests/test_config_loader.py:187:test_pyproject_tool_section_is_loaded, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:188:test_pyproject_tool_section_is_loaded, R2004, Consider using a named constant or an enum instead of '7'.
ruff,     tests/test_config_loader.py:188:test_pyproject_tool_section_is_loaded, PLR2004, Magic value used in comparison, consider replacing `7` with a constant variable
ruff,     tests/test_config_loader.py:188:test_pyproject_tool_section_is_loaded, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:191:test_load_with_trace_reports_sources, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:206:test_load_with_trace_reports_sources, R2004, Consider using a named constant or an enum instead of '11'.
ruff,     tests/test_config_loader.py:206:test_load_with_trace_reports_sources, PLR2004, Magic value used in comparison, consider replacing `11` with a constant variable
ruff,     tests/test_config_loader.py:206:test_load_with_trace_reports_sources, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:207:test_load_with_trace_reports_sources, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_config_loader.py:207:test_load_with_trace_reports_sources, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_config_loader.py:207:test_load_with_trace_reports_sources, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:209:test_load_with_trace_reports_sources, R2004, Consider using a named constant or an enum instead of ''jobs''.
ruff,     tests/test_config_loader.py:210:test_load_with_trace_reports_sources, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:213:test_generate_config_schema_exposes_defaults, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:216:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''file_discovery''.
ruff,     tests/test_config_loader.py:216:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:217:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:218:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:220:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_config_loader.py:220:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_config_loader.py:220:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:221:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_config_loader.py:221:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_config_loader.py:221:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:222:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_config_loader.py:222:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_config_loader.py:222:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:223:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:224:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:225:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:227:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''max-complexity''.
ruff,     tests/test_config_loader.py:227:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:228:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''max-args''.
ruff,     tests/test_config_loader.py:228:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:229:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''max-cyclomatic-complexity''.
ruff,     tests/test_config_loader.py:229:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:230:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_config_loader.py:230:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_config_loader.py:230:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:231:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''strict''.
ruff,     tests/test_config_loader.py:231:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:232:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '120'.
ruff,     tests/test_config_loader.py:232:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `120` with a constant variable
ruff,     tests/test_config_loader.py:232:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:233:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''medium''.
ruff,     tests/test_config_loader.py:233:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:234:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of '9.5'.
ruff,     tests/test_config_loader.py:234:test_generate_config_schema_exposes_defaults, PLR2004, Magic value used in comparison, consider replacing `9.5` with a constant variable
ruff,     tests/test_config_loader.py:234:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:235:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''tools''.
ruff,     tests/test_config_loader.py:235:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:236:test_generate_config_schema_exposes_defaults, R2004, Consider using a named constant or an enum instead of ''ruff''.
ruff,     tests/test_config_loader.py:236:test_generate_config_schema_exposes_defaults, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:239:test_tool_settings_warnings, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:256:test_tool_settings_warnings, R2004, Consider using a named constant or an enum instead of ''unknown option''.
ruff,     tests/test_config_loader.py:256:test_tool_settings_warnings, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:262:test_tool_settings_merge_precedence, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:306:test_tool_settings_merge_precedence, R2004, Consider using a named constant or an enum instead of ''basic''.
ruff,     tests/test_config_loader.py:306:test_tool_settings_merge_precedence, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:308:test_tool_settings_merge_precedence, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:309:test_tool_settings_merge_precedence, R2004, Consider using a named constant or an enum instead of '88'.
ruff,     tests/test_config_loader.py:309:test_tool_settings_merge_precedence, PLR2004, Magic value used in comparison, consider replacing `88` with a constant variable
ruff,     tests/test_config_loader.py:309:test_tool_settings_merge_precedence, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:310:test_tool_settings_merge_precedence, R2004, Consider using a named constant or an enum instead of ''py311''.
ruff,     tests/test_config_loader.py:310:test_tool_settings_merge_precedence, S101, Use of `assert` detected
ruff,     tests/test_config_loader.py:313:test_auto_discover_tool_settings, D103, Missing docstring in public function
pylint,   tests/test_config_loader.py:322:test_auto_discover_tool_settings, R2004, Consider using a named constant or an enum instead of ''ruff.toml''.
ruff,     tests/test_config_loader.py:322:test_auto_discover_tool_settings, S101, Use of `assert` detected
pylint,   tests/test_config_loader.py:323:test_auto_discover_tool_settings, R2004, Consider using a named constant or an enum instead of ''auto''.
ruff,     tests/test_config_loader.py:323:test_auto_discover_tool_settings, S101, Use of `assert` detected
ruff,     tests/test_context.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_context.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_context.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_context.py:14:import, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_context.py:25:test_python_context, D103, Missing docstring in public function
ruff,     tests/test_context.py:48:fail_fallback, ARG001, Unused function argument: `line`
ruff,     tests/test_context.py:48:fail_fallback, ARG001, Unused function argument: `path`
ruff,     tests/test_context.py:49:fail_fallback, EM101, Exception must not use a string literal, assign to variable first
ruff,     tests/test_context.py:49:fail_fallback, TRY003, Avoid specifying long messages outside the exception class
pylint,   tests/test_context.py:55:test_python_context, R2004, Consider using a named constant or an enum instead of ''inner''.
ruff,     tests/test_context.py:55:test_python_context, S101, Use of `assert` detected
ruff,     tests/test_context.py:56:test_python_context, S101, Use of `assert` detected
ruff,     tests/test_context.py:56:test_python_context, SLF001, Private member accessed: `_disabled`
ruff,     tests/test_context.py:59:test_markdown_context, D103, Missing docstring in public function
ruff,     tests/test_context.py:85:fail_fallback, ARG001, Unused function argument: `line`
ruff,     tests/test_context.py:85:fail_fallback, ARG001, Unused function argument: `path`
ruff,     tests/test_context.py:86:fail_fallback, EM101, Exception must not use a string literal, assign to variable first
ruff,     tests/test_context.py:86:fail_fallback, TRY003, Avoid specifying long messages outside the exception class
pylint,   tests/test_context.py:96:test_markdown_context, R2004, Consider using a named constant or an enum instead of ''Section''.
ruff,     tests/test_context.py:96:test_markdown_context, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_cpplint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_cpplint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_cpplint_tool.py:15:test_cpplint_command_build, D103, Missing docstring in public function
pylint,   tests/test_cpplint_tool.py:42:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''cpplint''.
ruff,     tests/test_cpplint_tool.py:42:test_cpplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_cpplint_tool.py:43:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''--output=emacs''.
ruff,     tests/test_cpplint_tool.py:43:test_cpplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_cpplint_tool.py:44:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''--linelength=140''.
ruff,     tests/test_cpplint_tool.py:44:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:45:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:46:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:47:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:48:test_cpplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_cpplint_tool.py:49:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''--recursive''.
ruff,     tests/test_cpplint_tool.py:49:test_cpplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_cpplint_tool.py:50:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''--counting=detailed''.
ruff,     tests/test_cpplint_tool.py:50:test_cpplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_cpplint_tool.py:51:test_cpplint_command_build, R2004, Consider using a named constant or an enum instead of ''--includeorder=standardcfirst''.
ruff,     tests/test_cpplint_tool.py:51:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_cpplint_tool.py:52:test_cpplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_diagnostics.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_diagnostics.py:17:test_normalize_diagnostics_applies_rules, D103, Missing docstring in public function
ruff,     tests/test_diagnostics.py:31:test_normalize_diagnostics_applies_rules, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:33:test_normalize_diagnostics_applies_rules, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:34:test_normalize_diagnostics_applies_rules, S101, Use of `assert` detected
pylint,   tests/test_diagnostics.py:35:test_normalize_diagnostics_applies_rules, R2004, Consider using a named constant or an enum instead of ''pylint''.
ruff,     tests/test_diagnostics.py:35:test_normalize_diagnostics_applies_rules, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:38:test_dedupe_prefers_higher_severity, D103, Missing docstring in public function
ruff,     tests/test_diagnostics.py:84:test_dedupe_prefers_higher_severity, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:85:test_dedupe_prefers_higher_severity, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:88:test_dedupe_prefer_list, D103, Missing docstring in public function
ruff,     tests/test_diagnostics.py:139:test_dedupe_prefer_list, S101, Use of `assert` detected
ruff,     tests/test_diagnostics.py:140:test_dedupe_prefer_list, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_discovery.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_discovery.py:13:test_filesystem_discovery_respects_excludes, D103, Missing docstring in public function
ruff,     tests/test_discovery.py:35:test_filesystem_discovery_respects_excludes, S101, Use of `assert` detected
pylint,   tests/test_discovery.py:36:test_filesystem_discovery_respects_excludes, R2004, Consider using a named constant or an enum instead of ''ignored.js''.
ruff,     tests/test_discovery.py:36:test_filesystem_discovery_respects_excludes, S101, Use of `assert` detected
pylint,   tests/test_discovery.py:37:test_filesystem_discovery_respects_excludes, R2004, Consider using a named constant or an enum instead of ''machine.py''.
ruff,     tests/test_discovery.py:37:test_filesystem_discovery_respects_excludes, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:40:test_filesystem_discovery_skips_embedded_py_qa, D103, Missing docstring in public function
ruff,     tests/test_discovery.py:55:test_filesystem_discovery_skips_embedded_py_qa, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:56:test_filesystem_discovery_skips_embedded_py_qa, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:59:test_filesystem_discovery_includes_py_qa_workspace, D103, Missing docstring in public function
ruff,     tests/test_discovery.py:70:test_filesystem_discovery_includes_py_qa_workspace, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:73:test_filesystem_discovery_respects_limit_to, D103, Missing docstring in public function
ruff,     tests/test_discovery.py:94:test_filesystem_discovery_respects_limit_to, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:95:test_filesystem_discovery_respects_limit_to, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:98:test_git_discovery_limit_to_filters_changes, D103, Missing docstring in public function
ruff,     tests/test_discovery.py:110:test_git_discovery_limit_to_filters_changes, S607, Starting a process with a partial executable path
ruff,     tests/test_discovery.py:112:test_git_discovery_limit_to_filters_changes, S607, Starting a process with a partial executable path
ruff,     tests/test_discovery.py:118:test_git_discovery_limit_to_filters_changes, S607, Starting a process with a partial executable path
ruff,     tests/test_discovery.py:123:test_git_discovery_limit_to_filters_changes, S607, Starting a process with a partial executable path
ruff,     tests/test_discovery.py:125:test_git_discovery_limit_to_filters_changes, S607, Starting a process with a partial executable path
ruff,     tests/test_discovery.py:144:test_git_discovery_limit_to_filters_changes, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:145:test_git_discovery_limit_to_filters_changes, S101, Use of `assert` detected
ruff,     tests/test_discovery.py:146:test_git_discovery_limit_to_filters_changes, S101, Use of `assert` detected
ruff,     tests/test_dockerfilelint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_dockerfilelint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_dockerfilelint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_dockerfilelint_tool.py:15:test_dockerfilelint_command_build, D103, Missing docstring in public function
pylint,   tests/test_dockerfilelint_tool.py:31:test_dockerfilelint_command_build, R2004, Consider using a named constant or an enum instead of ''dockerfilelint''.
ruff,     tests/test_dockerfilelint_tool.py:31:test_dockerfilelint_command_build, S101, Use of `assert` detected
pylint,   tests/test_dockerfilelint_tool.py:32:test_dockerfilelint_command_build, R2004, Consider using a named constant or an enum instead of ''--output''.
pylint,   tests/test_dockerfilelint_tool.py:32:test_dockerfilelint_command_build, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_dockerfilelint_tool.py:32:test_dockerfilelint_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_dockerfilelint_tool.py:32:test_dockerfilelint_command_build, S101, Use of `assert` detected
pylint,   tests/test_dockerfilelint_tool.py:33:test_dockerfilelint_command_build, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_dockerfilelint_tool.py:33:test_dockerfilelint_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_dockerfilelint_tool.py:33:test_dockerfilelint_command_build, S101, Use of `assert` detected
ruff,     tests/test_dockerfilelint_tool.py:34:test_dockerfilelint_command_build, S101, Use of `assert` detected
ruff,     tests/test_doctor.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_doctor.py` is part of an implicit namespace package. Add an `__init__.py`.
mypy,     tests/test_doctor.py:13:test_doctor_option, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_doctor.py:13:test_doctor_option, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_doctor.py:13:test_doctor_option, D103, Missing docstring in public function
mypy,     tests/test_doctor.py:16:fake_run_doctor, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_doctor.py:16:fake_run_doctor, ANN001, Missing type annotation for function argument `root`
ruff,     tests/test_doctor.py:16:fake_run_doctor, ANN202, Missing return type annotation for private function `fake_run_doctor`
ruff,     tests/test_doctor.py:17:fake_run_doctor, T201, `print` found
ruff,     tests/test_doctor.py:24:test_doctor_option, S101, Use of `assert` detected
pylint,   tests/test_doctor.py:25:test_doctor_option, R2004, Consider using a named constant or an enum instead of ''doctor invoked''.
ruff,     tests/test_doctor.py:25:test_doctor_option, S101, Use of `assert` detected
ruff,     tests/test_dotenv_linter_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_dotenv_linter_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_dotenv_linter_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_dotenv_linter_tool.py:15:test_dotenv_linter_command_build, D103, Missing docstring in public function
pylint,   tests/test_dotenv_linter_tool.py:37:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''dotenv-linter''.
ruff,     tests/test_dotenv_linter_tool.py:37:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:38:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--no-color''.
ruff,     tests/test_dotenv_linter_tool.py:38:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:39:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--quiet''.
ruff,     tests/test_dotenv_linter_tool.py:39:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:40:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--exclude''.
ruff,     tests/test_dotenv_linter_tool.py:40:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:41:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--skip''.
ruff,     tests/test_dotenv_linter_tool.py:41:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:42:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--schema''.
ruff,     tests/test_dotenv_linter_tool.py:42:test_dotenv_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_dotenv_linter_tool.py:43:test_dotenv_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--recursive''.
ruff,     tests/test_dotenv_linter_tool.py:43:test_dotenv_linter_command_build, S101, Use of `assert` detected
ruff,     tests/test_dotenv_linter_tool.py:44:test_dotenv_linter_command_build, S101, Use of `assert` detected
ruff,     tests/test_golangci_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_golangci_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_golangci_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_golangci_tool.py:15:test_golangci_command_includes_enable_all, D103, Missing docstring in public function
pylint,   tests/test_golangci_tool.py:31:test_golangci_command_includes_enable_all, R2004, Consider using a named constant or an enum instead of ''--enable-all''.
ruff,     tests/test_golangci_tool.py:31:test_golangci_command_includes_enable_all, S101, Use of `assert` detected
pylint,   tests/test_golangci_tool.py:32:test_golangci_command_includes_enable_all, R2004, Consider using a named constant or an enum instead of ''--disable''.
ruff,     tests/test_golangci_tool.py:32:test_golangci_command_includes_enable_all, S101, Use of `assert` detected
ruff,     tests/test_golangci_tool.py:35:test_golangci_respects_disable_enable_all_flag, D103, Missing docstring in public function
pylint,   tests/test_golangci_tool.py:51:test_golangci_respects_disable_enable_all_flag, R2004, Consider using a named constant or an enum instead of ''--enable-all''.
ruff,     tests/test_golangci_tool.py:51:test_golangci_respects_disable_enable_all_flag, S101, Use of `assert` detected
ruff,     tests/test_gts_tool.py:1:# SPDX-License-Identifier: MIT, D100, Missing docstring in public module
ruff,     tests/test_gts_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_gts_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_gts_tool.py:6:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_gts_tool.py:20:test_gts_command_adds_files_and_json_format, D103, Missing docstring in public function
ruff,     tests/test_gts_tool.py:34:test_gts_command_adds_files_and_json_format, S101, Use of `assert` detected
ruff,     tests/test_gts_tool.py:35:test_gts_command_adds_files_and_json_format, S101, Use of `assert` detected
ruff,     tests/test_gts_tool.py:38:test_gts_command_with_settings, D103, Missing docstring in public function
pylint,   tests/test_gts_tool.py:49:test_gts_command_with_settings, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_gts_tool.py:49:test_gts_command_with_settings, S101, Use of `assert` detected
ruff,     tests/test_gts_tool.py:50:test_gts_command_with_settings, S101, Use of `assert` detected
pylint,   tests/test_gts_tool.py:51:test_gts_command_with_settings, R2004, Consider using a named constant or an enum instead of ''--project''.
ruff,     tests/test_gts_tool.py:51:test_gts_command_with_settings, S101, Use of `assert` detected
ruff,     tests/test_gts_tool.py:52:test_gts_command_with_settings, S101, Use of `assert` detected
pylint,   tests/test_gts_tool.py:53:test_gts_command_with_settings, R2004, Consider using a named constant or an enum instead of ''--quiet''.
ruff,     tests/test_gts_tool.py:53:test_gts_command_with_settings, S101, Use of `assert` detected
ruff,     tests/test_hadolint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_hadolint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_hadolint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_hadolint_tool.py:10:import, TC002, Move third-party import `pytest` into a type-checking block
ruff,     tests/test_hadolint_tool.py:17:test_hadolint_command_download, D103, Missing docstring in public function
ruff,     tests/test_hadolint_tool.py:25:test_hadolint_command_download, ARG005, Unused lambda argument: `cache_root`
ruff,     tests/test_hadolint_tool.py:25:test_hadolint_command_download, ARG005, Unused lambda argument: `version`
ruff,     tests/test_hadolint_tool.py:43:test_hadolint_command_download, S101, Use of `assert` detected
pylint,   tests/test_hadolint_tool.py:44:test_hadolint_command_download, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   tests/test_hadolint_tool.py:44:test_hadolint_command_download, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_hadolint_tool.py:44:test_hadolint_command_download, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_hadolint_tool.py:44:test_hadolint_command_download, S101, Use of `assert` detected
pylint,   tests/test_hadolint_tool.py:45:test_hadolint_command_download, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_hadolint_tool.py:45:test_hadolint_command_download, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_hadolint_tool.py:45:test_hadolint_command_download, S101, Use of `assert` detected
ruff,     tests/test_hadolint_tool.py:46:test_hadolint_command_download, S101, Use of `assert` detected
ruff,     tests/test_hooks.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_hooks.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_hooks.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_hooks.py:28:test_install_hooks_creates_symlinks, D103, Missing docstring in public function
ruff,     tests/test_hooks.py:31:test_install_hooks_creates_symlinks, S101, Use of `assert` detected
ruff,     tests/test_hooks.py:34:test_install_hooks_creates_symlinks, S101, Use of `assert` detected
ruff,     tests/test_hooks.py:35:test_install_hooks_creates_symlinks, S101, Use of `assert` detected
ruff,     tests/test_hooks.py:38:test_cli_dry_run, D103, Missing docstring in public function
ruff,     tests/test_hooks.py:50:test_cli_dry_run, S101, Use of `assert` detected
pylint,   tests/test_hooks.py:51:test_cli_dry_run, R2004, Consider using a named constant or an enum instead of ''Dry run''.
ruff,     tests/test_hooks.py:51:test_cli_dry_run, S101, Use of `assert` detected
ruff,     tests/test_installs.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_installs.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_installs.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_installs.py:23:test_install_dev_environment_installs_core_packages, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_installs.py:23:test_install_dev_environment_installs_core_packages, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_installs.py:23:test_install_dev_environment_installs_core_packages, D103, Missing docstring in public function
mypy,     tests/test_installs.py:26:fake_run_command, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_installs.py:26:fake_run_command, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_installs.py:26:fake_run_command, ANN202, Missing return type annotation for private function `fake_run_command`
ruff,     tests/test_installs.py:26:fake_run_command, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_installs.py:38:test_install_dev_environment_installs_core_packages, S101, Use of `assert` detected
pylint,   tests/test_installs.py:39:test_install_dev_environment_installs_core_packages, C1803, "summary.optional_stub_packages == ()" can be simplified to "not summary.optional_stub_packages", if it is strictly a sequence, as an empty tuple is falsey
ruff,     tests/test_installs.py:39:test_install_dev_environment_installs_core_packages, S101, Use of `assert` detected
pylint,   tests/test_installs.py:40:test_install_dev_environment_installs_core_packages, C1803, "summary.generated_stub_modules == ()" can be simplified to "not summary.generated_stub_modules", if it is strictly a sequence, as an empty tuple is falsey
ruff,     tests/test_installs.py:40:test_install_dev_environment_installs_core_packages, S101, Use of `assert` detected
ruff,     tests/test_installs.py:42:test_install_dev_environment_installs_core_packages, S101, Use of `assert` detected
mypy,     tests/test_installs.py:45:test_install_dev_environment_handles_optional_and_stubs, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_installs.py:45:test_install_dev_environment_handles_optional_and_stubs, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_installs.py:45:test_install_dev_environment_handles_optional_and_stubs, D103, Missing docstring in public function
mypy,     tests/test_installs.py:48:fake_run_command, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_installs.py:48:fake_run_command, ANN202, Missing return type annotation for private function `fake_run_command`
ruff,     tests/test_installs.py:49:fake_run_command, ANN001, Missing type annotation for function argument `args`
ruff,     tests/test_installs.py:50:fake_run_command, ANN001, Missing type annotation for function argument `cwd`
ruff,     tests/test_installs.py:50:fake_run_command, ARG001, Unused function argument: `cwd`
ruff,     tests/test_installs.py:51:fake_run_command, ANN001, Missing type annotation for function argument `check`
ruff,     tests/test_installs.py:51:fake_run_command, ARG001, Unused function argument: `check`
ruff,     tests/test_installs.py:51:fake_run_command, FBT002, Boolean default positional argument in function definition
ruff,     tests/test_installs.py:52:fake_run_command, ANN001, Missing type annotation for function argument `capture_output`
ruff,     tests/test_installs.py:52:fake_run_command, FBT002, Boolean default positional argument in function definition
ruff,     tests/test_installs.py:53:fake_run_command, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_installs.py:53:fake_run_command, ARG001, Unused function argument: `kwargs`
pylint,   tests/test_installs.py:72:test_install_dev_environment_handles_optional_and_stubs, R2004, Consider using a named constant or an enum instead of ''types-requests''.
ruff,     tests/test_installs.py:72:test_install_dev_environment_handles_optional_and_stubs, S101, Use of `assert` detected
pylint,   tests/test_installs.py:73:test_install_dev_environment_handles_optional_and_stubs, R2004, Consider using a named constant or an enum instead of ''pyarrow''.
ruff,     tests/test_installs.py:73:test_install_dev_environment_handles_optional_and_stubs, S101, Use of `assert` detected
pylint,   tests/test_installs.py:75:test_install_dev_environment_handles_optional_and_stubs, R2004, Consider using a named constant or an enum instead of ''types-requests''.
ruff,     tests/test_installs.py:75:test_install_dev_environment_handles_optional_and_stubs, S101, Use of `assert` detected
ruff,     tests/test_installs.py:77:test_install_dev_environment_handles_optional_and_stubs, S101, Use of `assert` detected
pylint,   tests/test_installs.py:92:test_install_dev_environment_handles_optional_and_stubs, C1803, "summary_again.generated_stub_modules == ()" can be simplified to "not summary_again.generated_stub_modules", if it is strictly a sequence, as an empty tuple is falsey
ruff,     tests/test_installs.py:92:test_install_dev_environment_handles_optional_and_stubs, S101, Use of `assert` detected
ruff,     tests/test_kube_linter_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_kube_linter_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_kube_linter_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_kube_linter_tool.py:15:test_kube_linter_command_build, D103, Missing docstring in public function
ruff,     tests/test_kube_linter_tool.py:37:test_kube_linter_command_build, S101, Use of `assert` detected
pylint,   tests/test_kube_linter_tool.py:38:test_kube_linter_command_build, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_kube_linter_tool.py:38:test_kube_linter_command_build, S101, Use of `assert` detected
ruff,     tests/test_kube_linter_tool.py:39:test_kube_linter_command_build, S101, Use of `assert` detected
ruff,     tests/test_kube_linter_tool.py:40:test_kube_linter_command_build, S101, Use of `assert` detected
ruff,     tests/test_languages.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_languages.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_languages.py:10:test_detect_languages_by_extension, D103, Missing docstring in public function
pylint,   tests/test_languages.py:20:test_detect_languages_by_extension, R2004, Consider using a named constant or an enum instead of ''python''.
ruff,     tests/test_languages.py:20:test_detect_languages_by_extension, S101, Use of `assert` detected
pylint,   tests/test_languages.py:21:test_detect_languages_by_extension, R2004, Consider using a named constant or an enum instead of ''javascript''.
ruff,     tests/test_languages.py:21:test_detect_languages_by_extension, S101, Use of `assert` detected
ruff,     tests/test_languages.py:24:test_detect_languages_by_marker, D103, Missing docstring in public function
ruff,     tests/test_languages.py:30:test_detect_languages_by_marker, S101, Use of `assert` detected
ruff,     tests/test_languages.py:33:test_detect_github_actions_marker, D103, Missing docstring in public function
pylint,   tests/test_languages.py:39:test_detect_github_actions_marker, R2004, Consider using a named constant or an enum instead of ''github-actions''.
ruff,     tests/test_languages.py:39:test_detect_github_actions_marker, S101, Use of `assert` detected
ruff,     tests/test_languages.py:42:test_detect_cpp_language, D103, Missing docstring in public function
pylint,   tests/test_languages.py:50:test_detect_cpp_language, R2004, Consider using a named constant or an enum instead of ''cpp''.
ruff,     tests/test_languages.py:50:test_detect_cpp_language, S101, Use of `assert` detected
ruff,     tests/test_languages.py:53:test_detect_toml_language, D103, Missing docstring in public function
pylint,   tests/test_languages.py:59:test_detect_toml_language, R2004, Consider using a named constant or an enum instead of ''toml''.
ruff,     tests/test_languages.py:59:test_detect_toml_language, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_lint_cli.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_lint_cli.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_lint_cli.py:24:test_lint_warns_when_py_qa_path_outside_workspace, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_lint_cli.py:24:test_lint_warns_when_py_qa_path_outside_workspace, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_lint_cli.py:24:test_lint_warns_when_py_qa_path_outside_workspace, D103, Missing docstring in public function
mypy,     tests/test_lint_cli.py:33:fake_run_tool_info, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ANN001, Missing type annotation for function argument `cfg`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ANN001, Missing type annotation for function argument `console`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ANN001, Missing type annotation for function argument `root`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ANN001, Missing type annotation for function argument `tool_name`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ANN202, Missing return type annotation for private function `fake_run_tool_info`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ARG001, Unused function argument: `cfg`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ARG001, Unused function argument: `console`
ruff,     tests/test_lint_cli.py:33:fake_run_tool_info, ARG001, Unused function argument: `root`
pylint,   tests/test_lint_cli.py:34:fake_run_tool_info, R2004, Consider using a named constant or an enum instead of ''ruff''.
ruff,     tests/test_lint_cli.py:34:fake_run_tool_info, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:52:test_lint_warns_when_py_qa_path_outside_workspace, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:53:test_lint_warns_when_py_qa_path_outside_workspace, R2004, Consider using a named constant or an enum instead of '"'py_qa' directories are skipped"'.
ruff,     tests/test_lint_cli.py:53:test_lint_warns_when_py_qa_path_outside_workspace, S101, Use of `assert` detected
mypy,     tests/test_lint_cli.py:56:test_lint_fetch_all_tools_flag, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_lint_cli.py:56:test_lint_fetch_all_tools_flag, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_lint_cli.py:56:test_lint_fetch_all_tools_flag, D103, Missing docstring in public function
mypy,     tests/test_lint_cli.py:60:test_lint_fetch_all_tools_flag, type-arg, Missing type parameters for generic type "tuple"
mypy,     tests/test_lint_cli.py:62:fake_fetch, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_lint_cli.py:62:fake_fetch, ANN202, Missing return type annotation for private function `fake_fetch`
ruff,     tests/test_lint_cli.py:62:fake_fetch, ARG001, Unused function argument: `self`
ruff,     tests/test_lint_cli.py:82:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:83:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:84:test_lint_fetch_all_tools_flag, R2004, Consider using a named constant or an enum instead of ''Tool Preparation''.
ruff,     tests/test_lint_cli.py:84:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:85:test_lint_fetch_all_tools_flag, R2004, Consider using a named constant or an enum instead of ''demo''.
ruff,     tests/test_lint_cli.py:85:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:86:test_lint_fetch_all_tools_flag, R2004, Consider using a named constant or an enum instead of ''lint''.
ruff,     tests/test_lint_cli.py:86:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:87:test_lint_fetch_all_tools_flag, R2004, Consider using a named constant or an enum instead of ''ready''.
ruff,     tests/test_lint_cli.py:87:test_lint_fetch_all_tools_flag, S101, Use of `assert` detected
mypy,     tests/test_lint_cli.py:90:test_lint_no_stats_flag, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_lint_cli.py:90:test_lint_no_stats_flag, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_lint_cli.py:90:test_lint_no_stats_flag, D103, Missing docstring in public function
mypy,     tests/test_lint_cli.py:94:test_lint_no_stats_flag, attr-defined, Module "pyqa.cli.lint" does not explicitly export attribute "build_config"
mypy,     tests/test_lint_cli.py:96:fake_build_config, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_lint_cli.py:96:fake_build_config, ANN001, Missing type annotation for function argument `options`
ruff,     tests/test_lint_cli.py:96:fake_build_config, ANN202, Missing return type annotation for private function `fake_build_config`
mypy,     tests/test_lint_cli.py:100:fake_run, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_lint_cli.py:100:fake_run, ANN202, Missing return type annotation for private function `fake_run`
ruff,     tests/test_lint_cli.py:100:fake_run, ARG001, Unused function argument: `self`
mypy,     tests/test_lint_cli.py:105:test_lint_no_stats_flag, attr-defined, Module "pyqa.cli.lint" does not explicitly export attribute "Orchestrator"
ruff,     tests/test_lint_cli.py:119:test_lint_no_stats_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:121:test_lint_no_stats_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:122:test_lint_no_stats_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:124:test_lint_no_stats_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:125:test_lint_no_stats_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:126:test_lint_no_stats_flag, R2004, Consider using a named constant or an enum instead of ''stats''.
ruff,     tests/test_lint_cli.py:126:test_lint_no_stats_flag, S101, Use of `assert` detected
pylint,   tests/test_lint_cli.py:127:test_lint_no_stats_flag, R2004, Consider using a named constant or an enum instead of ''Passed''.
ruff,     tests/test_lint_cli.py:127:test_lint_no_stats_flag, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:130:test_lint_help_options_sorted, D103, Missing docstring in public function
ruff,     tests/test_lint_cli.py:137:test_lint_help_options_sorted, S101, Use of `assert` detected
ruff,     tests/test_lint_cli.py:140:test_lint_help_options_sorted, S101, Use of `assert` detected
mypy,     tests/test_lint_cli.py:149:section, no-untyped-def, Function is missing a return type annotation
ruff,     tests/test_lint_cli.py:149:section, ANN202, Missing return type annotation for private function `section`
mypy,     tests/test_lint_cli.py:163:_expected_sorted_options, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_lint_cli.py:163:_expected_sorted_options, ANN001, Missing type annotation for function argument `command`
pylint,   tests/test_lint_cli.py:166:_expected_sorted_options, R2004, Consider using a named constant or an enum instead of ''argument''.
pylint,   tests/test_lint_cli.py:169:_expected_sorted_options, R6103, Use 'if (record := param.get_help_record(ctx)) is None:' instead
ruff,     tests/test_luacheck_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_luacheck_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_luacheck_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_luacheck_tool.py:15:test_luacheck_command_build, D103, Missing docstring in public function
pylint,   tests/test_luacheck_tool.py:38:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''luacheck''.
ruff,     tests/test_luacheck_tool.py:38:test_luacheck_command_build, S101, Use of `assert` detected
pylint,   tests/test_luacheck_tool.py:39:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''--formatter''.
pylint,   tests/test_luacheck_tool.py:39:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''plain''.
ruff,     tests/test_luacheck_tool.py:39:test_luacheck_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_luacheck_tool.py:39:test_luacheck_command_build, S101, Use of `assert` detected
pylint,   tests/test_luacheck_tool.py:40:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''--codes''.
ruff,     tests/test_luacheck_tool.py:40:test_luacheck_command_build, S101, Use of `assert` detected
pylint,   tests/test_luacheck_tool.py:41:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''--no-color''.
ruff,     tests/test_luacheck_tool.py:41:test_luacheck_command_build, S101, Use of `assert` detected
pylint,   tests/test_luacheck_tool.py:42:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''--max-cyclomatic-complexity''.
ruff,     tests/test_luacheck_tool.py:42:test_luacheck_command_build, S101, Use of `assert` detected
pylint,   tests/test_luacheck_tool.py:43:test_luacheck_command_build, R2004, Consider using a named constant or an enum instead of ''--max-line-length''.
ruff,     tests/test_luacheck_tool.py:43:test_luacheck_command_build, S101, Use of `assert` detected
ruff,     tests/test_luacheck_tool.py:44:test_luacheck_command_build, S101, Use of `assert` detected
ruff,     tests/test_lualint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_lualint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_lualint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_lualint_tool.py:16:test_lualint_command_build, D103, Missing docstring in public function
pylint,   tests/test_lualint_tool.py:36:test_lualint_command_build, R2004, Consider using a named constant or an enum instead of ''lua''.
ruff,     tests/test_lualint_tool.py:36:test_lualint_command_build, S101, Use of `assert` detected
pylint,   tests/test_lualint_tool.py:37:test_lualint_command_build, R2004, Consider using a named constant or an enum instead of ''-r''.
ruff,     tests/test_lualint_tool.py:37:test_lualint_command_build, S101, Use of `assert` detected
ruff,     tests/test_lualint_tool.py:38:test_lualint_command_build, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_orchestrator.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_orchestrator.py:20:__init__, D107, Missing docstring in `__init__`
mypy,     tests/test_orchestrator.py:23:run, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_orchestrator.py:23:run, ANN002, Missing type annotation for `*_args`
ruff,     tests/test_orchestrator.py:23:run, ANN003, Missing type annotation for `**_kwargs`
ruff,     tests/test_orchestrator.py:23:run, D102, Missing docstring in public method
ruff,     tests/test_orchestrator.py:30:build, D102, Missing docstring in public method
pylint,   tests/test_orchestrator.py:33:build, R6103, Use 'if (args := ctx.settings.get('args')) is None:' instead
ruff,     tests/test_orchestrator.py:43:test_orchestrator_runs_registered_tool, D103, Missing docstring in public function
mypy,     tests/test_orchestrator.py:66:runner, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_orchestrator.py:66:runner, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_orchestrator.py:66:runner, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_orchestrator.py:66:runner, ANN202, Missing return type annotation for private function `runner`
pylint,   tests/test_orchestrator.py:67:runner, R2004, Consider using a named constant or an enum instead of ''dummy''.
ruff,     tests/test_orchestrator.py:67:runner, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:68:runner, R2004, Consider using a named constant or an enum instead of ''--flag''.
ruff,     tests/test_orchestrator.py:68:runner, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:69:runner, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:71:runner, R2004, Consider using a named constant or an enum instead of ''1''.
ruff,     tests/test_orchestrator.py:71:runner, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:88:test_orchestrator_runs_registered_tool, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:90:test_orchestrator_runs_registered_tool, R2004, Consider using a named constant or an enum instead of ''dummy''.
ruff,     tests/test_orchestrator.py:90:test_orchestrator_runs_registered_tool, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:91:test_orchestrator_runs_registered_tool, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:92:test_orchestrator_runs_registered_tool, R2004, Consider using a named constant or an enum instead of ''output''.
ruff,     tests/test_orchestrator.py:92:test_orchestrator_runs_registered_tool, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:93:test_orchestrator_runs_registered_tool, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:96:test_orchestrator_uses_cache, D103, Missing docstring in public function
mypy,     tests/test_orchestrator.py:122:runner, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_orchestrator.py:122:runner, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_orchestrator.py:122:runner, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_orchestrator.py:122:runner, ANN202, Missing return type annotation for private function `runner`
ruff,     tests/test_orchestrator.py:122:runner, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_orchestrator.py:132:test_orchestrator_uses_cache, S101, Use of `assert` detected
mypy,     tests/test_orchestrator.py:134:runner_fail, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_orchestrator.py:134:runner_fail, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_orchestrator.py:134:runner_fail, ANN003, Missing type annotation for `**_kwargs`
ruff,     tests/test_orchestrator.py:134:runner_fail, ANN202, Missing return type annotation for private function `runner_fail`
ruff,     tests/test_orchestrator.py:135:runner_fail, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     tests/test_orchestrator.py:135:runner_fail, TRY003, Avoid specifying long messages outside the exception class
ruff,     tests/test_orchestrator.py:144:test_orchestrator_uses_cache, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:145:test_orchestrator_uses_cache, R2004, Consider using a named constant or an enum instead of ''output''.
ruff,     tests/test_orchestrator.py:145:test_orchestrator_uses_cache, S101, Use of `assert` detected
mypy,     tests/test_orchestrator.py:150:runner_settings, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_orchestrator.py:150:runner_settings, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_orchestrator.py:150:runner_settings, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_orchestrator.py:150:runner_settings, ANN202, Missing return type annotation for private function `runner_settings`
ruff,     tests/test_orchestrator.py:150:runner_settings, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_orchestrator.py:160:test_orchestrator_uses_cache, S101, Use of `assert` detected
pylint,   tests/test_orchestrator.py:161:test_orchestrator_uses_cache, R2004, Consider using a named constant or an enum instead of ''updated''.
ruff,     tests/test_orchestrator.py:161:test_orchestrator_uses_cache, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:164:test_orchestrator_filters_suppressed_diagnostics, D103, Missing docstring in public function
mypy,     tests/test_orchestrator.py:225:runner, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_orchestrator.py:225:runner, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_orchestrator.py:225:runner, ANN003, Missing type annotation for `**_kwargs`
ruff,     tests/test_orchestrator.py:225:runner, ANN202, Missing return type annotation for private function `runner`
ruff,     tests/test_orchestrator.py:239:test_orchestrator_filters_suppressed_diagnostics, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:241:test_orchestrator_filters_suppressed_diagnostics, S101, Use of `assert` detected
ruff,     tests/test_orchestrator.py:242:test_orchestrator_filters_suppressed_diagnostics, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_parsers.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_parsers.py:49:test_parse_ruff, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:53:test_parse_ruff, E501, Line too long (113 > 100)
ruff,     tests/test_parsers.py:57:test_parse_ruff, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:59:test_parse_ruff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:60:test_parse_ruff, R2004, Consider using a named constant or an enum instead of ''pkg/mod.py''.
ruff,     tests/test_parsers.py:60:test_parse_ruff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:61:test_parse_ruff, R2004, Consider using a named constant or an enum instead of ''F401''.
ruff,     tests/test_parsers.py:61:test_parse_ruff, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:64:test_parse_pylint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:67:test_parse_pylint, E501, Line too long (114 > 100)
ruff,     tests/test_parsers.py:70:test_parse_pylint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:71:test_parse_pylint, R2004, Consider using a named constant or an enum instead of ''W0101''.
ruff,     tests/test_parsers.py:71:test_parse_pylint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:74:test_parse_pyright, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:77:test_parse_pyright, E501, Line too long (144 > 100)
ruff,     tests/test_parsers.py:80:test_parse_pyright, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:82:test_parse_pyright, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:83:test_parse_pyright, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:83:test_parse_pyright, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:86:test_parse_mypy, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:89:test_parse_mypy, E501, Line too long (144 > 100)
ruff,     tests/test_parsers.py:92:test_parse_mypy, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:94:test_parse_mypy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:95:test_parse_mypy, R2004, Consider using a named constant or an enum instead of ''note''.
ruff,     tests/test_parsers.py:95:test_parse_mypy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:96:test_parse_mypy, R2004, Consider using a named constant or an enum instead of ''check_func''.
ruff,     tests/test_parsers.py:96:test_parse_mypy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:97:test_parse_mypy, R2004, Consider using a named constant or an enum instead of ''assignment''.
ruff,     tests/test_parsers.py:97:test_parse_mypy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:98:test_parse_mypy, R2004, Consider using a named constant or an enum instead of ''mypy''.
ruff,     tests/test_parsers.py:98:test_parse_mypy, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:101:test_parse_actionlint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:104:test_parse_actionlint, E501, Line too long (132 > 100)
ruff,     tests/test_parsers.py:107:test_parse_actionlint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:109:test_parse_actionlint, R2004, Consider using a named constant or an enum instead of ''.github/workflows/ci.yml''.
ruff,     tests/test_parsers.py:109:test_parse_actionlint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:110:test_parse_actionlint, R2004, Consider using a named constant or an enum instead of '12'.
ruff,     tests/test_parsers.py:110:test_parse_actionlint, PLR2004, Magic value used in comparison, consider replacing `12` with a constant variable
ruff,     tests/test_parsers.py:110:test_parse_actionlint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:111:test_parse_actionlint, R2004, Consider using a named constant or an enum instead of ''shellcheck''.
ruff,     tests/test_parsers.py:111:test_parse_actionlint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:112:test_parse_actionlint, R2004, Consider using a named constant or an enum instead of ''actionlint''.
ruff,     tests/test_parsers.py:112:test_parse_actionlint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:115:test_parse_sqlfluff, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:118:test_parse_sqlfluff, E501, Line too long (154 > 100)
ruff,     tests/test_parsers.py:121:test_parse_sqlfluff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:123:test_parse_sqlfluff, R2004, Consider using a named constant or an enum instead of ''queries/report.sql''.
ruff,     tests/test_parsers.py:123:test_parse_sqlfluff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:124:test_parse_sqlfluff, R2004, Consider using a named constant or an enum instead of ''L001''.
ruff,     tests/test_parsers.py:124:test_parse_sqlfluff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:125:test_parse_sqlfluff, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_parsers.py:125:test_parse_sqlfluff, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_parsers.py:125:test_parse_sqlfluff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:126:test_parse_sqlfluff, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_parsers.py:126:test_parse_sqlfluff, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_parsers.py:126:test_parse_sqlfluff, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:127:test_parse_sqlfluff, R2004, Consider using a named constant or an enum instead of ''sqlfluff''.
ruff,     tests/test_parsers.py:127:test_parse_sqlfluff, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:130:test_parse_selene, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:133:test_parse_selene, E501, Line too long (265 > 100)
ruff,     tests/test_parsers.py:137:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:139:test_parse_selene, R2004, Consider using a named constant or an enum instead of ''script.lua''.
ruff,     tests/test_parsers.py:139:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:140:test_parse_selene, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:140:test_parse_selene, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:140:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:141:test_parse_selene, R2004, Consider using a named constant or an enum instead of '6'.
ruff,     tests/test_parsers.py:141:test_parse_selene, PLR2004, Magic value used in comparison, consider replacing `6` with a constant variable
ruff,     tests/test_parsers.py:141:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:142:test_parse_selene, R2004, Consider using a named constant or an enum instead of ''shadowing''.
ruff,     tests/test_parsers.py:142:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:143:test_parse_selene, R2004, Consider using a named constant or an enum instead of ''earlier assignment''.
ruff,     tests/test_parsers.py:143:test_parse_selene, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:144:test_parse_selene, R2004, Consider using a named constant or an enum instead of ''selene''.
ruff,     tests/test_parsers.py:144:test_parse_selene, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:147:test_parse_kube_linter, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:161:test_parse_kube_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:163:test_parse_kube_linter, R2004, Consider using a named constant or an enum instead of ''deployments/api.yaml''.
ruff,     tests/test_parsers.py:163:test_parse_kube_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:164:test_parse_kube_linter, R2004, Consider using a named constant or an enum instead of ''run-as-non-root''.
ruff,     tests/test_parsers.py:164:test_parse_kube_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:165:test_parse_kube_linter, R2004, Consider using a named constant or an enum instead of ''kube-linter''.
ruff,     tests/test_parsers.py:165:test_parse_kube_linter, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:167:test_parse_kube_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:168:test_parse_kube_linter, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:168:test_parse_kube_linter, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:171:test_parse_cpplint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:178:test_parse_cpplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:180:test_parse_cpplint, R2004, Consider using a named constant or an enum instead of ''foo.cc''.
ruff,     tests/test_parsers.py:180:test_parse_cpplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:181:test_parse_cpplint, R2004, Consider using a named constant or an enum instead of '10'.
ruff,     tests/test_parsers.py:181:test_parse_cpplint, PLR2004, Magic value used in comparison, consider replacing `10` with a constant variable
ruff,     tests/test_parsers.py:181:test_parse_cpplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:182:test_parse_cpplint, R2004, Consider using a named constant or an enum instead of ''whitespace/indent''.
ruff,     tests/test_parsers.py:182:test_parse_cpplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:183:test_parse_cpplint, R2004, Consider using a named constant or an enum instead of ''cpplint''.
ruff,     tests/test_parsers.py:183:test_parse_cpplint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:186:test_parse_bandit, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:189:test_parse_bandit, E501, Line too long (130 > 100)
ruff,     tests/test_parsers.py:192:test_parse_bandit, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:194:test_parse_bandit, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:195:test_parse_bandit, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:195:test_parse_bandit, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:198:test_parse_eslint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:201:test_parse_eslint, E501, Line too long (130 > 100)
ruff,     tests/test_parsers.py:204:test_parse_eslint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:206:test_parse_eslint, R2004, Consider using a named constant or an enum instead of ''eslint''.
ruff,     tests/test_parsers.py:206:test_parse_eslint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:208:test_parse_eslint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:209:test_parse_eslint, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:209:test_parse_eslint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:212:test_parse_stylelint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:219:test_parse_stylelint, E501, Line too long (123 > 100)
ruff,     tests/test_parsers.py:225:test_parse_stylelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:227:test_parse_stylelint, R2004, Consider using a named constant or an enum instead of ''styles/base.css''.
ruff,     tests/test_parsers.py:227:test_parse_stylelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:228:test_parse_stylelint, R2004, Consider using a named constant or an enum instead of ''at-rule-no-unknown''.
ruff,     tests/test_parsers.py:228:test_parse_stylelint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:230:test_parse_stylelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:231:test_parse_stylelint, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:231:test_parse_stylelint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:234:test_parse_yamllint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:238:test_parse_yamllint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:240:test_parse_yamllint, R2004, Consider using a named constant or an enum instead of ''configs/app.yaml''.
ruff,     tests/test_parsers.py:240:test_parse_yamllint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:241:test_parse_yamllint, R2004, Consider using a named constant or an enum instead of ''colons''.
ruff,     tests/test_parsers.py:241:test_parse_yamllint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:243:test_parse_yamllint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:244:test_parse_yamllint, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_parsers.py:244:test_parse_yamllint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:247:test_parse_dockerfilelint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:256:test_parse_dockerfilelint, E501, Line too long (102 > 100)
ruff,     tests/test_parsers.py:264:test_parse_dockerfilelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:266:test_parse_dockerfilelint, R2004, Consider using a named constant or an enum instead of ''Dockerfile''.
ruff,     tests/test_parsers.py:266:test_parse_dockerfilelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:267:test_parse_dockerfilelint, R2004, Consider using a named constant or an enum instead of ''Clarity''.
ruff,     tests/test_parsers.py:267:test_parse_dockerfilelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:268:test_parse_dockerfilelint, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:268:test_parse_dockerfilelint, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:268:test_parse_dockerfilelint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:269:test_parse_dockerfilelint, R2004, Consider using a named constant or an enum instead of ''Avoid latest''.
ruff,     tests/test_parsers.py:269:test_parse_dockerfilelint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:272:test_parse_luacheck, D103, Missing docstring in public function
pylint,   tests/test_parsers.py:280:test_parse_luacheck, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:280:test_parse_luacheck, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:280:test_parse_luacheck, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:282:test_parse_luacheck, R2004, Consider using a named constant or an enum instead of ''W113''.
ruff,     tests/test_parsers.py:282:test_parse_luacheck, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:284:test_parse_luacheck, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:285:test_parse_luacheck, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_parsers.py:285:test_parse_luacheck, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:287:test_parse_luacheck, R2004, Consider using a named constant or an enum instead of ''E011''.
ruff,     tests/test_parsers.py:287:test_parse_luacheck, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:289:test_parse_luacheck, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:290:test_parse_luacheck, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:290:test_parse_luacheck, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:293:test_parse_lualint, D103, Missing docstring in public function
pylint,   tests/test_parsers.py:300:test_parse_lualint, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:300:test_parse_lualint, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:300:test_parse_lualint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:302:test_parse_lualint, R2004, Consider using a named constant or an enum instead of ''src/example.lua''.
ruff,     tests/test_parsers.py:302:test_parse_lualint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:303:test_parse_lualint, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_parsers.py:303:test_parse_lualint, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_parsers.py:303:test_parse_lualint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:304:test_parse_lualint, R2004, Consider using a named constant or an enum instead of ''SET of realy_aborting''.
ruff,     tests/test_parsers.py:304:test_parse_lualint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:307:test_parse_dotenv_linter, D103, Missing docstring in public function
pylint,   tests/test_parsers.py:314:test_parse_dotenv_linter, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:314:test_parse_dotenv_linter, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:314:test_parse_dotenv_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:315:test_parse_dotenv_linter, R2004, Consider using a named constant or an enum instead of ''LowercaseKey''.
ruff,     tests/test_parsers.py:315:test_parse_dotenv_linter, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:316:test_parse_dotenv_linter, R2004, Consider using a named constant or an enum instead of ''LeadingSpace''.
ruff,     tests/test_parsers.py:316:test_parse_dotenv_linter, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:319:test_parse_remark, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:326:test_parse_remark, E501, Line too long (112 > 100)
ruff,     tests/test_parsers.py:332:test_parse_remark, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:334:test_parse_remark, R2004, Consider using a named constant or an enum instead of ''README.md''.
ruff,     tests/test_parsers.py:334:test_parse_remark, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:335:test_parse_remark, R2004, Consider using a named constant or an enum instead of ''list-item-spacing''.
ruff,     tests/test_parsers.py:335:test_parse_remark, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:337:test_parse_remark, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:338:test_parse_remark, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_parsers.py:338:test_parse_remark, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:341:test_parse_speccy, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:349:test_parse_speccy, E501, Line too long (126 > 100)
ruff,     tests/test_parsers.py:357:test_parse_speccy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:359:test_parse_speccy, R2004, Consider using a named constant or an enum instead of ''openapi.yaml''.
ruff,     tests/test_parsers.py:359:test_parse_speccy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:360:test_parse_speccy, R2004, Consider using a named constant or an enum instead of ''paths/users''.
ruff,     tests/test_parsers.py:360:test_parse_speccy, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:362:test_parse_speccy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:363:test_parse_speccy, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:363:test_parse_speccy, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:366:test_parse_shfmt, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:377:test_parse_shfmt, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:379:test_parse_shfmt, R2004, Consider using a named constant or an enum instead of ''shfmt''.
ruff,     tests/test_parsers.py:379:test_parse_shfmt, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:380:test_parse_shfmt, R2004, Consider using a named constant or an enum instead of ''shfmt''.
ruff,     tests/test_parsers.py:380:test_parse_shfmt, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:383:test_parse_phplint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:387:test_parse_phplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:389:test_parse_phplint, R2004, Consider using a named constant or an enum instead of ''src/index.php''.
ruff,     tests/test_parsers.py:389:test_parse_phplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:390:test_parse_phplint, R2004, Consider using a named constant or an enum instead of '14'.
ruff,     tests/test_parsers.py:390:test_parse_phplint, PLR2004, Magic value used in comparison, consider replacing `14` with a constant variable
ruff,     tests/test_parsers.py:390:test_parse_phplint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:392:test_parse_phplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:393:test_parse_phplint, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:393:test_parse_phplint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:394:test_parse_phplint, R2004, Consider using a named constant or an enum instead of ''phplint''.
ruff,     tests/test_parsers.py:394:test_parse_phplint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:397:test_parse_tombi, D103, Missing docstring in public function
pylint,   tests/test_parsers.py:407:test_parse_tombi, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:407:test_parse_tombi, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:407:test_parse_tombi, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:409:test_parse_tombi, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:410:test_parse_tombi, R2004, Consider using a named constant or an enum instead of ''config.toml''.
ruff,     tests/test_parsers.py:410:test_parse_tombi, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:411:test_parse_tombi, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_parsers.py:411:test_parse_tombi, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_parsers.py:411:test_parse_tombi, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:412:test_parse_tombi, R2004, Consider using a named constant or an enum instead of '4'.
ruff,     tests/test_parsers.py:412:test_parse_tombi, PLR2004, Magic value used in comparison, consider replacing `4` with a constant variable
ruff,     tests/test_parsers.py:412:test_parse_tombi, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:413:test_parse_tombi, R2004, Consider using a named constant or an enum instead of ''tombi''.
ruff,     tests/test_parsers.py:413:test_parse_tombi, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:414:test_parse_tombi, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:415:test_parse_tombi, R2004, Consider using a named constant or an enum instead of '5'.
ruff,     tests/test_parsers.py:415:test_parse_tombi, PLR2004, Magic value used in comparison, consider replacing `5` with a constant variable
ruff,     tests/test_parsers.py:415:test_parse_tombi, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:418:test_parse_perlcritic, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:424:test_parse_perlcritic, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:426:test_parse_perlcritic, R2004, Consider using a named constant or an enum instead of ''lib/Foo.pm''.
ruff,     tests/test_parsers.py:426:test_parse_perlcritic, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:427:test_parse_perlcritic, R2004, Consider using a named constant or an enum instead of '12'.
ruff,     tests/test_parsers.py:427:test_parse_perlcritic, PLR2004, Magic value used in comparison, consider replacing `12` with a constant variable
ruff,     tests/test_parsers.py:427:test_parse_perlcritic, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:428:test_parse_perlcritic, R2004, Consider using a named constant or an enum instead of '8'.
ruff,     tests/test_parsers.py:428:test_parse_perlcritic, PLR2004, Magic value used in comparison, consider replacing `8` with a constant variable
ruff,     tests/test_parsers.py:428:test_parse_perlcritic, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:429:test_parse_perlcritic, R2004, Consider using a named constant or an enum instead of ''ProhibitUnusedVariables''.
ruff,     tests/test_parsers.py:429:test_parse_perlcritic, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:432:test_parse_checkmake, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:440:test_parse_checkmake, E501, Line too long (104 > 100)
ruff,     tests/test_parsers.py:447:test_parse_checkmake, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:449:test_parse_checkmake, R2004, Consider using a named constant or an enum instead of ''Makefile''.
ruff,     tests/test_parsers.py:449:test_parse_checkmake, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:450:test_parse_checkmake, R2004, Consider using a named constant or an enum instead of ''missing-help-text''.
ruff,     tests/test_parsers.py:450:test_parse_checkmake, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:452:test_parse_checkmake, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:453:test_parse_checkmake, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_parsers.py:453:test_parse_checkmake, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:456:test_parse_tsc, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:460:test_parse_tsc, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:462:test_parse_tsc, R2004, Consider using a named constant or an enum instead of ''TS2304''.
ruff,     tests/test_parsers.py:462:test_parse_tsc, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:464:test_parse_tsc, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:465:test_parse_tsc, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:465:test_parse_tsc, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:468:test_parse_hadolint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:471:test_parse_hadolint, E501, Line too long (134 > 100)
ruff,     tests/test_parsers.py:474:test_parse_hadolint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:476:test_parse_hadolint, R2004, Consider using a named constant or an enum instead of ''Dockerfile''.
ruff,     tests/test_parsers.py:476:test_parse_hadolint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:477:test_parse_hadolint, R2004, Consider using a named constant or an enum instead of ''DL3007''.
ruff,     tests/test_parsers.py:477:test_parse_hadolint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:479:test_parse_hadolint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:480:test_parse_hadolint, R2004, Consider using a named constant or an enum instead of ''error''.
ruff,     tests/test_parsers.py:480:test_parse_hadolint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:483:test_parse_golangci_lint, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:486:test_parse_golangci_lint, E501, Line too long (135 > 100)
ruff,     tests/test_parsers.py:489:test_parse_golangci_lint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:491:test_parse_golangci_lint, R2004, Consider using a named constant or an enum instead of ''main.go''.
ruff,     tests/test_parsers.py:491:test_parse_golangci_lint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:492:test_parse_golangci_lint, R2004, Consider using a named constant or an enum instead of ''govet''.
ruff,     tests/test_parsers.py:492:test_parse_golangci_lint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:494:test_parse_golangci_lint, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:495:test_parse_golangci_lint, R2004, Consider using a named constant or an enum instead of ''warning''.
ruff,     tests/test_parsers.py:495:test_parse_golangci_lint, S101, Use of `assert` detected
ruff,     tests/test_parsers.py:498:test_parse_cargo_clippy, D103, Missing docstring in public function
ruff,     tests/test_parsers.py:504:test_parse_cargo_clippy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:506:test_parse_cargo_clippy, R2004, Consider using a named constant or an enum instead of ''src/lib.rs''.
ruff,     tests/test_parsers.py:506:test_parse_cargo_clippy, S101, Use of `assert` detected
pylint,   tests/test_parsers.py:507:test_parse_cargo_clippy, R2004, Consider using a named constant or an enum instead of ''E0001''.
ruff,     tests/test_parsers.py:507:test_parse_cargo_clippy, S101, Use of `assert` detected
ruff,     tests/test_perlcritic_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_perlcritic_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_perlcritic_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_perlcritic_tool.py:15:test_perlcritic_command_build, D103, Missing docstring in public function
pylint,   tests/test_perlcritic_tool.py:31:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''perlcritic''.
ruff,     tests/test_perlcritic_tool.py:31:test_perlcritic_command_build, S101, Use of `assert` detected
pylint,   tests/test_perlcritic_tool.py:32:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''--nocolor''.
ruff,     tests/test_perlcritic_tool.py:32:test_perlcritic_command_build, S101, Use of `assert` detected
pylint,   tests/test_perlcritic_tool.py:33:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''--verbose''.
ruff,     tests/test_perlcritic_tool.py:33:test_perlcritic_command_build, S101, Use of `assert` detected
pylint,   tests/test_perlcritic_tool.py:34:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''--profile''.
ruff,     tests/test_perlcritic_tool.py:34:test_perlcritic_command_build, S101, Use of `assert` detected
pylint,   tests/test_perlcritic_tool.py:35:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''--severity''.
pylint,   tests/test_perlcritic_tool.py:35:test_perlcritic_command_build, R2004, Consider using a named constant or an enum instead of ''3''.
ruff,     tests/test_perlcritic_tool.py:35:test_perlcritic_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_perlcritic_tool.py:35:test_perlcritic_command_build, S101, Use of `assert` detected
ruff,     tests/test_perlcritic_tool.py:36:test_perlcritic_command_build, S101, Use of `assert` detected
ruff,     tests/test_perltidy_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_perltidy_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_perltidy_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_perltidy_tool.py:15:test_perltidy_format_command, D103, Missing docstring in public function
pylint,   tests/test_perltidy_tool.py:32:test_perltidy_format_command, R2004, Consider using a named constant or an enum instead of ''perltidy''.
ruff,     tests/test_perltidy_tool.py:32:test_perltidy_format_command, S101, Use of `assert` detected
pylint,   tests/test_perltidy_tool.py:33:test_perltidy_format_command, R2004, Consider using a named constant or an enum instead of ''-b''.
ruff,     tests/test_perltidy_tool.py:33:test_perltidy_format_command, S101, Use of `assert` detected
ruff,     tests/test_perltidy_tool.py:34:test_perltidy_format_command, S101, Use of `assert` detected
pylint,   tests/test_perltidy_tool.py:35:test_perltidy_format_command, R2004, Consider using a named constant or an enum instead of ''-q''.
ruff,     tests/test_perltidy_tool.py:35:test_perltidy_format_command, S101, Use of `assert` detected
ruff,     tests/test_perltidy_tool.py:36:test_perltidy_format_command, S101, Use of `assert` detected
ruff,     tests/test_perltidy_tool.py:39:test_perltidy_check_command, D103, Missing docstring in public function
pylint,   tests/test_perltidy_tool.py:50:test_perltidy_check_command, R2004, Consider using a named constant or an enum instead of ''--check-only''.
ruff,     tests/test_perltidy_tool.py:50:test_perltidy_check_command, S101, Use of `assert` detected
ruff,     tests/test_phplint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_phplint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_phplint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_phplint_tool.py:15:test_phplint_command_build, D103, Missing docstring in public function
pylint,   tests/test_phplint_tool.py:35:test_phplint_command_build, R2004, Consider using a named constant or an enum instead of ''phplint''.
ruff,     tests/test_phplint_tool.py:35:test_phplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_phplint_tool.py:36:test_phplint_command_build, R2004, Consider using a named constant or an enum instead of ''--no-ansi''.
ruff,     tests/test_phplint_tool.py:36:test_phplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_phplint_tool.py:37:test_phplint_command_build, R2004, Consider using a named constant or an enum instead of ''--no-progress''.
ruff,     tests/test_phplint_tool.py:37:test_phplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_phplint_tool.py:38:test_phplint_command_build, R2004, Consider using a named constant or an enum instead of ''--configuration''.
ruff,     tests/test_phplint_tool.py:38:test_phplint_command_build, S101, Use of `assert` detected
pylint,   tests/test_phplint_tool.py:39:test_phplint_command_build, R2004, Consider using a named constant or an enum instead of ''--include''.
ruff,     tests/test_phplint_tool.py:39:test_phplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_phplint_tool.py:40:test_phplint_command_build, S101, Use of `assert` detected
ruff,     tests/test_quality.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_quality.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_quality.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_quality.py:54:_load_quality_config, no-untyped-def, Function is missing a return type annotation
ruff,     tests/test_quality.py:54:_load_quality_config, ANN202, Missing return type annotation for private function `_load_quality_config`
ruff,     tests/test_quality.py:59:test_quality_checker_missing_spdx, D103, Missing docstring in public function
ruff,     tests/test_quality.py:77:test_quality_checker_missing_spdx, S101, Use of `assert` detected
pylint,   tests/test_quality.py:78:test_quality_checker_missing_spdx, R2004, Consider using a named constant or an enum instead of ''Missing SPDX''.
ruff,     tests/test_quality.py:78:test_quality_checker_missing_spdx, S101, Use of `assert` detected
ruff,     tests/test_quality.py:81:test_quality_checker_accepts_valid_header, D103, Missing docstring in public function
ruff,     tests/test_quality.py:102:test_quality_checker_accepts_valid_header, S101, Use of `assert` detected
ruff,     tests/test_quality.py:105:test_schema_check_reports_outdated_file, D103, Missing docstring in public function
ruff,     tests/test_quality.py:120:test_schema_check_reports_outdated_file, S101, Use of `assert` detected
pylint,   tests/test_quality.py:121:test_schema_check_reports_outdated_file, R2004, Consider using a named constant or an enum instead of ''Schema documentation out of date''.
ruff,     tests/test_quality.py:121:test_schema_check_reports_outdated_file, S101, Use of `assert` detected
ruff,     tests/test_quality.py:124:test_commit_message_validation, D103, Missing docstring in public function
ruff,     tests/test_quality.py:130:test_commit_message_validation, S101, Use of `assert` detected
ruff,     tests/test_quality.py:135:test_commit_message_validation, S101, Use of `assert` detected
pylint,   tests/test_quality.py:136:test_commit_message_validation, R2004, Consider using a named constant or an enum instead of ''Conventional''.
ruff,     tests/test_quality.py:136:test_commit_message_validation, S101, Use of `assert` detected
ruff,     tests/test_quality.py:139:test_cli_reports_license_error, D103, Missing docstring in public function
ruff,     tests/test_quality.py:157:test_cli_reports_license_error, S101, Use of `assert` detected
pylint,   tests/test_quality.py:158:test_cli_reports_license_error, R2004, Consider using a named constant or an enum instead of ''Missing SPDX''.
ruff,     tests/test_quality.py:158:test_cli_reports_license_error, S101, Use of `assert` detected
ruff,     tests/test_remark_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_remark_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_remark_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_remark_tool.py:15:test_remark_lint_command_build, D103, Missing docstring in public function
pylint,   tests/test_remark_tool.py:34:test_remark_lint_command_build, R2004, Consider using a named constant or an enum instead of ''remark''.
ruff,     tests/test_remark_tool.py:34:test_remark_lint_command_build, S101, Use of `assert` detected
pylint,   tests/test_remark_tool.py:35:test_remark_lint_command_build, R2004, Consider using a named constant or an enum instead of ''--report''.
pylint,   tests/test_remark_tool.py:35:test_remark_lint_command_build, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_remark_tool.py:35:test_remark_lint_command_build, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_remark_tool.py:35:test_remark_lint_command_build, S101, Use of `assert` detected
pylint,   tests/test_remark_tool.py:36:test_remark_lint_command_build, R2004, Consider using a named constant or an enum instead of ''--use''.
ruff,     tests/test_remark_tool.py:36:test_remark_lint_command_build, S101, Use of `assert` detected
pylint,   tests/test_remark_tool.py:37:test_remark_lint_command_build, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_remark_tool.py:37:test_remark_lint_command_build, S101, Use of `assert` detected
ruff,     tests/test_remark_tool.py:38:test_remark_lint_command_build, S101, Use of `assert` detected
ruff,     tests/test_remark_tool.py:41:test_remark_fix_command_build, D103, Missing docstring in public function
pylint,   tests/test_remark_tool.py:61:test_remark_fix_command_build, R2004, Consider using a named constant or an enum instead of ''remark''.
ruff,     tests/test_remark_tool.py:61:test_remark_fix_command_build, S101, Use of `assert` detected
pylint,   tests/test_remark_tool.py:62:test_remark_fix_command_build, R2004, Consider using a named constant or an enum instead of ''--output''.
ruff,     tests/test_remark_tool.py:62:test_remark_fix_command_build, S101, Use of `assert` detected
pylint,   tests/test_remark_tool.py:63:test_remark_fix_command_build, R2004, Consider using a named constant or an enum instead of ''--report''.
ruff,     tests/test_remark_tool.py:63:test_remark_fix_command_build, S101, Use of `assert` detected
ruff,     tests/test_remark_tool.py:64:test_remark_fix_command_build, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_reporting.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_reporting.py:54:test_write_json_report, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:60:test_write_json_report, R2004, Consider using a named constant or an enum instead of ''F401''.
ruff,     tests/test_reporting.py:60:test_write_json_report, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:63:test_write_sarif_report, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:69:test_write_sarif_report, R2004, Consider using a named constant or an enum instead of ''2.1.0''.
ruff,     tests/test_reporting.py:69:test_write_sarif_report, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:71:test_write_sarif_report, R2004, Consider using a named constant or an enum instead of ''ruff''.
ruff,     tests/test_reporting.py:71:test_write_sarif_report, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:72:test_write_sarif_report, R2004, Consider using a named constant or an enum instead of ''ruff 1.0.0''.
ruff,     tests/test_reporting.py:72:test_write_sarif_report, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:73:test_write_sarif_report, R2004, Consider using a named constant or an enum instead of ''F401''.
ruff,     tests/test_reporting.py:73:test_write_sarif_report, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:76:test_write_pr_summary, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:82:test_write_pr_summary, R2004, Consider using a named constant or an enum instead of ''Lint Summary''.
ruff,     tests/test_reporting.py:82:test_write_pr_summary, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:83:test_write_pr_summary, R2004, Consider using a named constant or an enum instead of ''ERROR''.
ruff,     tests/test_reporting.py:83:test_write_pr_summary, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:84:test_write_pr_summary, R2004, Consider using a named constant or an enum instead of ''bad things''.
ruff,     tests/test_reporting.py:84:test_write_pr_summary, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:85:test_write_pr_summary, R2004, Consider using a named constant or an enum instead of ''meh''.
ruff,     tests/test_reporting.py:85:test_write_pr_summary, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:88:test_write_pr_summary_with_filter_and_template, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:100:test_write_pr_summary_with_filter_and_template, R2004, Consider using a named constant or an enum instead of ''F401''.
ruff,     tests/test_reporting.py:100:test_write_pr_summary_with_filter_and_template, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:101:test_write_pr_summary_with_filter_and_template, R2004, Consider using a named constant or an enum instead of ''W000''.
ruff,     tests/test_reporting.py:101:test_write_pr_summary_with_filter_and_template, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:102:test_write_pr_summary_with_filter_and_template, R2004, Consider using a named constant or an enum instead of ''ruff:F401''.
ruff,     tests/test_reporting.py:102:test_write_pr_summary_with_filter_and_template, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:105:test_render_concise_shows_diagnostics_for_failures, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:105:test_render_concise_shows_diagnostics_for_failures, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:105:test_render_concise_shows_diagnostics_for_failures, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:114:test_render_concise_shows_diagnostics_for_failures, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:119:test_render_concise_shows_diagnostics_for_failures, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:121:test_render_concise_shows_diagnostics_for_failures, R2004, Consider using a named constant or an enum instead of ''Files''.
ruff,     tests/test_reporting.py:121:test_render_concise_shows_diagnostics_for_failures, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:123:test_render_concise_shows_diagnostics_for_failures, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:127:test_render_concise_shows_diagnostics_for_failures, R2004, Consider using a named constant or an enum instead of ''Failed — 2 diagnostic(s) across 1 file(s); 1 failing action(s) out of 1''.
ruff,     tests/test_reporting.py:127:test_render_concise_shows_diagnostics_for_failures, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:132:test_render_concise_omits_stats_when_disabled, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:132:test_render_concise_omits_stats_when_disabled, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:132:test_render_concise_omits_stats_when_disabled, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:137:test_render_concise_omits_stats_when_disabled, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:139:test_render_concise_omits_stats_when_disabled, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:143:test_render_concise_omits_stats_when_disabled, R2004, Consider using a named constant or an enum instead of ''Failed — 2 diagnostic(s) across 1 file(s); 1 failing action(s) out of 1''.
ruff,     tests/test_reporting.py:143:test_render_concise_omits_stats_when_disabled, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:148:test_render_concise_fallbacks_to_stderr, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:148:test_render_concise_fallbacks_to_stderr, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:148:test_render_concise_fallbacks_to_stderr, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:169:test_render_concise_fallbacks_to_stderr, PIE810, Call `startswith` once with a `tuple`
ruff,     tests/test_reporting.py:171:test_render_concise_fallbacks_to_stderr, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:172:test_render_concise_fallbacks_to_stderr, R2004, Consider using a named constant or an enum instead of ''Failed — 0 diagnostic(s) across 0 file(s); 1 failing action(s) out of 1''.
ruff,     tests/test_reporting.py:172:test_render_concise_fallbacks_to_stderr, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:177:test_render_concise_trims_code_prefix, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:177:test_render_concise_trims_code_prefix, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:177:test_render_concise_trims_code_prefix, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:206:test_render_concise_trims_code_prefix, R2004, Consider using a named constant or an enum instead of ''pylint''.
ruff,     tests/test_reporting.py:206:test_render_concise_trims_code_prefix, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:207:test_render_concise_trims_code_prefix, R2004, Consider using a named constant or an enum instead of ''mod.py:7''.
ruff,     tests/test_reporting.py:207:test_render_concise_trims_code_prefix, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:208:test_render_concise_trims_code_prefix, R2004, Consider using a named constant or an enum instead of ''C0415''.
ruff,     tests/test_reporting.py:208:test_render_concise_trims_code_prefix, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:209:test_render_concise_trims_code_prefix, R2004, Consider using a named constant or an enum instead of ''import outside toplevel''.
ruff,     tests/test_reporting.py:209:test_render_concise_trims_code_prefix, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:212:test_render_concise_does_not_pad_codes, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:212:test_render_concise_does_not_pad_codes, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:212:test_render_concise_does_not_pad_codes, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:248:test_render_concise_does_not_pad_codes, R2004, Consider using a named constant or an enum instead of ''short code''.
pylint,   tests/test_reporting.py:249:test_render_concise_does_not_pad_codes, R2004, Consider using a named constant or an enum instead of ''long code''.
pylint,   tests/test_reporting.py:254:test_render_concise_does_not_pad_codes, R2004, Consider using a named constant or an enum instead of '' E1''.
ruff,     tests/test_reporting.py:254:test_render_concise_does_not_pad_codes, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:255:test_render_concise_does_not_pad_codes, R2004, Consider using a named constant or an enum instead of '' ERROR-LONG-CODE''.
ruff,     tests/test_reporting.py:255:test_render_concise_does_not_pad_codes, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:258:test_render_concise_trims_code_whitespace, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:258:test_render_concise_trims_code_whitespace, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:258:test_render_concise_trims_code_whitespace, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:288:test_render_concise_trims_code_whitespace, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:296:test_render_pretty_trims_code_whitespace, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:296:test_render_pretty_trims_code_whitespace, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:296:test_render_pretty_trims_code_whitespace, D103, Missing docstring in public function
pylint,   tests/test_reporting.py:324:test_render_pretty_trims_code_whitespace, R2004, Consider using a named constant or an enum instead of ''Line too long''.
ruff,     tests/test_reporting.py:325:test_render_pretty_trims_code_whitespace, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:328:test_render_concise_sorted_and_deduped, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:328:test_render_concise_sorted_and_deduped, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:328:test_render_concise_sorted_and_deduped, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:389:test_render_concise_sorted_and_deduped, S101, Use of `assert` detected
ruff,     tests/test_reporting.py:391:test_render_concise_sorted_and_deduped, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:396:test_render_concise_sorted_and_deduped, R2004, Consider using a named constant or an enum instead of ''Failed — 3 diagnostic(s) across 0 file(s); 1 failing action(s) out of 1''.
ruff,     tests/test_reporting.py:396:test_render_concise_sorted_and_deduped, S101, Use of `assert` detected
mypy,     tests/test_reporting.py:401:test_render_concise_normalizes_paths, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_reporting.py:401:test_render_concise_normalizes_paths, ANN001, Missing type annotation for function argument `capsys`
ruff,     tests/test_reporting.py:401:test_render_concise_normalizes_paths, D103, Missing docstring in public function
ruff,     tests/test_reporting.py:437:test_render_concise_normalizes_paths, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:438:test_render_concise_normalizes_paths, R2004, Consider using a named constant or an enum instead of ''mypy, src/pkg/module.py:7:resolve_value, attr-defined, absolute issue''.
ruff,     tests/test_reporting.py:438:test_render_concise_normalizes_paths, S101, Use of `assert` detected
pylint,   tests/test_reporting.py:441:test_render_concise_normalizes_paths, R2004, Consider using a named constant or an enum instead of ''Failed — 1 diagnostic(s) across 0 file(s); 1 failing action(s) out of 1''.
ruff,     tests/test_reporting.py:441:test_render_concise_normalizes_paths, S101, Use of `assert` detected
ruff,     tests/test_security_scan.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_security_scan.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_security_scan.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_security_scan.py:14:test_security_scan_detects_secret, D103, Missing docstring in public function
ruff,     tests/test_security_scan.py:32:test_security_scan_detects_secret, S101, Use of `assert` detected
pylint,   tests/test_security_scan.py:33:test_security_scan_detects_secret, R2004, Consider using a named constant or an enum instead of ''api_key''.
ruff,     tests/test_security_scan.py:33:test_security_scan_detects_secret, S101, Use of `assert` detected
ruff,     tests/test_security_scan.py:36:test_security_scan_respects_excludes, D103, Missing docstring in public function
ruff,     tests/test_security_scan.py:55:test_security_scan_respects_excludes, S101, Use of `assert` detected
pylint,   tests/test_security_scan.py:56:test_security_scan_respects_excludes, R2004, Consider using a named constant or an enum instead of ''No security issues detected''.
ruff,     tests/test_security_scan.py:56:test_security_scan_respects_excludes, S101, Use of `assert` detected
ruff,     tests/test_security_scan.py:59:test_security_scan_handles_no_files, D103, Missing docstring in public function
ruff,     tests/test_security_scan.py:73:test_security_scan_handles_no_files, S101, Use of `assert` detected
pylint,   tests/test_security_scan.py:74:test_security_scan_handles_no_files, R2004, Consider using a named constant or an enum instead of ''No files to scan''.
ruff,     tests/test_security_scan.py:74:test_security_scan_handles_no_files, S101, Use of `assert` detected
ruff,     tests/test_selene_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_selene_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_selene_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_selene_tool.py:15:test_selene_command_build, D103, Missing docstring in public function
pylint,   tests/test_selene_tool.py:39:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''selene''.
ruff,     tests/test_selene_tool.py:39:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:40:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--display-style''.
ruff,     tests/test_selene_tool.py:40:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:41:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''Json2''.
ruff,     tests/test_selene_tool.py:41:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:42:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--color''.
ruff,     tests/test_selene_tool.py:42:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:43:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''Auto''.
ruff,     tests/test_selene_tool.py:43:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:44:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_selene_tool.py:44:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:45:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--pattern''.
ruff,     tests/test_selene_tool.py:45:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:46:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--num-threads''.
ruff,     tests/test_selene_tool.py:46:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:47:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--allow-warnings''.
ruff,     tests/test_selene_tool.py:47:test_selene_command_build, S101, Use of `assert` detected
pylint,   tests/test_selene_tool.py:48:test_selene_command_build, R2004, Consider using a named constant or an enum instead of ''--no-exclude''.
ruff,     tests/test_selene_tool.py:48:test_selene_command_build, S101, Use of `assert` detected
ruff,     tests/test_selene_tool.py:49:test_selene_command_build, S101, Use of `assert` detected
ruff,     tests/test_shfmt_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_shfmt_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_shfmt_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_shfmt_tool.py:15:test_shfmt_format_command, D103, Missing docstring in public function
pylint,   tests/test_shfmt_tool.py:32:test_shfmt_format_command, R2004, Consider using a named constant or an enum instead of ''shfmt''.
ruff,     tests/test_shfmt_tool.py:32:test_shfmt_format_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:33:test_shfmt_format_command, R2004, Consider using a named constant or an enum instead of ''-w''.
ruff,     tests/test_shfmt_tool.py:33:test_shfmt_format_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:34:test_shfmt_format_command, R2004, Consider using a named constant or an enum instead of ''-i''.
pylint,   tests/test_shfmt_tool.py:34:test_shfmt_format_command, R2004, Consider using a named constant or an enum instead of ''4''.
ruff,     tests/test_shfmt_tool.py:34:test_shfmt_format_command, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_shfmt_tool.py:34:test_shfmt_format_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:35:test_shfmt_format_command, R2004, Consider using a named constant or an enum instead of ''-s''.
ruff,     tests/test_shfmt_tool.py:35:test_shfmt_format_command, S101, Use of `assert` detected
ruff,     tests/test_shfmt_tool.py:36:test_shfmt_format_command, S101, Use of `assert` detected
ruff,     tests/test_shfmt_tool.py:39:test_shfmt_check_command, D103, Missing docstring in public function
pylint,   tests/test_shfmt_tool.py:55:test_shfmt_check_command, R2004, Consider using a named constant or an enum instead of ''shfmt''.
ruff,     tests/test_shfmt_tool.py:55:test_shfmt_check_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:56:test_shfmt_check_command, R2004, Consider using a named constant or an enum instead of ''-d''.
ruff,     tests/test_shfmt_tool.py:56:test_shfmt_check_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:57:test_shfmt_check_command, R2004, Consider using a named constant or an enum instead of ''-ln''.
pylint,   tests/test_shfmt_tool.py:57:test_shfmt_check_command, R2004, Consider using a named constant or an enum instead of ''bash''.
ruff,     tests/test_shfmt_tool.py:57:test_shfmt_check_command, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_shfmt_tool.py:57:test_shfmt_check_command, S101, Use of `assert` detected
pylint,   tests/test_shfmt_tool.py:58:test_shfmt_check_command, R2004, Consider using a named constant or an enum instead of ''-ci''.
ruff,     tests/test_shfmt_tool.py:58:test_shfmt_check_command, S101, Use of `assert` detected
ruff,     tests/test_speccy_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_speccy_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_speccy_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_speccy_tool.py:15:test_speccy_command_build, D103, Missing docstring in public function
ruff,     tests/test_speccy_tool.py:31:test_speccy_command_build, S101, Use of `assert` detected
pylint,   tests/test_speccy_tool.py:32:test_speccy_command_build, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_speccy_tool.py:32:test_speccy_command_build, S101, Use of `assert` detected
pylint,   tests/test_speccy_tool.py:33:test_speccy_command_build, R2004, Consider using a named constant or an enum instead of ''--ruleset''.
ruff,     tests/test_speccy_tool.py:33:test_speccy_command_build, S101, Use of `assert` detected
pylint,   tests/test_speccy_tool.py:34:test_speccy_command_build, R2004, Consider using a named constant or an enum instead of ''--skip''.
ruff,     tests/test_speccy_tool.py:34:test_speccy_command_build, S101, Use of `assert` detected
ruff,     tests/test_speccy_tool.py:35:test_speccy_command_build, S101, Use of `assert` detected
ruff,     tests/test_sqlfluff_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_sqlfluff_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_sqlfluff_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_sqlfluff_tool.py:22:test_sqlfluff_command_uses_global_dialect, D103, Missing docstring in public function
pylint,   tests/test_sqlfluff_tool.py:25:test_sqlfluff_command_uses_global_dialect, R2004, Consider using a named constant or an enum instead of ''--dialect''.
ruff,     tests/test_sqlfluff_tool.py:25:test_sqlfluff_command_uses_global_dialect, S101, Use of `assert` detected
pylint,   tests/test_sqlfluff_tool.py:26:test_sqlfluff_command_uses_global_dialect, R2004, Consider using a named constant or an enum instead of ''postgresql''.
ruff,     tests/test_sqlfluff_tool.py:26:test_sqlfluff_command_uses_global_dialect, S101, Use of `assert` detected
ruff,     tests/test_sqlfluff_tool.py:29:test_sqlfluff_command_respects_override, D103, Missing docstring in public function
pylint,   tests/test_sqlfluff_tool.py:33:test_sqlfluff_command_respects_override, R2004, Consider using a named constant or an enum instead of ''mysql''.
ruff,     tests/test_sqlfluff_tool.py:33:test_sqlfluff_command_respects_override, S101, Use of `assert` detected
ruff,     tests/test_stylelint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_stylelint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_stylelint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_stylelint_tool.py:15:_ctx, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_stylelint_tool.py:15:_ctx, ANN003, Missing type annotation for `**settings`
ruff,     tests/test_stylelint_tool.py:25:test_stylelint_lint_command_includes_formatter_and_paths, D103, Missing docstring in public function
pylint,   tests/test_stylelint_tool.py:42:test_stylelint_lint_command_includes_formatter_and_paths, R2004, Consider using a named constant or an enum instead of ''stylelint''.
ruff,     tests/test_stylelint_tool.py:42:test_stylelint_lint_command_includes_formatter_and_paths, S101, Use of `assert` detected
pylint,   tests/test_stylelint_tool.py:43:test_stylelint_lint_command_includes_formatter_and_paths, R2004, Consider using a named constant or an enum instead of ''--formatter''.
pylint,   tests/test_stylelint_tool.py:43:test_stylelint_lint_command_includes_formatter_and_paths, R2004, Consider using a named constant or an enum instead of ''json''.
ruff,     tests/test_stylelint_tool.py:43:test_stylelint_lint_command_includes_formatter_and_paths, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_stylelint_tool.py:43:test_stylelint_lint_command_includes_formatter_and_paths, S101, Use of `assert` detected
pylint,   tests/test_stylelint_tool.py:44:test_stylelint_lint_command_includes_formatter_and_paths, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_stylelint_tool.py:44:test_stylelint_lint_command_includes_formatter_and_paths, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_stylelint_tool.py:44:test_stylelint_lint_command_includes_formatter_and_paths, S101, Use of `assert` detected
ruff,     tests/test_stylelint_tool.py:45:test_stylelint_lint_command_includes_formatter_and_paths, S101, Use of `assert` detected
ruff,     tests/test_stylelint_tool.py:48:test_stylelint_fix_command_respects_fix_flag, D103, Missing docstring in public function
pylint,   tests/test_stylelint_tool.py:58:test_stylelint_fix_command_respects_fix_flag, R2004, Consider using a named constant or an enum instead of ''stylelint''.
ruff,     tests/test_stylelint_tool.py:58:test_stylelint_fix_command_respects_fix_flag, S101, Use of `assert` detected
pylint,   tests/test_stylelint_tool.py:59:test_stylelint_fix_command_respects_fix_flag, R2004, Consider using a named constant or an enum instead of ''--fix''.
ruff,     tests/test_stylelint_tool.py:59:test_stylelint_fix_command_respects_fix_flag, S101, Use of `assert` detected
pylint,   tests/test_stylelint_tool.py:60:test_stylelint_fix_command_respects_fix_flag, R2004, Consider using a named constant or an enum instead of ''--formatter''.
ruff,     tests/test_stylelint_tool.py:60:test_stylelint_fix_command_respects_fix_flag, S101, Use of `assert` detected
ruff,     tests/test_stylelint_tool.py:61:test_stylelint_fix_command_respects_fix_flag, S101, Use of `assert` detected
ruff,     tests/test_tombi_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tombi_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tombi_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_tombi_tool.py:15:test_tombi_command_build, D103, Missing docstring in public function
pylint,   tests/test_tombi_tool.py:37:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''tombi''.
ruff,     tests/test_tombi_tool.py:37:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:38:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''lint''.
ruff,     tests/test_tombi_tool.py:38:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:39:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''--stdin-filename''.
ruff,     tests/test_tombi_tool.py:39:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:40:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''--offline''.
ruff,     tests/test_tombi_tool.py:40:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:41:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''--no-cache''.
ruff,     tests/test_tombi_tool.py:41:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:42:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_tombi_tool.py:42:test_tombi_command_build, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_tombi_tool.py:42:test_tombi_command_build, S101, Use of `assert` detected
pylint,   tests/test_tombi_tool.py:43:test_tombi_command_build, R2004, Consider using a named constant or an enum instead of ''--schema''.
ruff,     tests/test_tombi_tool.py:43:test_tombi_command_build, S101, Use of `assert` detected
ruff,     tests/test_tombi_tool.py:44:test_tombi_command_build, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:1:# SPDX-License-Identifier: MIT, D100, Missing docstring in public module
ruff,     tests/test_tool_env.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tool_env.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tool_env.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
pylint,   tests/test_tool_env.py:13:from, W0611, Unused GoRuntime imported from pyqa.tool_env
pylint,   tests/test_tool_env.py:13:from, W0611, Unused LuaRuntime imported from pyqa.tool_env
pylint,   tests/test_tool_env.py:13:from, W0611, Unused NpmRuntime imported from pyqa.tool_env
pylint,   tests/test_tool_env.py:13:from, W0611, Unused PerlRuntime imported from pyqa.tool_env
pylint,   tests/test_tool_env.py:13:from, W0611, Unused RustRuntime imported from pyqa.tool_env
ruff,     tests/test_tool_env.py:54:test_desired_version_prefers_package_spec, D103, Missing docstring in public function
pylint,   tests/test_tool_env.py:61:test_desired_version_prefers_package_spec, R2004, Consider using a named constant or an enum instead of ''9.13.0''.
ruff,     tests/test_tool_env.py:61:test_desired_version_prefers_package_spec, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:68:test_desired_version_prefers_package_spec, R2004, Consider using a named constant or an enum instead of ''5.3.1''.
ruff,     tests/test_tool_env.py:68:test_desired_version_prefers_package_spec, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:71:test_desired_version_prefers_package_spec, R2004, Consider using a named constant or an enum instead of ''0.6.9''.
ruff,     tests/test_tool_env.py:71:test_desired_version_prefers_package_spec, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:74:test_desired_version_prefers_package_spec, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:77:test_npm_runtime_falls_back_to_local_when_system_version_too_low, D103, Missing docstring in public function
mypy,     tests/test_tool_env.py:90:test_npm_runtime_falls_back_to_local_when_system_version_too_low, attr-defined, Module "pyqa.tool_env.runtimes.npm" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:94:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:94:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:94:fake_capture, ARG001, Unused function argument: `command`
ruff,     tests/test_tool_env.py:94:fake_capture, ARG001, Unused function argument: `env`
mypy,     tests/test_tool_env.py:97:test_npm_runtime_falls_back_to_local_when_system_version_too_low, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:97:test_npm_runtime_falls_back_to_local_when_system_version_too_low, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:106:fake_install, no-untyped-def, Function is missing a return type annotation
mypy,     tests/test_tool_env.py:106:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:106:fake_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:106:fake_install, ANN202, Missing return type annotation for private function `fake_install`
ruff,     tests/test_tool_env.py:106:fake_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:106:fake_install, ARG001, Unused function argument: `tool_obj`
ruff,     tests/test_tool_env.py:120:test_npm_runtime_falls_back_to_local_when_system_version_too_low, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:121:test_npm_runtime_falls_back_to_local_when_system_version_too_low, R2004, Consider using a named constant or an enum instead of ''local''.
ruff,     tests/test_tool_env.py:121:test_npm_runtime_falls_back_to_local_when_system_version_too_low, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:122:test_npm_runtime_falls_back_to_local_when_system_version_too_low, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:123:test_npm_runtime_falls_back_to_local_when_system_version_too_low, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:124:test_npm_runtime_falls_back_to_local_when_system_version_too_low, R2004, Consider using a named constant or an enum instead of ''9.13.0''.
ruff,     tests/test_tool_env.py:124:test_npm_runtime_falls_back_to_local_when_system_version_too_low, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:127:test_npm_runtime_prefers_system_when_version_sufficient, D103, Missing docstring in public function
mypy,     tests/test_tool_env.py:139:test_npm_runtime_prefers_system_when_version_sufficient, attr-defined, Module "pyqa.tool_env.runtimes.npm" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:143:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:143:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:143:fake_capture, ARG001, Unused function argument: `command`
ruff,     tests/test_tool_env.py:143:fake_capture, ARG001, Unused function argument: `env`
mypy,     tests/test_tool_env.py:146:test_npm_runtime_prefers_system_when_version_sufficient, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:146:test_npm_runtime_prefers_system_when_version_sufficient, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:148:fail_install, no-untyped-def, Function is missing a return type annotation
mypy,     tests/test_tool_env.py:148:fail_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:148:fail_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:148:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:148:fail_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:148:fail_install, ARG001, Unused function argument: `tool_obj`
ruff,     tests/test_tool_env.py:149:fail_install, EM101, Exception must not use a string literal, assign to variable first
ruff,     tests/test_tool_env.py:149:fail_install, TRY003, Avoid specifying long messages outside the exception class
pylint,   tests/test_tool_env.py:162:test_npm_runtime_prefers_system_when_version_sufficient, R2004, Consider using a named constant or an enum instead of ''system''.
ruff,     tests/test_tool_env.py:162:test_npm_runtime_prefers_system_when_version_sufficient, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:163:test_npm_runtime_prefers_system_when_version_sufficient, R2004, Consider using a named constant or an enum instead of ''eslint''.
ruff,     tests/test_tool_env.py:163:test_npm_runtime_prefers_system_when_version_sufficient, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:164:test_npm_runtime_prefers_system_when_version_sufficient, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:165:test_npm_runtime_prefers_system_when_version_sufficient, R2004, Consider using a named constant or an enum instead of ''9.13.1''.
ruff,     tests/test_tool_env.py:165:test_npm_runtime_prefers_system_when_version_sufficient, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:168:test_npm_runtime_install_failure_propagates, D103, Missing docstring in public function
ruff,     tests/test_tool_env.py:179:test_npm_runtime_install_failure_propagates, SLF001, Private member accessed: `_handlers`
mypy,     tests/test_tool_env.py:184:fail_install, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:184:fail_install, ANN002, Missing type annotation for `*args`
ruff,     tests/test_tool_env.py:184:fail_install, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:184:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:184:fail_install, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_tool_env.py:190:test_npm_runtime_install_failure_propagates, SLF001, Private member accessed: `_ensure_local_package`
pylint,   tests/test_tool_env.py:193:test_go_runtime_installs_when_system_too_old, R1260, 'test_go_runtime_installs_when_system_too_old' is too complex. The McCabe rating is 7
ruff,     tests/test_tool_env.py:193:test_go_runtime_installs_when_system_too_old, D103, Missing docstring in public function
pylint,   tests/test_tool_env.py:206:fake_which, R2004, Consider using a named constant or an enum instead of ''kube-linter''.
pylint,   tests/test_tool_env.py:208:fake_which, R2004, Consider using a named constant or an enum instead of ''go''.
mypy,     tests/test_tool_env.py:212:test_go_runtime_installs_when_system_too_old, attr-defined, Module "pyqa.tool_env.runtimes.go" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:216:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:216:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:216:fake_capture, ARG001, Unused function argument: `env`
pylint,   tests/test_tool_env.py:217:fake_capture, R2004, Consider using a named constant or an enum instead of ''kube-linter''.
mypy,     tests/test_tool_env.py:221:test_go_runtime_installs_when_system_too_old, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:221:test_go_runtime_installs_when_system_too_old, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:228:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:228:fake_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:228:fake_install, ARG001, Unused function argument: `binary_name`
ruff,     tests/test_tool_env.py:228:fake_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:228:fake_install, ARG001, Unused function argument: `tool_obj`
pylint,   tests/test_tool_env.py:242:test_go_runtime_installs_when_system_too_old, R2004, Consider using a named constant or an enum instead of ''local''.
ruff,     tests/test_tool_env.py:242:test_go_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:243:test_go_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:244:test_go_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:247:test_go_runtime_prefers_system_when_version_ok, D103, Missing docstring in public function
mypy,     tests/test_tool_env.py:264:test_go_runtime_prefers_system_when_version_ok, attr-defined, Module "pyqa.tool_env.runtimes.go" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:268:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:268:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:268:fake_capture, ARG001, Unused function argument: `env`
pylint,   tests/test_tool_env.py:269:fake_capture, R2004, Consider using a named constant or an enum instead of ''kube-linter''.
mypy,     tests/test_tool_env.py:273:test_go_runtime_prefers_system_when_version_ok, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:273:test_go_runtime_prefers_system_when_version_ok, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:275:fail_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:275:fail_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:275:fail_install, ARG001, Unused function argument: `binary_name`
ruff,     tests/test_tool_env.py:275:fail_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:275:fail_install, ARG001, Unused function argument: `tool_obj`
ruff,     tests/test_tool_env.py:276:fail_install, EM101, Exception must not use a string literal, assign to variable first
ruff,     tests/test_tool_env.py:276:fail_install, TRY003, Avoid specifying long messages outside the exception class
pylint,   tests/test_tool_env.py:289:test_go_runtime_prefers_system_when_version_ok, R2004, Consider using a named constant or an enum instead of ''system''.
ruff,     tests/test_tool_env.py:289:test_go_runtime_prefers_system_when_version_ok, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:290:test_go_runtime_prefers_system_when_version_ok, R2004, Consider using a named constant or an enum instead of ''kube-linter''.
ruff,     tests/test_tool_env.py:290:test_go_runtime_prefers_system_when_version_ok, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:293:test_go_runtime_installs_when_no_version_spec, D103, Missing docstring in public function
pylint,   tests/test_tool_env.py:306:fake_which, R2004, Consider using a named constant or an enum instead of ''go''.
pylint,   tests/test_tool_env.py:308:fake_which, R2004, Consider using a named constant or an enum instead of ''checkmake''.
mypy,     tests/test_tool_env.py:312:test_go_runtime_installs_when_no_version_spec, attr-defined, Module "pyqa.tool_env.runtimes.go" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:316:fake_install, no-untyped-def, Function is missing a return type annotation
mypy,     tests/test_tool_env.py:316:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:316:fake_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:316:fake_install, ANN202, Missing return type annotation for private function `fake_install`
ruff,     tests/test_tool_env.py:316:fake_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:316:fake_install, ARG001, Unused function argument: `tool_obj`
pylint,   tests/test_tool_env.py:335:test_go_runtime_installs_when_no_version_spec, R2004, Consider using a named constant or an enum instead of ''local''.
ruff,     tests/test_tool_env.py:335:test_go_runtime_installs_when_no_version_spec, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:336:test_go_runtime_installs_when_no_version_spec, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:339:test_go_runtime_install_failure_propagates, D103, Missing docstring in public function
ruff,     tests/test_tool_env.py:350:test_go_runtime_install_failure_propagates, SLF001, Private member accessed: `_handlers`
mypy,     tests/test_tool_env.py:356:fail_install, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:356:fail_install, ANN002, Missing type annotation for `*args`
ruff,     tests/test_tool_env.py:356:fail_install, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:356:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:356:fail_install, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_tool_env.py:362:test_go_runtime_install_failure_propagates, SLF001, Private member accessed: `_ensure_local_tool`
ruff,     tests/test_tool_env.py:365:test_lua_runtime_install_failure_propagates, D103, Missing docstring in public function
ruff,     tests/test_tool_env.py:372:test_lua_runtime_install_failure_propagates, SLF001, Private member accessed: `_handlers`
mypy,     tests/test_tool_env.py:377:fail_install, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:377:fail_install, ANN002, Missing type annotation for `*args`
ruff,     tests/test_tool_env.py:377:fail_install, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:377:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:377:fail_install, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_tool_env.py:383:test_lua_runtime_install_failure_propagates, SLF001, Private member accessed: `_ensure_local_tool`
ruff,     tests/test_tool_env.py:386:test_perl_runtime_install_failure_propagates, D103, Missing docstring in public function
ruff,     tests/test_tool_env.py:393:test_perl_runtime_install_failure_propagates, SLF001, Private member accessed: `_handlers`
mypy,     tests/test_tool_env.py:398:fail_install, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:398:fail_install, ANN002, Missing type annotation for `*args`
ruff,     tests/test_tool_env.py:398:fail_install, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:398:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:398:fail_install, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_tool_env.py:404:test_perl_runtime_install_failure_propagates, SLF001, Private member accessed: `_ensure_local_tool`
pylint,   tests/test_tool_env.py:407:test_rust_runtime_installs_when_system_too_old, R1260, 'test_rust_runtime_installs_when_system_too_old' is too complex. The McCabe rating is 7
ruff,     tests/test_tool_env.py:407:test_rust_runtime_installs_when_system_too_old, D103, Missing docstring in public function
pylint,   tests/test_tool_env.py:426:fake_which, R2004, Consider using a named constant or an enum instead of ''dotenv-linter''.
pylint,   tests/test_tool_env.py:428:fake_which, R2004, Consider using a named constant or an enum instead of ''cargo''.
mypy,     tests/test_tool_env.py:432:test_rust_runtime_installs_when_system_too_old, attr-defined, Module "pyqa.tool_env.runtimes.rust" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:436:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:436:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:436:fake_capture, ARG001, Unused function argument: `env`
pylint,   tests/test_tool_env.py:437:fake_capture, R2004, Consider using a named constant or an enum instead of ''dotenv-linter''.
mypy,     tests/test_tool_env.py:441:test_rust_runtime_installs_when_system_too_old, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:441:test_rust_runtime_installs_when_system_too_old, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:448:fake_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:448:fake_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:448:fake_install, ARG001, Unused function argument: `binary_name`
ruff,     tests/test_tool_env.py:448:fake_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:448:fake_install, ARG001, Unused function argument: `tool_obj`
pylint,   tests/test_tool_env.py:462:test_rust_runtime_installs_when_system_too_old, R2004, Consider using a named constant or an enum instead of ''local''.
ruff,     tests/test_tool_env.py:462:test_rust_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:463:test_rust_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:464:test_rust_runtime_installs_when_system_too_old, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:467:test_rust_runtime_prefers_system_when_version_ok, D103, Missing docstring in public function
mypy,     tests/test_tool_env.py:490:test_rust_runtime_prefers_system_when_version_ok, attr-defined, Module "pyqa.tool_env.runtimes.rust" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:494:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:494:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:494:fake_capture, ARG001, Unused function argument: `env`
pylint,   tests/test_tool_env.py:495:fake_capture, R2004, Consider using a named constant or an enum instead of ''dotenv-linter''.
mypy,     tests/test_tool_env.py:499:test_rust_runtime_prefers_system_when_version_ok, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:499:test_rust_runtime_prefers_system_when_version_ok, SLF001, Private member accessed: `_versions`
mypy,     tests/test_tool_env.py:501:fail_install, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:501:fail_install, ANN001, Missing type annotation for function argument `self`
ruff,     tests/test_tool_env.py:501:fail_install, ARG001, Unused function argument: `binary_name`
ruff,     tests/test_tool_env.py:501:fail_install, ARG001, Unused function argument: `self`
ruff,     tests/test_tool_env.py:501:fail_install, ARG001, Unused function argument: `tool_obj`
ruff,     tests/test_tool_env.py:502:fail_install, EM101, Exception must not use a string literal, assign to variable first
ruff,     tests/test_tool_env.py:502:fail_install, TRY003, Avoid specifying long messages outside the exception class
pylint,   tests/test_tool_env.py:515:test_rust_runtime_prefers_system_when_version_ok, R2004, Consider using a named constant or an enum instead of ''system''.
ruff,     tests/test_tool_env.py:515:test_rust_runtime_prefers_system_when_version_ok, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:516:test_rust_runtime_prefers_system_when_version_ok, R2004, Consider using a named constant or an enum instead of ''dotenv-linter''.
ruff,     tests/test_tool_env.py:516:test_rust_runtime_prefers_system_when_version_ok, S101, Use of `assert` detected
ruff,     tests/test_tool_env.py:519:test_rust_runtime_install_failure_propagates, D103, Missing docstring in public function
ruff,     tests/test_tool_env.py:526:test_rust_runtime_install_failure_propagates, SLF001, Private member accessed: `_handlers`
mypy,     tests/test_tool_env.py:531:fail_install, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:531:fail_install, ANN002, Missing type annotation for `*args`
ruff,     tests/test_tool_env.py:531:fail_install, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:531:fail_install, ANN202, Missing return type annotation for private function `fail_install`
ruff,     tests/test_tool_env.py:531:fail_install, ARG001, Unused function argument: `kwargs`
ruff,     tests/test_tool_env.py:537:test_rust_runtime_install_failure_propagates, SLF001, Private member accessed: `_ensure_local_tool`
pylint,   tests/test_tool_env.py:540:test_rust_runtime_install_rustup_component, R1260, 'test_rust_runtime_install_rustup_component' is too complex. The McCabe rating is 7
ruff,     tests/test_tool_env.py:540:test_rust_runtime_install_rustup_component, D103, Missing docstring in public function
pylint,   tests/test_tool_env.py:559:fake_which, R2004, Consider using a named constant or an enum instead of ''cargo''.
pylint,   tests/test_tool_env.py:561:fake_which, R2004, Consider using a named constant or an enum instead of ''rustup''.
mypy,     tests/test_tool_env.py:565:test_rust_runtime_install_rustup_component, attr-defined, Module "pyqa.tool_env.runtimes.rust" does not explicitly export attribute "shutil"
mypy,     tests/test_tool_env.py:569:fake_run, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_env.py:569:fake_run, ANN001, Missing type annotation for function argument `cmd`
ruff,     tests/test_tool_env.py:569:fake_run, ANN003, Missing type annotation for `**kwargs`
ruff,     tests/test_tool_env.py:569:fake_run, ANN202, Missing return type annotation for private function `fake_run`
ruff,     tests/test_tool_env.py:569:fake_run, ARG001, Unused function argument: `kwargs`
mypy,     tests/test_tool_env.py:577:fake_capture, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_env.py:577:fake_capture, ANN001, Missing type annotation for function argument `env`
ruff,     tests/test_tool_env.py:577:fake_capture, ARG001, Unused function argument: `env`
pylint,   tests/test_tool_env.py:578:fake_capture, R2004, Consider using a named constant or an enum instead of ''cargo''.
mypy,     tests/test_tool_env.py:582:test_rust_runtime_install_rustup_component, unused-ignore, Unused "type: ignore" comment
ruff,     tests/test_tool_env.py:582:test_rust_runtime_install_rustup_component, SLF001, Private member accessed: `_versions`
pylint,   tests/test_tool_env.py:593:test_rust_runtime_install_rustup_component, R2004, Consider using a named constant or an enum instead of ''/usr/bin/cargo''.
ruff,     tests/test_tool_env.py:593:test_rust_runtime_install_rustup_component, S101, Use of `assert` detected
pylint,   tests/test_tool_env.py:594:test_rust_runtime_install_rustup_component, R2004, Consider using a named constant or an enum instead of ''rustup''.
ruff,     tests/test_tool_env.py:594:test_rust_runtime_install_rustup_component, S101, Use of `assert` detected
ruff,     tests/test_tool_info.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tool_info.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tool_info.py:9:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_tool_info.py:18:test_tool_info_option, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_tool_info.py:18:test_tool_info_option, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_tool_info.py:18:test_tool_info_option, D103, Missing docstring in public function
mypy,     tests/test_tool_info.py:21:fake_run_tool_info, no-untyped-def, Function is missing a type annotation
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ANN001, Missing type annotation for function argument `cfg`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ANN001, Missing type annotation for function argument `console`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ANN001, Missing type annotation for function argument `root`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ANN001, Missing type annotation for function argument `tool_name`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ANN202, Missing return type annotation for private function `fake_run_tool_info`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ARG001, Unused function argument: `cfg`
ruff,     tests/test_tool_info.py:21:fake_run_tool_info, ARG001, Unused function argument: `console`
ruff,     tests/test_tool_info.py:22:fake_run_tool_info, T201, `print` found
ruff,     tests/test_tool_info.py:29:test_tool_info_option, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:30:test_tool_info_option, R2004, Consider using a named constant or an enum instead of ''tool info for ruff''.
ruff,     tests/test_tool_info.py:30:test_tool_info_option, S101, Use of `assert` detected
ruff,     tests/test_tool_info.py:33:test_run_tool_info_includes_mypy_defaults, D103, Missing docstring in public function
ruff,     tests/test_tool_info.py:39:test_run_tool_info_includes_mypy_defaults, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:41:test_run_tool_info_includes_mypy_defaults, R2004, Consider using a named constant or an enum instead of ''--strict''.
ruff,     tests/test_tool_info.py:41:test_run_tool_info_includes_mypy_defaults, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:42:test_run_tool_info_includes_mypy_defaults, R2004, Consider using a named constant or an enum instead of ''--warn-unused-ignores''.
ruff,     tests/test_tool_info.py:42:test_run_tool_info_includes_mypy_defaults, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:43:test_run_tool_info_includes_mypy_defaults, R2004, Consider using a named constant or an enum instead of ''--show-error-codes''.
ruff,     tests/test_tool_info.py:43:test_run_tool_info_includes_mypy_defaults, S101, Use of `assert` detected
ruff,     tests/test_tool_info.py:46:test_run_tool_info_includes_pylint_plugins, D103, Missing docstring in public function
ruff,     tests/test_tool_info.py:52:test_run_tool_info_includes_pylint_plugins, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:54:test_run_tool_info_includes_pylint_plugins, R2004, Consider using a named constant or an enum instead of ''--load-plugins''.
ruff,     tests/test_tool_info.py:54:test_run_tool_info_includes_pylint_plugins, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:55:test_run_tool_info_includes_pylint_plugins, R2004, Consider using a named constant or an enum instead of ''pylint.extensions.docparams''.
ruff,     tests/test_tool_info.py:55:test_run_tool_info_includes_pylint_plugins, S101, Use of `assert` detected
pylint,   tests/test_tool_info.py:56:test_run_tool_info_includes_pylint_plugins, R2004, Consider using a named constant or an enum instead of ''--max-complexity''.
ruff,     tests/test_tool_info.py:56:test_run_tool_info_includes_pylint_plugins, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tool_registry.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tool_registry.py:6:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_tool_registry.py:18:test_registry_behaves_like_mapping, ARG001, Unused function argument: `tmp_path`
ruff,     tests/test_tool_registry.py:18:test_registry_behaves_like_mapping, D103, Missing docstring in public function
ruff,     tests/test_tool_registry.py:23:test_registry_behaves_like_mapping, S101, Use of `assert` detected
pylint,   tests/test_tool_registry.py:24:test_registry_behaves_like_mapping, R2004, Consider using a named constant or an enum instead of ''demo''.
ruff,     tests/test_tool_registry.py:24:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:25:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:26:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:27:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:28:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:29:test_registry_behaves_like_mapping, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:32:test_registry_tools_for_language, ARG001, Unused function argument: `tmp_path`
ruff,     tests/test_tool_registry.py:32:test_registry_tools_for_language, D103, Missing docstring in public function
ruff,     tests/test_tool_registry.py:46:test_registry_tools_for_language, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:47:test_registry_tools_for_language, S101, Use of `assert` detected
ruff,     tests/test_tool_registry.py:50:test_registry_tools_iterator_builds_commands, D103, Missing docstring in public function
ruff,     tests/test_tool_registry.py:60:test_registry_tools_iterator_builds_commands, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tool_settings.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tool_settings.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
pylint,   tests/test_tool_settings.py:21:_tool, R6103, Use 'if (result := registry.try_get(name)) is None:' instead
ruff,     tests/test_tool_settings.py:22:_tool, EM102, Exception must not use an f-string literal, assign to variable first
ruff,     tests/test_tool_settings.py:22:_tool, TRY003, Avoid specifying long messages outside the exception class
ruff,     tests/test_tool_settings.py:26:test_ruff_settings_inject_flags, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:39:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''lint''.
pylint,   tests/test_tool_settings.py:48:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--select''.
pylint,   tests/test_tool_settings.py:48:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''E,F''.
ruff,     tests/test_tool_settings.py:48:test_ruff_settings_inject_flags, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:48:test_ruff_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:49:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--target-version''.
pylint,   tests/test_tool_settings.py:49:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''py311''.
ruff,     tests/test_tool_settings.py:49:test_ruff_settings_inject_flags, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:49:test_ruff_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:50:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_tool_settings.py:50:test_ruff_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:51:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''ruff.toml''.
ruff,     tests/test_tool_settings.py:51:test_ruff_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:52:test_ruff_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--show-source''.
ruff,     tests/test_tool_settings.py:52:test_ruff_settings_inject_flags, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:53:test_ruff_settings_inject_flags, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:56:test_ruff_defaults_target_version, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:60:test_ruff_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''lint''.
pylint,   tests/test_tool_settings.py:69:test_ruff_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''--target-version''.
ruff,     tests/test_tool_settings.py:69:test_ruff_defaults_target_version, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:70:test_ruff_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''py312''.
ruff,     tests/test_tool_settings.py:70:test_ruff_defaults_target_version, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:73:test_black_settings_inject_flags, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:83:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''check''.
pylint,   tests/test_tool_settings.py:92:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--line-length''.
pylint,   tests/test_tool_settings.py:92:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''100''.
ruff,     tests/test_tool_settings.py:92:test_black_settings_inject_flags, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:92:test_black_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:93:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--target-version''.
pylint,   tests/test_tool_settings.py:93:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''py311''.
ruff,     tests/test_tool_settings.py:93:test_black_settings_inject_flags, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:93:test_black_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:94:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--preview''.
ruff,     tests/test_tool_settings.py:94:test_black_settings_inject_flags, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:95:test_black_settings_inject_flags, R2004, Consider using a named constant or an enum instead of ''--diff''.
ruff,     tests/test_tool_settings.py:95:test_black_settings_inject_flags, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:98:test_black_defaults_target_version, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:102:test_black_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''check''.
pylint,   tests/test_tool_settings.py:111:test_black_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''--target-version''.
ruff,     tests/test_tool_settings.py:111:test_black_defaults_target_version, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:112:test_black_defaults_target_version, R2004, Consider using a named constant or an enum instead of ''py310''.
ruff,     tests/test_tool_settings.py:112:test_black_defaults_target_version, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:115:test_bandit_settings_extend_command, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:140:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--severity-level''.
pylint,   tests/test_tool_settings.py:140:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''medium''.
ruff,     tests/test_tool_settings.py:140:test_bandit_settings_extend_command, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:140:test_bandit_settings_extend_command, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:141:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--confidence-level''.
pylint,   tests/test_tool_settings.py:141:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''high''.
ruff,     tests/test_tool_settings.py:141:test_bandit_settings_extend_command, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:141:test_bandit_settings_extend_command, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:142:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   tests/test_tool_settings.py:142:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''txt''.
ruff,     tests/test_tool_settings.py:142:test_bandit_settings_extend_command, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:142:test_bandit_settings_extend_command, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:143:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--baseline''.
ruff,     tests/test_tool_settings.py:143:test_bandit_settings_extend_command, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:144:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--skip''.
ruff,     tests/test_tool_settings.py:144:test_bandit_settings_extend_command, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:145:test_bandit_settings_extend_command, R2004, Consider using a named constant or an enum instead of ''--quiet''.
ruff,     tests/test_tool_settings.py:145:test_bandit_settings_extend_command, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:146:test_bandit_settings_extend_command, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:149:test_isort_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:162:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''sort''.
pylint,   tests/test_tool_settings.py:171:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''--line-length''.
pylint,   tests/test_tool_settings.py:171:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''120''.
ruff,     tests/test_tool_settings.py:171:test_isort_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:171:test_isort_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:172:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''--profile''.
pylint,   tests/test_tool_settings.py:172:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''black''.
ruff,     tests/test_tool_settings.py:172:test_isort_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:172:test_isort_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:173:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''--skip''.
pylint,   tests/test_tool_settings.py:173:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''__init__.py''.
ruff,     tests/test_tool_settings.py:173:test_isort_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:173:test_isort_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:174:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''--src''.
ruff,     tests/test_tool_settings.py:174:test_isort_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:174:test_isort_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:175:test_isort_settings, R2004, Consider using a named constant or an enum instead of ''--color''.
ruff,     tests/test_tool_settings.py:175:test_isort_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:178:test_isort_defaults_python_version, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:182:test_isort_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''sort''.
pylint,   tests/test_tool_settings.py:191:test_isort_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''--py''.
ruff,     tests/test_tool_settings.py:191:test_isort_defaults_python_version, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:192:test_isort_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''311''.
ruff,     tests/test_tool_settings.py:192:test_isort_defaults_python_version, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:195:test_isort_defaults_profile_black, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:198:test_isort_defaults_profile_black, R2004, Consider using a named constant or an enum instead of ''sort''.
pylint,   tests/test_tool_settings.py:207:test_isort_defaults_profile_black, R2004, Consider using a named constant or an enum instead of ''--profile''.
ruff,     tests/test_tool_settings.py:207:test_isort_defaults_profile_black, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:208:test_isort_defaults_profile_black, R2004, Consider using a named constant or an enum instead of ''black''.
ruff,     tests/test_tool_settings.py:208:test_isort_defaults_profile_black, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:211:test_pylint_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:232:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--rcfile''.
ruff,     tests/test_tool_settings.py:232:test_pylint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:232:test_pylint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:233:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--disable''.
pylint,   tests/test_tool_settings.py:233:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''C0114''.
ruff,     tests/test_tool_settings.py:233:test_pylint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:233:test_pylint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:234:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--exit-zero''.
ruff,     tests/test_tool_settings.py:234:test_pylint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:236:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--py-version''.
ruff,     tests/test_tool_settings.py:236:test_pylint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:236:test_pylint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:237:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--max-complexity''.
pylint,   tests/test_tool_settings.py:237:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''10''.
ruff,     tests/test_tool_settings.py:237:test_pylint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:237:test_pylint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:238:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''--max-args''.
pylint,   tests/test_tool_settings.py:238:test_pylint_settings, R2004, Consider using a named constant or an enum instead of ''5''.
ruff,     tests/test_tool_settings.py:238:test_pylint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:238:test_pylint_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:241:test_pylint_init_import_flag, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:255:test_pylint_init_import_flag, R2004, Consider using a named constant or an enum instead of ''--init-import=y''.
ruff,     tests/test_tool_settings.py:255:test_pylint_init_import_flag, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:258:test_pylint_init_import_false, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:272:test_pylint_init_import_false, R2004, Consider using a named constant or an enum instead of ''--init-import=n''.
ruff,     tests/test_tool_settings.py:272:test_pylint_init_import_false, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:275:test_mypy_defaults_include_strict_flags, D103, Missing docstring in public function
ruff,     tests/test_tool_settings.py:306:test_mypy_defaults_include_strict_flags, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:309:test_mypy_defaults_python_version, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:324:test_mypy_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''--python-version''.
ruff,     tests/test_tool_settings.py:324:test_mypy_defaults_python_version, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:325:test_mypy_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''3.9''.
ruff,     tests/test_tool_settings.py:325:test_mypy_defaults_python_version, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:328:test_pylint_defaults_include_plugins, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:344:test_pylint_defaults_include_plugins, R2004, Consider using a named constant or an enum instead of ''--load-plugins''.
ruff,     tests/test_tool_settings.py:344:test_pylint_defaults_include_plugins, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:347:test_pylint_defaults_include_plugins, R2004, Consider using a named constant or an enum instead of ''pylint.extensions.docparams''.
ruff,     tests/test_tool_settings.py:347:test_pylint_defaults_include_plugins, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:350:test_pyright_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:370:test_pyright_settings, R2004, Consider using a named constant or an enum instead of ''--project''.
ruff,     tests/test_tool_settings.py:370:test_pyright_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:370:test_pyright_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:371:test_pyright_settings, R2004, Consider using a named constant or an enum instead of ''--pythonversion''.
pylint,   tests/test_tool_settings.py:371:test_pyright_settings, R2004, Consider using a named constant or an enum instead of ''3.11''.
ruff,     tests/test_tool_settings.py:371:test_pyright_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:371:test_pyright_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:372:test_pyright_settings, R2004, Consider using a named constant or an enum instead of ''--warnings''.
ruff,     tests/test_tool_settings.py:372:test_pyright_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:375:test_pyright_defaults_python_version, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:388:test_pyright_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''--pythonversion''.
ruff,     tests/test_tool_settings.py:388:test_pyright_defaults_python_version, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:389:test_pyright_defaults_python_version, R2004, Consider using a named constant or an enum instead of ''3.8''.
ruff,     tests/test_tool_settings.py:389:test_pyright_defaults_python_version, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:392:test_pyupgrade_defaults, D103, Missing docstring in public function
ruff,     tests/test_tool_settings.py:408:test_pyupgrade_defaults, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:409:test_pyupgrade_defaults, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:412:test_pyupgrade_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:432:test_pyupgrade_settings, R2004, Consider using a named constant or an enum instead of ''--py38-plus''.
ruff,     tests/test_tool_settings.py:432:test_pyupgrade_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:433:test_pyupgrade_settings, R2004, Consider using a named constant or an enum instead of ''--keep-mock''.
ruff,     tests/test_tool_settings.py:433:test_pyupgrade_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:434:test_pyupgrade_settings, R2004, Consider using a named constant or an enum instead of ''--exit-zero-even-if-changed''.
ruff,     tests/test_tool_settings.py:434:test_pyupgrade_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:437:test_eslint_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:450:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''lint''.
pylint,   tests/test_tool_settings.py:459:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_tool_settings.py:459:test_eslint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:459:test_eslint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:460:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''--ext''.
pylint,   tests/test_tool_settings.py:460:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''.ts''.
ruff,     tests/test_tool_settings.py:460:test_eslint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:460:test_eslint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:461:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''--max-warnings''.
pylint,   tests/test_tool_settings.py:461:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''0''.
ruff,     tests/test_tool_settings.py:461:test_eslint_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:461:test_eslint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:462:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''--cache''.
ruff,     tests/test_tool_settings.py:462:test_eslint_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:463:test_eslint_settings, R2004, Consider using a named constant or an enum instead of ''--no-inline-config''.
ruff,     tests/test_tool_settings.py:463:test_eslint_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:466:test_prettier_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:479:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''format''.
pylint,   tests/test_tool_settings.py:488:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_tool_settings.py:488:test_prettier_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:488:test_prettier_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:489:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''--single-quote''.
ruff,     tests/test_tool_settings.py:489:test_prettier_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:490:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''--tab-width''.
pylint,   tests/test_tool_settings.py:490:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''2''.
ruff,     tests/test_tool_settings.py:490:test_prettier_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:490:test_prettier_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:491:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''--parser''.
pylint,   tests/test_tool_settings.py:491:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''typescript''.
ruff,     tests/test_tool_settings.py:491:test_prettier_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:491:test_prettier_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:492:test_prettier_settings, R2004, Consider using a named constant or an enum instead of ''--no-error-on-unmatched-pattern''.
ruff,     tests/test_tool_settings.py:492:test_prettier_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:495:test_tsc_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:514:test_tsc_settings, R2004, Consider using a named constant or an enum instead of ''--project''.
ruff,     tests/test_tool_settings.py:514:test_tsc_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:514:test_tsc_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:515:test_tsc_settings, R2004, Consider using a named constant or an enum instead of ''--watch''.
ruff,     tests/test_tool_settings.py:515:test_tsc_settings, S101, Use of `assert` detected
ruff,     tests/test_tool_settings.py:518:test_golangci_settings, D103, Missing docstring in public function
pylint,   tests/test_tool_settings.py:539:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''--config''.
ruff,     tests/test_tool_settings.py:539:test_golangci_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:539:test_golangci_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:540:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''--enable''.
pylint,   tests/test_tool_settings.py:540:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''gofmt''.
ruff,     tests/test_tool_settings.py:540:test_golangci_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:540:test_golangci_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:541:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''--disable''.
pylint,   tests/test_tool_settings.py:541:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''lll''.
ruff,     tests/test_tool_settings.py:541:test_golangci_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:541:test_golangci_settings, S101, Use of `assert` detected
pylint,   tests/test_tool_settings.py:542:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''--deadline''.
pylint,   tests/test_tool_settings.py:542:test_golangci_settings, R2004, Consider using a named constant or an enum instead of ''2m''.
ruff,     tests/test_tool_settings.py:542:test_golangci_settings, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_tool_settings.py:542:test_golangci_settings, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_tools_base.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_tools_base.py:6:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_tools_base.py:18:test_tool_iterable_and_indexable, ARG001, Unused function argument: `tmp_path`
ruff,     tests/test_tools_base.py:18:test_tool_iterable_and_indexable, D103, Missing docstring in public function
pylint,   tests/test_tools_base.py:21:test_tool_iterable_and_indexable, R2004, Consider using a named constant or an enum instead of '2'.
ruff,     tests/test_tools_base.py:21:test_tool_iterable_and_indexable, PLR2004, Magic value used in comparison, consider replacing `2` with a constant variable
ruff,     tests/test_tools_base.py:21:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:23:test_tool_iterable_and_indexable, S101, Use of `assert` detected
pylint,   tests/test_tools_base.py:24:test_tool_iterable_and_indexable, R2004, Consider using a named constant or an enum instead of ''lint''.
ruff,     tests/test_tools_base.py:24:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:25:test_tool_iterable_and_indexable, S101, Use of `assert` detected
pylint,   tests/test_tools_base.py:27:test_tool_iterable_and_indexable, R2004, Consider using a named constant or an enum instead of ''lint''.
ruff,     tests/test_tools_base.py:27:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:28:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:29:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:30:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:31:test_tool_iterable_and_indexable, S101, Use of `assert` detected
pyright,  tests/test_tools_base.py:34:test_tool_iterable_and_indexable, reportOptionalMemberAccess, "name" is not a known attribute of "None"
mypy,     tests/test_tools_base.py:35:test_tool_iterable_and_indexable, union-attr, Item "None" of "ToolAction | None" has no attribute "name"
pylint,   tests/test_tools_base.py:35:test_tool_iterable_and_indexable, R2004, Consider using a named constant or an enum instead of ''lint''.
ruff,     tests/test_tools_base.py:35:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:36:test_tool_iterable_and_indexable, S101, Use of `assert` detected
ruff,     tests/test_tools_base.py:39:test_tool_context_builds_commands, D103, Missing docstring in public function
ruff,     tests/test_tools_base.py:46:test_tool_context_builds_commands, S101, Use of `assert` detected
ruff,     tests/test_update.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_update.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_update.py:7:from, TC003, Move standard library import `collections.abc.Sequence` into a type-checking block
ruff,     tests/test_update.py:23:RecordingRunner, D101, Missing docstring in public class
ruff,     tests/test_update.py:24:__init__, D107, Missing docstring in `__init__`
ruff,     tests/test_update.py:27:__call__, D102, Missing docstring in public method
ruff,     tests/test_update.py:47:test_workspace_discovery_identifies_managers, D103, Missing docstring in public function
ruff,     tests/test_update.py:52:test_workspace_discovery_identifies_managers, S101, Use of `assert` detected
ruff,     tests/test_update.py:53:test_workspace_discovery_identifies_managers, S101, Use of `assert` detected
ruff,     tests/test_update.py:54:test_workspace_discovery_identifies_managers, S101, Use of `assert` detected
mypy,     tests/test_update.py:57:test_python_workspace_runs_uv_commands, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_update.py:57:test_python_workspace_runs_uv_commands, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_update.py:57:test_python_workspace_runs_uv_commands, D103, Missing docstring in public function
ruff,     tests/test_update.py:77:test_python_workspace_runs_uv_commands, S101, Use of `assert` detected
ruff,     tests/test_update.py:78:test_python_workspace_runs_uv_commands, S101, Use of `assert` detected
mypy,     tests/test_update.py:90:test_update_cli_dry_run, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_update.py:90:test_update_cli_dry_run, ANN001, Missing type annotation for function argument `monkeypatch`
ruff,     tests/test_update.py:90:test_update_cli_dry_run, D103, Missing docstring in public function
ruff,     tests/test_update.py:95:test_update_cli_dry_run, ARG005, Unused lambda argument: `cmd`
ruff,     tests/test_update.py:109:test_update_cli_dry_run, S101, Use of `assert` detected
pylint,   tests/test_update.py:110:test_update_cli_dry_run, R2004, Consider using a named constant or an enum instead of ''DRY RUN''.
ruff,     tests/test_update.py:110:test_update_cli_dry_run, S101, Use of `assert` detected
ruff,     tests/test_workspace.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_workspace.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_workspace.py:7:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
ruff,     tests/test_workspace.py:12:test_is_py_qa_workspace_true, D103, Missing docstring in public function
ruff,     tests/test_workspace.py:16:test_is_py_qa_workspace_true, S101, Use of `assert` detected
ruff,     tests/test_workspace.py:19:test_is_py_qa_workspace_accepts_variant, D103, Missing docstring in public function
ruff,     tests/test_workspace.py:23:test_is_py_qa_workspace_accepts_variant, S101, Use of `assert` detected
ruff,     tests/test_workspace.py:26:test_is_py_qa_workspace_false, D103, Missing docstring in public function
ruff,     tests/test_workspace.py:30:test_is_py_qa_workspace_false, S101, Use of `assert` detected
ruff,     tests/test_yamllint_tool.py:1:# SPDX-License-Identifier: MIT, INP001, File `tests/test_yamllint_tool.py` is part of an implicit namespace package. Add an `__init__.py`.
ruff,     tests/test_yamllint_tool.py:8:from, TC003, Move standard library import `pathlib.Path` into a type-checking block
mypy,     tests/test_yamllint_tool.py:15:_ctx, no-untyped-def, Function is missing a type annotation for one or more arguments
ruff,     tests/test_yamllint_tool.py:15:_ctx, ANN003, Missing type annotation for `**settings`
ruff,     tests/test_yamllint_tool.py:25:test_yamllint_command_includes_json_format, D103, Missing docstring in public function
pylint,   tests/test_yamllint_tool.py:34:test_yamllint_command_includes_json_format, R2004, Consider using a named constant or an enum instead of ''yamllint''.
ruff,     tests/test_yamllint_tool.py:34:test_yamllint_command_includes_json_format, S101, Use of `assert` detected
pylint,   tests/test_yamllint_tool.py:35:test_yamllint_command_includes_json_format, R2004, Consider using a named constant or an enum instead of ''--format''.
pylint,   tests/test_yamllint_tool.py:35:test_yamllint_command_includes_json_format, R2004, Consider using a named constant or an enum instead of ''parsable''.
ruff,     tests/test_yamllint_tool.py:35:test_yamllint_command_includes_json_format, PT018, Assertion should be broken down into multiple parts
ruff,     tests/test_yamllint_tool.py:35:test_yamllint_command_includes_json_format, S101, Use of `assert` detected
pylint,   tests/test_yamllint_tool.py:36:test_yamllint_command_includes_json_format, R2004, Consider using a named constant or an enum instead of ''--config-file''.
ruff,     tests/test_yamllint_tool.py:36:test_yamllint_command_includes_json_format, S101, Use of `assert` detected
ruff,     tests/test_yamllint_tool.py:37:test_yamllint_command_includes_json_format, S101, Use of `assert` detected
ruff,     tests/test_yamllint_tool.py:40:test_yamllint_allows_strict_flag, D103, Missing docstring in public function
pylint,   tests/test_yamllint_tool.py:49:test_yamllint_allows_strict_flag, R2004, Consider using a named constant or an enum instead of ''--strict''.
ruff,     tests/test_yamllint_tool.py:49:test_yamllint_allows_strict_flag, S101, Use of `assert` detected
pylint,   tests/test_yamllint_tool.py:50:test_yamllint_allows_strict_flag, R2004, Consider using a named constant or an enum instead of ''--no-warnings''.
ruff,     tests/test_yamllint_tool.py:50:test_yamllint_allows_strict_flag, S101, Use of `assert` detected
╭──────────── 📊 stats ────────────╮
│                                  │
│  Files                      275  │
│  Lines of code           55,598  │
│  Lint suppressions           33  │
│  - noqa suppressions          4  │
│  - pylint suppressions        0  │
│  - mypy suppressions         24  │
│  - nosec suppressions         5  │
│  Warnings / LoC           0.066  │
│                                  │
╰──────────────────────────────────╯
❌ Failed — 3679 diagnostic(s) across 275 file(s); 16 failing action(s) out of 36
