ruff format --force-exclude --line-length 120 --help

Run the Ruff formatter on the given files or directories

Usage: ruff format [OPTIONS] [FILES]...

Arguments:
  [FILES]...
          List of files or directories to format [default: .]

Options:
      --check
          Avoid writing any formatted files back; instead, exit with a non-zero status code if any files would have been modified, and zero otherwise

      --diff
          Avoid writing any formatted files back; instead, exit with a non-zero status code and the difference between the current file and how the formatted file would look like

      --extension <EXTENSION>
          List of mappings from file extension to language (one of `python`, `ipynb`, `pyi`). For example, to treat `.ipy` files as IPython notebooks, use `--extension ipy:ipynb`

      --target-version <TARGET_VERSION>
          The minimum Python version that should be supported
          
          [possible values: py37, py38, py39, py310, py311, py312, py313, py314]

      --preview
          Enable preview mode; enables unstable formatting. Use `--no-preview` to disable

  -h, --help
          Print help (see a summary with '-h')

Miscellaneous:
  -n, --no-cache
          Disable cache reads
          
          [env: RUFF_NO_CACHE=]

      --cache-dir <CACHE_DIR>
          Path to the cache directory
          
          [env: RUFF_CACHE_DIR=]

      --stdin-filename <STDIN_FILENAME>
          The name of the file when passing it through stdin

      --exit-non-zero-on-format
          Exit with a non-zero status code if any files were modified via format, even if all files were formatted successfully

File selection:
      --respect-gitignore
          Respect file exclusions via `.gitignore` and other standard ignore files. Use `--no-respect-gitignore` to disable

      --exclude <FILE_PATTERN>
          List of paths, used to omit files and/or directories from analysis

      --force-exclude
          Enforce exclusions, even for paths passed to Ruff directly on the command-line. Use `--no-force-exclude` to disable

Format configuration:
      --line-length <LINE_LENGTH>
          Set the line-length

Editor options:
      --range <RANGE>
          When specified, Ruff will try to only format the code in the given range.
          It might be necessary to extend the start backwards or the end forwards, to fully enclose a logical line.
          The `<RANGE>` uses the format `<start_line>:<start_column>-<end_line>:<end_column>`.
          
          - The line and column numbers are 1 based.
          - The column specifies the nth-unicode codepoint on that line.
          - The end offset is exclusive.
          - The column numbers are optional. You can write `--range=1-2` instead of `--range=1:1-2:1`.
          - The end position is optional. You can write `--range=2` to format the entire document starting from the second line.
          - The start position is optional. You can write `--range=-3` to format the first three lines of the document.
          
          The option can only be used when formatting a single file. Range formatting of notebooks is unsupported.

Log levels:
  -v, --verbose
          Enable verbose logging

  -q, --quiet
          Print diagnostics, but nothing else

  -s, --silent
          Disable all logging (but still exit with status code "1" upon detecting diagnostics)

Global options:
      --config <CONFIG_OPTION>
          Either a path to a TOML configuration file (`pyproject.toml` or `ruff.toml`), or a TOML `<KEY> = <VALUE>` pair (such as you might find in a `ruff.toml` configuration file) overriding a specific configuration option. Overrides of individual settings using this option always take precedence over all configuration files, including configuration files that were also specified using `--config`

      --isolated
          Ignore all configuration files
