{
  "_copyright": "Copyright (c) 2025 Blackcat InformaticsÂ® Inc.",
  "_license": "SPDX-License-Identifier: MIT",
  "bandit": {
    "args": {
      "description": "Additional arguments appended to bandit.",
      "type": "list[str]"
    },
    "baseline": {
      "description": "Baseline results file path.",
      "type": "path"
    },
    "confidence": {
      "description": "Minimum confidence level (low/medium/high).",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "type": "str"
    },
    "config": {
      "description": "Bandit configuration file path.",
      "type": "path"
    },
    "exclude": {
      "description": "Additional directories/files to exclude from scanning.",
      "type": "list[str]"
    },
    "format": {
      "description": "Output format (json, txt, etc.).",
      "enum": [
        "json",
        "txt",
        "yaml",
        "xml"
      ],
      "type": "str"
    },
    "severity": {
      "description": "Minimum severity level (low/medium/high).",
      "enum": [
        "low",
        "medium",
        "high"
      ],
      "type": "str"
    },
    "skip": {
      "description": "Tests to skip (e.g. S101).",
      "type": "list[str]"
    },
    "targets": {
      "description": "Extra directories to include when scanning.",
      "type": "list[str]"
    }
  },
  "black": {
    "args": {
      "description": "Additional arguments appended to Black.",
      "type": "list[str]"
    },
    "config": {
      "description": "Black configuration file.",
      "type": "path"
    },
    "line-length": {
      "description": "Maximum line length enforced by Black.",
      "type": "int"
    },
    "preview": {
      "description": "Enable Black preview mode.",
      "type": "bool"
    },
    "skip-magic-trailing-comma": {
      "description": "Disable automatic trailing comma insertion.",
      "type": "bool"
    },
    "skip-string-normalization": {
      "description": "Disable quote normalization transformations.",
      "type": "bool"
    },
    "target-version": {
      "description": "Allowed Python target versions (e.g. py311).",
      "enum": [
        "py37",
        "py38",
        "py39",
        "py310",
        "py311",
        "py312",
        "py313"
      ],
      "type": "list[str]"
    },
    "workers": {
      "description": "Number of worker processes (-j).",
      "type": "int"
    }
  },
  "cargo-clippy": {
    "args": {
      "description": "Additional arguments appended to the cargo clippy invocation.",
      "type": "list[str]"
    }
  },
  "cargo-fmt": {
    "args": {
      "description": "Additional arguments appended to cargo fmt.",
      "type": "list[str]"
    }
  },
  "checkmake": {
    "args": {
      "description": "Additional arguments appended to checkmake.",
      "type": "list[str]"
    },
    "config": {
      "description": "Custom checkmake configuration file.",
      "type": "path"
    },
    "ignore": {
      "description": "Rule identifiers to suppress during linting.",
      "type": "list[str]"
    }
  },
  "cpplint": {
    "args": {
      "description": "Additional arguments appended to cpplint.",
      "type": "list[str]"
    },
    "counting": {
      "description": "Whether to count errors as extensions or real errors (quiet, total).",
      "type": "str"
    },
    "exclude": {
      "description": "Paths excluded from linting.",
      "type": "path"
    },
    "extensions": {
      "description": "Additional file extensions treated as C/C++ sources.",
      "type": "list[str]"
    },
    "filter": {
      "description": "Category filters applied to cpplint diagnostics.",
      "type": "list[str]"
    },
    "headers": {
      "description": "Header extensions treated as C/C++ headers.",
      "type": "list[str]"
    },
    "includeorder": {
      "description": "Override include ordering category.",
      "type": "str"
    },
    "incremental": {
      "description": "Incremental mode that only reports new errors.",
      "type": "bool"
    },
    "line-length": {
      "description": "Maximum allowed line length.",
      "type": "int"
    },
    "pretty": {
      "description": "Enable pretty printing (ANSI colors).",
      "type": "bool"
    },
    "recursive": {
      "description": "Recursively lint directories.",
      "type": "bool"
    },
    "repository": {
      "description": "Repository root used to normalize include paths.",
      "type": "path"
    },
    "root": {
      "description": "Project root for header detection.",
      "type": "path"
    },
    "skip-lib-check": {
      "description": "Skip checking system libraries.",
      "type": "bool"
    },
    "strict": {
      "description": "Enable strict mode.",
      "type": "bool"
    },
    "watch": {
      "description": "Watch files and rerun automatically.",
      "type": "bool"
    }
  },
  "dockerfilelint": {
    "args": {
      "description": "Additional arguments appended to dockerfilelint.",
      "type": "list[str]"
    },
    "config": {
      "description": "Configuration file supplied to dockerfilelint.",
      "type": "path"
    }
  },
  "dotenv-linter": {
    "args": {
      "description": "Additional arguments appended to dotenv-linter.",
      "type": "list[str]"
    },
    "exclude": {
      "description": "Directories or files to exclude from linting.",
      "type": "path"
    },
    "recursive": {
      "description": "Recurse into directories when linting.",
      "type": "bool"
    },
    "schema": {
      "description": "JSON schema used to validate dotenv files.",
      "type": "path"
    },
    "skip": {
      "description": "Rules to skip during linting (e.g. LeadingCharacter).",
      "type": "list[str]"
    }
  },
  "eslint": {
    "args": {
      "description": "Additional arguments appended to ESLint.",
      "type": "list[str]"
    },
    "cache": {
      "description": "Enable ESLint result caching.",
      "type": "bool"
    },
    "cache-location": {
      "description": "Where ESLint stores cache data.",
      "type": "path"
    },
    "config": {
      "description": "ESLint configuration file or directory.",
      "type": "path"
    },
    "ext": {
      "description": "Additional file extensions to lint.",
      "type": "list[str]"
    },
    "fix-type": {
      "description": "Limit fixes to the given rule types.",
      "type": "list[str]"
    },
    "ignore-path": {
      "description": "Custom .eslintignore file path.",
      "type": "path"
    },
    "max-warnings": {
      "description": "Exit with error if warnings exceed this count.",
      "type": "int"
    },
    "no-error-on-unmatched-pattern": {
      "description": "Treat unmatched patterns as success instead of failure.",
      "type": "bool"
    },
    "quiet": {
      "description": "Suppress reporting of warnings.",
      "type": "bool"
    },
    "report-unused-disable-directives": {
      "description": "Control reporting for unused eslint-disable comments.",
      "type": "str"
    },
    "resolve-plugins-relative-to": {
      "description": "Directory from which ESLint resolves plugins.",
      "type": "path"
    },
    "rulesdir": {
      "description": "Directories containing custom ESLint rules.",
      "type": "list[str]"
    }
  },
  "gofmt": {
    "args": {
      "description": "Additional arguments appended to gofmt.",
      "type": "list[str]"
    }
  },
  "golangci-lint": {
    "args": {
      "description": "Additional arguments appended to golangci-lint run.",
      "type": "list[str]"
    },
    "build-tags": {
      "description": "Go build tags supplied to the run.",
      "type": "list[str]"
    },
    "config": {
      "description": "golangci-lint configuration file path.",
      "type": "path"
    },
    "deadline": {
      "description": "Timeout value passed to --deadline.",
      "type": "str"
    },
    "disable": {
      "description": "Linters to disable explicitly.",
      "type": "list[str]"
    },
    "enable": {
      "description": "Linters to enable explicitly.",
      "type": "list[str]"
    },
    "issues-exit-code": {
      "description": "Custom exit code when issues are found.",
      "type": "int"
    },
    "skip-dirs": {
      "description": "Regex patterns of directories to skip.",
      "type": "list[str]"
    },
    "skip-files": {
      "description": "Regex patterns of files to skip.",
      "type": "list[str]"
    },
    "tests": {
      "description": "Include tests in lint run.",
      "type": "bool"
    }
  },
  "isort": {
    "args": {
      "description": "Additional arguments appended to isort.",
      "type": "list[str]"
    },
    "color": {
      "description": "Enable coloured output.",
      "type": "bool"
    },
    "combine-as": {
      "description": "Combine multiple as imports into a single import.",
      "type": "bool"
    },
    "combine-star": {
      "description": "Combine star imports from the same module.",
      "type": "bool"
    },
    "conda-env": {
      "description": "Conda environment directory passed to isort.",
      "type": "path"
    },
    "extend-skip": {
      "description": "Additional skip patterns appended to defaults.",
      "type": "list[str]"
    },
    "extend-skip-glob": {
      "description": "Extra glob patterns appended after defaults.",
      "type": "list[str]"
    },
    "filter-files": {
      "description": "Filter provided files to those supported by isort before execution.",
      "type": "bool"
    },
    "float-to-top": {
      "description": "Move from-style imports to the top of the file.",
      "type": "bool"
    },
    "line-length": {
      "description": "Override import wrap line length.",
      "type": "int"
    },
    "multi-line": {
      "description": "Multi-line output mode.",
      "enum": [
        "GRID",
        "VERTICAL",
        "VERTICAL_HANGING_INDENT",
        "VERTICAL_GRID",
        "VERTICAL_GRID_GROUPED",
        "VERTICAL_GRID_GROUPED_NO_COMMA",
        "VERTICAL_GRID_NO_COMMA",
        "HANGING_INDENT"
      ],
      "type": "str"
    },
    "profile": {
      "description": "Profile to load (e.g. black).",
      "type": "str"
    },
    "settings-path": {
      "description": "Explicit isort settings / config file path.",
      "type": "path"
    },
    "skip": {
      "description": "Specific files or directories to skip.",
      "type": "list[str]"
    },
    "skip-glob": {
      "description": "File glob patterns excluded from processing.",
      "type": "list[str]"
    },
    "src": {
      "description": "Additional source roots for module resolution.",
      "type": "list[str]"
    },
    "virtual-env": {
      "description": "Virtual environment directory passed to isort.",
      "type": "path"
    }
  },
  "kube-linter": {
    "add-all-built-in": {
      "description": "Add all built-in checks regardless of config defaults.",
      "type": "bool"
    },
    "args": {
      "description": "Additional arguments appended to kube-linter.",
      "type": "list[str]"
    },
    "config": {
      "description": "Configuration file supplied to kube-linter.",
      "type": "path"
    },
    "do-not-auto-add-defaults": {
      "description": "Disable automatic default checks.",
      "type": "bool"
    },
    "exclude": {
      "description": "Checks to exclude from the run.",
      "type": "list[str]"
    },
    "fail-if-no-objects-found": {
      "description": "Error when manifests do not contain any Kubernetes objects.",
      "type": "bool"
    },
    "fail-on-invalid-resource": {
      "description": "Fail when invalid Kubernetes resources are encountered.",
      "type": "bool"
    },
    "ignore-paths": {
      "description": "Filesystem paths ignored during manifest discovery.",
      "type": "path"
    },
    "include": {
      "description": "Explicit checks to include.",
      "type": "list[str]"
    },
    "verbose": {
      "description": "Enable verbose logging output.",
      "type": "bool"
    }
  },
  "luacheck": {
    "args": {
      "description": "Additional arguments appended to luacheck.",
      "type": "list[str]"
    },
    "config": {
      "description": "luacheck configuration file.",
      "type": "path"
    },
    "exclude-files": {
      "description": "Paths or globs excluded from linting.",
      "type": "list[str]"
    },
    "globals": {
      "description": "Global identifiers treated as defined.",
      "type": "list[str]"
    },
    "ignore": {
      "description": "Diagnostic codes or patterns to ignore.",
      "type": "list[str]"
    },
    "max-code-line-length": {
      "description": "Maximum length for code lines (excluding comments/strings).",
      "type": "int"
    },
    "max-comment-line-length": {
      "description": "Maximum length for comment lines.",
      "type": "int"
    },
    "max-cyclomatic-complexity": {
      "description": "Upper limit for function cyclomatic complexity.",
      "type": "int"
    },
    "max-line-length": {
      "description": "Maximum permitted line length.",
      "type": "int"
    },
    "max-string-line-length": {
      "description": "Maximum length for lines inside multi-line strings.",
      "type": "int"
    },
    "quiet": {
      "description": "Suppress non-critical luacheck output.",
      "type": "bool"
    },
    "read-globals": {
      "description": "Globals allowed for read-only access.",
      "type": "list[str]"
    },
    "std": {
      "description": "Standard globals set to load (e.g. luajit, love, ngx).",
      "type": "str"
    }
  },
  "lualint": {
    "args": {
      "description": "Additional arguments appended to lualint.",
      "type": "list[str]"
    },
    "relaxed": {
      "description": "Enable relaxed linting mode (-r).",
      "type": "bool"
    },
    "strict": {
      "description": "Enable strict linting mode (-s).",
      "type": "bool"
    }
  },
  "mdformat": {
    "args": {
      "description": "Additional arguments appended to mdformat.",
      "type": "list[str]"
    }
  },
  "mypy": {
    "args": {
      "description": "Additional arguments passed to mypy.",
      "type": "list[str]"
    },
    "cache-dir": {
      "description": "Location for mypy cache data.",
      "type": "path"
    },
    "check-untyped-defs": {
      "description": "Type check function bodies with no type hints.",
      "type": "bool"
    },
    "config": {
      "description": "Custom mypy configuration file to load.",
      "type": "path"
    },
    "disallow-any-generics": {
      "description": "Error when using generic types with implicit Any.",
      "type": "bool"
    },
    "disallow-untyped-decorators": {
      "description": "Error on decorators without type annotations.",
      "type": "bool"
    },
    "exclude-gitignore": {
      "description": "Respect .gitignore entries when discovering modules.",
      "type": "bool"
    },
    "ignore-missing-imports": {
      "description": "Suppress errors about missing type information",
      "type": "bool"
    },
    "namespace-packages": {
      "description": "Treat packages without __init__.py as namespaces.",
      "type": "bool"
    },
    "no-implicit-reexport": {
      "description": "Disable implicit re-exporting of imported names.",
      "type": "bool"
    },
    "plugins": {
      "description": "Mypy plugins to load via --plugin.",
      "type": "list[str]"
    },
    "python-executable": {
      "description": "Interpreter executable used for type checking.",
      "type": "path"
    },
    "python-version": {
      "description": "Python version string for type checking.",
      "type": "str"
    },
    "show-column-numbers": {
      "description": "Include column numbers in diagnostic output.",
      "type": "bool"
    },
    "show-error-codes": {
      "description": "Display error codes alongside messages.",
      "type": "bool"
    },
    "sqlite-cache": {
      "description": "Enable SQLite cache backend for mypy.",
      "type": "bool"
    },
    "strict": {
      "description": "Enable mypy strict mode.",
      "type": "bool"
    },
    "warn-redundant-casts": {
      "description": "Warn when casting yields the same type.",
      "type": "bool"
    },
    "warn-return-any": {
      "description": "Warn when returning Any typed values.",
      "type": "bool"
    },
    "warn-unreachable": {
      "description": "Warn when statements are statically unreachable.",
      "type": "bool"
    },
    "warn-unused-configs": {
      "description": "Warn when config options are unused.",
      "type": "bool"
    },
    "warn-unused-ignores": {
      "description": "Warn about unused # type: ignore directives.",
      "type": "bool"
    }
  },
  "perlcritic": {
    "args": {
      "description": "Additional arguments appended to perlcritic.",
      "type": "list[str]"
    },
    "exclude": {
      "description": "Policy names to exclude.",
      "type": "list[str]"
    },
    "include": {
      "description": "Policy names to include.",
      "type": "list[str]"
    },
    "profile": {
      "description": "Perlcritic profile file to load.",
      "type": "path"
    },
    "severity": {
      "description": "Minimum severity level reported by perlcritic (1-5).",
      "type": "str"
    },
    "theme": {
      "description": "Perlcritic policy theme to enable (e.g. core, maintenance).",
      "type": "str"
    }
  },
  "perltidy": {
    "args": {
      "description": "Additional arguments appended to perltidy.",
      "type": "list[str]"
    },
    "profile": {
      "description": "Perltidy profile file controlling formatting.",
      "type": "path"
    }
  },
  "phplint": {
    "args": {
      "description": "Additional arguments appended to phplint.",
      "type": "list[str]"
    },
    "config": {
      "description": "Configuration file passed to phplint (--configuration).",
      "type": "path"
    },
    "exclude": {
      "description": "Paths excluded from linting.",
      "type": "path"
    },
    "include": {
      "description": "Paths explicitly included for linting.",
      "type": "path"
    }
  },
  "prettier": {
    "args": {
      "description": "Additional arguments passed to prettier.",
      "type": "list[str]"
    },
    "config": {
      "description": "Prettier configuration file to load.",
      "type": "path"
    },
    "config-precedence": {
      "description": "How multiple configs are merged (cli-override/file-override).",
      "type": "str"
    },
    "end-of-line": {
      "description": "End-of-line style (lf, crlf, auto).",
      "enum": [
        "lf",
        "crlf",
        "cr",
        "auto"
      ],
      "type": "str"
    },
    "ignore-path": {
      "description": "Ignore file used during formatting.",
      "type": "path"
    },
    "loglevel": {
      "description": "Prettier log level (debug/info/warn/error).",
      "type": "str"
    },
    "parser": {
      "description": "Explicit parser (e.g. typescript, babel).",
      "type": "str"
    },
    "plugin": {
      "description": "Additional prettier plugins to load.",
      "type": "list[str]"
    },
    "plugin-search-dir": {
      "description": "Directories used to resolve prettier plugins.",
      "type": "list[str]"
    },
    "print-width": {
      "description": "Preferred line length before wrapping.",
      "type": "int"
    },
    "semi": {
      "description": "Whether to add semicolons at statement ends.",
      "type": "bool"
    },
    "single-quote": {
      "description": "Prefer single quotes when formatting.",
      "type": "bool"
    },
    "tab-width": {
      "description": "Number of spaces per indentation level.",
      "type": "int"
    },
    "trailing-comma": {
      "description": "Specify trailing comma behaviour (all, es5, none).",
      "enum": [
        "all",
        "es5",
        "none"
      ],
      "type": "str"
    },
    "use-tabs": {
      "description": "Indent with tabs instead of spaces.",
      "type": "bool"
    }
  },
  "pylint": {
    "args": {
      "description": "Additional arguments appended to pylint.",
      "type": "list[str]"
    },
    "disable": {
      "description": "Message symbols or groups to disable.",
      "type": "list[str]"
    },
    "enable": {
      "description": "Message symbols to enable in addition to defaults.",
      "type": "list[str]"
    },
    "exit-zero": {
      "description": "Force exit code zero regardless of findings.",
      "type": "bool"
    },
    "fail-under": {
      "description": "Lower score boundary to fail the run.",
      "type": "float"
    },
    "init-import": {
      "description": "Control the init-import option (y/n).",
      "type": "bool"
    },
    "jobs": {
      "description": "Number of parallel workers.",
      "type": "int"
    },
    "load-plugins": {
      "description": "Pylint plugins to load via --load-plugins.",
      "type": "list[str]"
    },
    "max-args": {
      "description": "Maximum number of arguments permitted on functions/methods.",
      "type": "int"
    },
    "max-complexity": {
      "description": "Upper bound for cyclomatic complexity.",
      "type": "int"
    },
    "max-line-length": {
      "description": "Maximum allowed source line length.",
      "type": "int"
    },
    "max-positional-arguments": {
      "description": "Maximum positional arguments allowed before flagging.",
      "type": "int"
    },
    "py-version": {
      "description": "Python version string passed to pylint.",
      "type": "str"
    },
    "rcfile": {
      "description": "Path to pylintrc or equivalent configuration.",
      "type": "path"
    },
    "reports": {
      "description": "Enable/disable additional reports.",
      "type": "bool"
    },
    "score": {
      "description": "Enable/disable pylint score output.",
      "type": "bool"
    }
  },
  "pyright": {
    "args": {
      "description": "Additional arguments appended to pyright.",
      "type": "list[str]"
    },
    "ignoreexternal": {
      "description": "Ignore external type stubs.",
      "type": "bool"
    },
    "lib": {
      "description": "Include library type information in the run.",
      "type": "bool"
    },
    "project": {
      "description": "Path to pyrightconfig/tsconfig project file.",
      "type": "path"
    },
    "python-platform": {
      "description": "Target execution platform (e.g. Linux, Darwin).",
      "enum": [
        "Linux",
        "Darwin",
        "Windows"
      ],
      "type": "str"
    },
    "python-version": {
      "description": "Python version string to target.",
      "enum": [
        "3.7",
        "3.8",
        "3.9",
        "3.10",
        "3.11",
        "3.12",
        "3.13"
      ],
      "type": "str"
    },
    "pythonpath": {
      "description": "Additional search path for module resolution.",
      "type": "path"
    },
    "typeshed-path": {
      "description": "Custom typeshed location.",
      "type": "path"
    },
    "venv-path": {
      "description": "Root directory containing virtual environments.",
      "type": "path"
    },
    "verifytypes": {
      "description": "Module or pattern to verify using --verifytypes.",
      "type": "str"
    }
  },
  "pyupgrade": {
    "args": {
      "description": "Additional arguments appended to pyupgrade.",
      "type": "list[str]"
    },
    "exit-zero-even-if-changed": {
      "description": "Force exit code zero even when files change.",
      "type": "bool"
    },
    "keep-annotations": {
      "description": "Preserve annotations when rewriting.",
      "type": "bool"
    },
    "keep-logging-format": {
      "description": "Do not rewrite logging format strings.",
      "type": "bool"
    },
    "keep-mock": {
      "description": "Preserve mock rather than rewriting imports.",
      "type": "bool"
    },
    "keep-percent-format": {
      "description": "Keep percent-style string formatting.",
      "type": "bool"
    },
    "keep-runtime-typing": {
      "description": "Retain runtime typing constructs.",
      "type": "bool"
    },
    "no-verify": {
      "description": "Skip verification step after rewrites.",
      "type": "bool"
    },
    "pyplus": {
      "description": "Minimum Python version used when selecting pyupgrade transforms.",
      "type": "str"
    }
  },
  "ruff": {
    "args": {
      "description": "Additional arguments appended to the ruff invocation.",
      "type": "list[str]"
    },
    "config": {
      "description": "Specific ruff configuration file to use.",
      "type": "path"
    },
    "exclude": {
      "description": "Paths or globs that ruff should exclude.",
      "type": "list[str]"
    },
    "extend-exclude": {
      "description": "Additional exclusion patterns applied after defaults.",
      "type": "list[str]"
    },
    "extend-ignore": {
      "description": "Extend the default ignored codes for the project.",
      "type": "list[str]"
    },
    "extend-select": {
      "description": "Extend the default selection with additional rule codes.",
      "type": "list[str]"
    },
    "fix": {
      "description": "Enable --fix when running the lint action.",
      "type": "bool"
    },
    "ignore": {
      "description": "Ignore the listed ruff rule codes.",
      "type": "list[str]"
    },
    "line-length": {
      "description": "Override the maximum line length.",
      "type": "int"
    },
    "per-file-ignores": {
      "description": "List of pattern:codes entries for per-file ignores.",
      "type": "list[str]"
    },
    "preview": {
      "description": "Enable preview / unstable ruff rules.",
      "type": "bool"
    },
    "respect-gitignore": {
      "description": "Whether to honour .gitignore patterns during linting.",
      "type": "bool"
    },
    "select": {
      "description": "Restrict linting to the provided ruff rule codes.",
      "type": "list[str]"
    },
    "target-version": {
      "description": "Python version passed to ruff (e.g. py311).",
      "enum": [
        "py37",
        "py38",
        "py39",
        "py310",
        "py311",
        "py312",
        "py313"
      ],
      "type": "str"
    },
    "unsafe-fixes": {
      "description": "Allow fix actions that may alter runtime semantics.",
      "type": "bool"
    }
  },
  "ruff-format": {
    "args": {
      "description": "Additional arguments for the formatter.",
      "type": "list[str]"
    },
    "config": {
      "description": "Specific ruff formatter configuration file to use.",
      "type": "path"
    },
    "exclude": {
      "description": "Paths or globs to exclude from formatting.",
      "type": "list[str]"
    },
    "extend-exclude": {
      "description": "Additional exclusion patterns evaluated after defaults.",
      "type": "list[str]"
    },
    "line-length": {
      "description": "Override formatter line length.",
      "type": "int"
    },
    "preview": {
      "description": "Enable preview / unstable formatting behaviour.",
      "type": "bool"
    },
    "respect-gitignore": {
      "description": "Whether to honour .gitignore during formatting.",
      "type": "bool"
    },
    "stdin-filename": {
      "description": "Filename to associate with STDIN content.",
      "type": "str"
    },
    "target-version": {
      "description": "Python version passed to the formatter.",
      "enum": [
        "py37",
        "py38",
        "py39",
        "py310",
        "py311",
        "py312",
        "py313"
      ],
      "type": "str"
    }
  },
  "selene": {
    "allow-warnings": {
      "description": "Allow warnings without failing the run.",
      "type": "bool"
    },
    "args": {
      "description": "Additional arguments appended to selene.",
      "type": "list[str]"
    },
    "color": {
      "description": "Color output preference (Never, Auto, Always).",
      "type": "str"
    },
    "config": {
      "description": "Selene configuration file.",
      "type": "path"
    },
    "display-style": {
      "description": "Output display style (Json2, Compact, Pretty).",
      "type": "str"
    },
    "no-exclude": {
      "description": "Disable built-in exclude patterns.",
      "type": "bool"
    },
    "no-summary": {
      "description": "Disable summary output.",
      "type": "bool"
    },
    "num-threads": {
      "description": "Number of worker threads.",
      "type": "int"
    },
    "pattern": {
      "description": "Glob patterns to lint instead of the default file set.",
      "type": "list[str]"
    },
    "quiet": {
      "description": "Suppress non-error output.",
      "type": "bool"
    }
  },
  "speccy": {
    "args": {
      "description": "Additional arguments appended to speccy.",
      "type": "list[str]"
    },
    "ruleset": {
      "description": "Speccy ruleset file.",
      "type": "path"
    },
    "skip": {
      "description": "Checks to skip during linting.",
      "type": "list[str]"
    }
  },
  "stylelint": {
    "allow-empty-input": {
      "description": "Allow empty input without treating it as an error.",
      "type": "bool"
    },
    "args": {
      "description": "Additional arguments appended to the stylelint command.",
      "type": "list[str]"
    },
    "config": {
      "description": "Custom stylelint configuration file path.",
      "type": "path"
    },
    "custom-syntax": {
      "description": "Custom syntax module passed to --custom-syntax.",
      "type": "str"
    },
    "disable-default-ignores": {
      "description": "Disable the built-in ignore patterns.",
      "type": "bool"
    },
    "ignore-path": {
      "description": "Path to stylelint ignore file.",
      "type": "path"
    },
    "max-warnings": {
      "description": "Maximum warnings allowed before stylelint exits non-zero.",
      "type": "int"
    },
    "quiet": {
      "description": "Suppress non-error output.",
      "type": "bool"
    }
  },
  "tsc": {
    "args": {
      "description": "Additional compiler arguments appended to tsc.",
      "type": "list[str]"
    },
    "incremental": {
      "description": "Enable incremental build information.",
      "type": "bool"
    },
    "pretty": {
      "description": "Control pretty diagnostic output.",
      "type": "bool"
    },
    "project": {
      "description": "tsconfig project to use for the run.",
      "type": "path"
    },
    "skip-lib-check": {
      "description": "Skip type checking of declaration files.",
      "type": "bool"
    },
    "strict": {
      "description": "Enable all strict type-checking options.",
      "type": "bool"
    },
    "watch": {
      "description": "Run tsc in watch mode.",
      "type": "bool"
    }
  },
  "yamllint": {
    "args": {
      "description": "Additional arguments appended to yamllint.",
      "type": "list[str]"
    },
    "config-data": {
      "description": "Inline YAML configuration data.",
      "type": "str"
    },
    "config-file": {
      "description": "Configuration file passed to yamllint.",
      "type": "path"
    },
    "strict": {
      "description": "Fail when warnings are emitted.",
      "type": "bool"
    }
  }
}
